{"version":3,"sources":["webpack:///17.build.js","webpack:///./src/components/chat/ConversationList.vue","webpack:///./static/js/imgmap.js","webpack:///src/components/chat/ConversationList.vue","webpack:///src/components/chat/ConversationItem.vue","webpack:///./src/components/chat/ConversationList.vue?eb43","webpack:///./src/components/chat/ConversationList.vue?6b54","webpack:///./src/assets/im/webim.js","webpack:///./src/components/chat/ConversationItem.vue","webpack:///./src/components/chat/ConversationItem.vue?a64f","webpack:///./src/components/chat/ConversationItem.vue?c97b","webpack:///./src/components/chat/ConversationItem.vue?9dac","webpack:///./src/components/chat/ConversationList.vue?08da"],"names":["webpackJsonp","198","module","__webpack_exports__","__webpack_require__","injectStyle","ssrContext","Object","defineProperty","value","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_ConversationList_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_f977e012_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_ConversationList_vue__","normalizeComponent","__vue_styles__","Component","239","packPerson","packTeam","packDept","orgPubImg","orgImg","appIconDoctor","appIconUser","topBg","payWx","docMale","docFeMale","focusImg","unfocusImg","yuyueImg","reportImg","askImg","serviceImg","yuyueGrayImg","askGrayImg","serviceGrayImg","starImg","docRectMale","docRectFeMale","defaultAva","appointBg","rulePhoto","arrowDown","arrowRight","arrowR","home","news","service","mine","doctor","mineBg","homeAppoint","homeDoctor","homeOnline","homeOrder","notice","groupUser","groupDoc","groupDocPatient","shareImg","consultationHomeDefault","consultationHomeSelected","consultationMineDefault","consultationMineSelected","consultationSmallImg","consultationBigImg","consultationWant","consultationWanted","consultationPaySuccess","choose","chosen","arrowWhiteRight","consultationMineBg","consultationEmpty","house_n","house_s","shopping_n","shopping_s","group_n","group_s","msg_n","msg_s","my_n","my_s","focusLookImg","unfocusLookImg","assistantHeadImg","msgTip","msgDot","systemMsg","noticeMsg","familyDoc","408","__WEBPACK_IMPORTED_MODULE_0_vuex__","__WEBPACK_IMPORTED_MODULE_1__assets_im_webim_js__","__WEBPACK_IMPORTED_MODULE_2__ConversationItem_vue__","__WEBPACK_IMPORTED_MODULE_3__static_js_imgmap_js__","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","data","loginInfo","conversationList","orgId","this","$route","query","components","conversationItem","computed","methods","imLogin","sdkAppID","identifier","$store","getters","loginData","userObj","userId","accountType","userSig","imUserSign","onConnNotify","resp","info","ErrorCode","CONNECTION_STATUS","ON","Log","warn","ErrorInfo","OFF","RECONNECT","error","listeners","jsonpCallback","onMsgNotify","onLongPullingNotify","console","debug","options","isAccessFormalEnv","isLogOn","vm","login","identifierNick","headurl","getRecentContact","err","alert","newMsgList","rspData","setJsonpLastRspData","Count","getRecentContactList","firstSessId","ids","imConversationList","SessionItem","item","type","Type","sessType","sessionId","sessionNick","sessionImage","senderId","RECENT_CONTACT_TYPE","C2C","SESSION_TYPE","To_Account","C2cNick","C2cImage","GROUP","ToAccount","push","SessionType","SessionId","SessionNick","SessionImage","C2cAccount","UnreadMsgCount","MsgSeq","MsgRandom","MsgTimeStamp","Tool","formatTimeStamp","MsgGroupReadedSeq","MsgShow","netConversationGet","_this","request","accounts","dispatch","then","dataList","netData","j","imData","account","conversation","catch","$toast","message","toChat","$router","path","drName","nick","friendHeadUrl","faceUrl","gender","getImChatData","_this2","chatuser","created","409","__WEBPACK_IMPORTED_MODULE_0__static_js_imgmap_js__","props","img","groupType","sysType","_img","showText","sendTime","time","Date","parse","replace","format","581","exports","content","locals","582","583","d","webim","_typeof","Symbol","iterator","obj","constructor","global","factory","Long","low","high","unsigned","isLong","fromInt","cachedObj","cache","UINT_CACHE","fromBits","INT_CACHE","fromNumber","isNaN","isFinite","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","fromString","str","radix","Error","RangeError","p","indexOf","substring","radixToPower","pow_dbl","result","size","Math","min","parseInt","power","mul","add","fromValue","val","__isLong__","enumerable","configurable","pow","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","toString","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","intval","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","isPositive","isOdd","isEven","equals","other","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","lte","greaterThan","gt","greaterThanOrEqual","gte","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","divide","divisor","approx","res","toUnsigned","shru","shr","shl","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","toSigned","toBytes","le","toBytesLE","toBytesBE","hi","lo","window","Array","forEach","callback","apply","msgCache","syncMsgs","cbOk","cbErr","getC2CHistoryMsgs","syncGroupMsgs","sendMsg","msg","logout","setAutoRead","selSess","isOn","isResetAll","getProfilePortrait","setProfilePortrait","applyAddFriend","getPendency","deletePendency","responseFriend","getAllFriend","deleteFriend","addBlackList","getBlackList","deleteBlackList","uploadPic","createGroup","applyJoinGroup","handleApplyJoinGroup","deleteApplyJoinGroupPendency","quitGroup","getGroupPublicInfo","getGroupInfo","modifyGroupBaseInfo","destroyGroup","getJoinedGroupListHigh","getGroupMemberInfo","addGroupMember","modifyGroupMember","forbidSendMsg","deleteGroupMember","getPendencyGroup","getPendencyReport","getPendencyGroupRead","sendCustomGroupNotify","Msg","sess","isSend","seq","random","fromAccount","subType","fromAccountNick","fromAccountHeadurl","MsgStore","sessMap","sessCount","sessByTypeId","id","delSessByTypeId","resetCookieAndSyncFlag","downloadMap","SDK","VERSION","APPID","PLAATFORM","isAccessFormaEnvironment","SRV_HOST","FORMAL","COMMON","PIC","TEST","BROWSER_INFO","lowerBR","SRV_NAME","OPEN_IM","FRIEND","PROFILE","RECENT_CONTACT","BIG_GROUP","BIG_GROUP_LONG_POLLING","IM_OPEN_STAT","DEL_CHAT","WEB_IM","SRV_NAME_VER","openim","group_open_http_svc","sns","profile","recentcontact","openpic","group_open_http_noauth_svc","group_open_long_polling_http_noauth_svc","imopenstat","CMD_EVENT_ID_MAP","pic_up","apply_join_group","create_group","longpolling","send_group_msg","sendmsg","MSG_MAX_LENGTH","ACTION_STATUS","OK","FAIL","MSG_ELEMENT_TYPE","TEXT","FACE","IMAGE","CUSTOM","SOUND","FILE","LOCATION","GROUP_TIP","IMAGE_TYPE","ORIGIN","LARGE","SMALL","IMAGE_FORMAT","JPG","JPEG","GIF","PNG","BMP","UNKNOWN","UPLOAD_RES_PKG_FLAG","RAW_DATA","BASE64_DATA","DOWNLOAD_FILE","BUSSINESS_ID","AUTH_KEY","SERVER_IP","SOUND_SERVER_DOMAIN","DOWNLOAD_FILE_TYPE","UPLOAD_RES_TYPE","SHORT_VIDEO","VERSION_INFO","APP_VERSION","SERVER_VERSION","LONG_POLLINNG_EVENT_TYPE","GROUP_COMMON","GROUP_SYSTEM","GROUP_TIP2","FRIEND_NOTICE","PROFILE_NOTICE","C2C_COMMON","C2C_EVENT","C2C_MSG_SUB_TYPE","C2C_EVENT_SUB_TYPE","READED","KICKEDOUT","GROUP_MSG_SUB_TYPE","LOVEMSG","TIP","REDPACKET","GROUP_MSG_PRIORITY_TYPE","GROUP_TIP_TYPE","JOIN","QUIT","KICK","SET_ADMIN","CANCEL_ADMIN","MODIFY_GROUP_INFO","MODIFY_MEMBER_INFO","GROUP_TIP_MODIFY_GROUP_INFO_TYPE","FACE_URL","NAME","OWNER","NOTIFICATION","INTRODUCTION","GROUP_SYSTEM_TYPE","JOIN_GROUP_REQUEST","JOIN_GROUP_ACCEPT","JOIN_GROUP_REFUSE","DESTORY","CREATE","INVITED_JOIN_GROUP_REQUEST","REVOKE","INVITED_JOIN_GROUP_REQUEST_AGREE","FRIEND_NOTICE_TYPE","FRIEND_ADD","FRIEND_DELETE","PENDENCY_ADD","PENDENCY_DELETE","BLACK_LIST_ADD","BLACK_LIST_DELETE","PENDENCY_REPORT","FRIEND_UPDATE","PROFILE_NOTICE_TYPE","PROFILE_MODIFY","TLS_ERROR_CODE","SIGNATURE_EXPIRATION","INIT","UPLOAD_PIC_BUSSINESS_TYPE","GROUP_MSG","C2C_MSG","USER_HEAD","GROUP_HEAD","FRIEND_WRITE_MSG_ACTION","ING","STOP","curLongPollingStatus","longPollingOffCallbackFlag","curLongPollingRetErrorCount","longPollingDefaultTimeOut","LongPollingId","curBigGroupLongPollingRetErrorCount","Upload_Retry_Times","jsonpRequestId","jsonpLastRspData","uploadResultIframeId","ipList","authkey","expireTime","ctx","appIDAt3rd","tinyid","a2","contentType","apn","opt","xmlHttpObjSeq","xmlHttpObjMap","curSeq","tempC2CMsgList","tempC2CHistoryMsgList","apiReportItems","Resources","emotionDataIndexs","[期待]","[谢谢]","[神医]","[愤怒]","[欣喜]","[炸弹]","[恶魔]","[重伤]","[疑问]","[脸黑]","[无脸]","[发烧]","[难受]","[哭泣]","[笑哭]","[晕]","[伤心]","[闭嘴]","[微笑]","[大笑]","[憨笑]","[龇笑]","[酷]","[得意]","[困]","[哈欠]","[眼瞎]","[流汗]","[难过]","[可怜]","[斜眼]","[天使]","[受伤]","emotions","tool","timestamp","formatTime","date","o","M+","getMonth","d+","getDate","h+","getHours","m+","getMinutes","s+","getSeconds","test","RegExp","$1","getFullYear","substr","k","groupTypeEn2Ch","type_en","type_ch","groupTypeCh2En","groupRoleEn2Ch","role_en","role_ch","groupRoleCh2En","groupMsgFlagEn2Ch","msg_flag_en","msg_flag_ch","groupMsgFlagCh2En","formatText2Html","text","html","xssFilter","formatHtml2Text","getStrBytes","undefined","charCode","len","total","charCodeAt","trimStr","validNumber","match","getReturnError","errorInfo","errorCode","ActionStatus","setCookie","name","expires","domain","exp","setTime","getTime","document","cookie","escape","toGMTString","getCookie","unescape","delCookie","getQueryString","reg","r","location","search","isIE","ver","b","createElement","innerHTML","getElementsByTagName","getBrowserInfo","Sys","ua","navigator","userAgent","toLowerCase","s","ie","firefox","chrome","opera","safari","replaceObject","keyMap","json","a","on","setOn","onFlag","getOn","logStr","e","unixtime","round","nextSeq","createRandom","getXmlHttp","xmlhttp","XMLHttpRequest","ActiveXObject","ajaxRequest","meth","url","req","timeout","content_type","isLongPolling","errInfo","xmlHttpObj","open","onreadystatechange","readyState","status","responseText","setTimeout","setRequestHeader","ontimeout","event","overrideMimeType","send","ajaxRequestJson","JSON","stringify","isLogin","checkLogin","isNeedCallBack","getApiUrl","srvName","cmd","srvHost","encodeURIComponent","getSoundDownUrl","uuid","soundUrl","getFileDownUrl","fileName","fileUrl","getFileDownUrlV2","downFlag","receiverId","busiId","From_Account","os_platform","Timestamp","Random","request_info","busi_id","download_flag","version","auth_key","ip","proto_applyDownload","error_code","response_info","onAppliedDownloadUrl","maps","clearXmlHttpObjMap","abort","clearSdk","MsgManager","clear","_login","proto_accesslayer","proto_login","init","mmInitResp","reportApiQuality","eventId","reportTime","uniqKey","msgCmdErrorCode","Code","ErrMsg","rptEvtItem","UniqKey","EventId","ReportTime","MsgCmdErrorCode","loginApiReportItems","proto_reportApiQuality","EvtItems","MainVersion","Version","reportOpt","ConnManager","apiCall","WebImAccessLayer","State","loginResp","TinyId","A2Key","tag_list","LastStandardSequence","TagList","proto_getProfilePortrait","image","UserProfileItem","ProfileItem","Tag","Value","proto_logout","proto_sendMsg","msgInfo","MsgBody","OfflinePushInfo","offlinePushInfo","getSubType","GroupId","MsgPriority","elems","elem","msgContent","msgType","Text","Index","index","Data","ImageInfoArray","Size","Width","width","Height","height","URL","ImageFormat","UUID","FileName","FileSize","DownloadFlag","Desc","desc","Ext","ext","PushInfoBoolean","PushInfo","MsgType","MsgContent","proto_longPolling","stopPolling","proto_bigGroupLongPolling","proto_getMsgs","syncFlag","Cookie","SyncFlag","MsgList","proto_c2CMsgReaded","c2CMsgReadedItem","tmpC2CMsgReadedItem","toAccount","LastedMsgTime","lastedMsgTime","C2CMsgReaded","C2CMsgReadedItem","proto_deleteC2CMsg","proto_getC2CHistoryMsgs","reqMsgCount","MaxCnt","complete","Complete","rspMsgCount","msgKey","MsgKey","lastMsgTime","LastMsgTime","netxOptions","Peer_Account","proto_createGroup","Name","member_list","MemberList","Member_Account","Owner_Account","Introduction","Notification","MaxMemberCount","ApplyJoinOption","AppDefinedData","FaceUrl","proto_createGroupHigh","proto_modifyGroupBaseInfo","proto_applyJoinGroup","String","ApplyMsg","UserDefinedField","proto_applyJoinBigGroup","checkBigGroupLongPollingOn","JoinedStatus","LongPollingKey","setBigGroupLongPollingOn","setBigGroupLongPollingKey","setBigGroupLongPollingMsgMap","bigGroupLongPolling","proto_handleApplyJoinGroupPendency","Applicant_Account","HandleMsg","Authentication","ApprovalMsg","proto_getPendencyGroup","StartTime","Limit","Handle_Account","proto_getPendencyGroupRead","proto_handleInviteJoinGroupRequest","Inviter_Account","proto_quitGroup","proto_quitBigGroup","resetBigGroupLongPollingInfo","proto_searchGroupByName","proto_getGroupPublicInfo","GroupIdList","ResponseFilter","GroupBasePublicInfoFilter","GroupInfo","proto_getGroupInfo","GroupBaseInfoFilter","MemberInfoFilter","AppDefinedDataFilter_Group","AppDefinedDataFilter_GroupMember","proto_getGroupMemberInfo","Offset","MemberRoleFilter","proto_addGroupMember","Silence","proto_modifyGroupMember","Role","MsgFlag","ShutUpTime","NameCard","AppMemberDefinedData","proto_deleteGroupMember","MemberToDel_Account","Reason","proto_destroyGroup","proto_changeGroupOwner","proto_getJoinedGroupListHigh","GroupType","SelfInfoFilter","proto_getRoleInGroup","User_Account","proto_forbidSendMsg","Members_Account","proto_sendCustomGroupNotify","proto_getGroupMsgs","ReqMsgSeq","ReqMsgNumber","proto_groupMsgReaded","MsgReadedSeq","convertErrorEn2ZhFriend","errorAccount","Fail_Account","Invalid_Account","failCount","ResultItem","resultCode","ResultCode","ResultInfo","proto_applyAddFriend","AddFriendItem","newResp","proto_deleteFriend","DeleteType","proto_deleteChat","chatType","ToGroupid","proto_getPendency","PendencyType","MaxLimited","LastSequence","proto_getPendencyReport","LatestPendencyTimeStamp","proto_deletePendency","proto_responseFriend","ResponseFriendItem","proto_getAllFriend","TimeStamp","StartIndex","GetCount","proto_setProfilePortrait","proto_addBlackList","proto_deleteBlackList","proto_getBlackList","proto_getRecentContactList","proto_uploadPic","cmdName","App_Version","Seq","File_Str_Md5","File_Size","File_Type","Server_Ver","Auth_Key","Busi_Id","PkgFlag","Slice_Offset","Slice_Size","Slice_Data","proto_getIpAndAuthkey","proto_getLongPollingId","onConnCallback","callBack","tempErrorInfo","SrcErrorInfo","reqId","cbval","script","loaded","src","async","htmlFor","onload","onclick","body","removeChild","appendChild","Session","icon","_impl","skey","unread","isAutoRead","curMaxMsgSeq","msgs","isFinished","msgCount","_impl_addMsg","calcUniqId","num1","num2","str1","str2","arr1","split","reverse","arr2","sig","Number","numstr","join","long","Boolean","uniqueId","getSession","getType","getFromAccount","getFromAccountNick","getIsSend","getSeq","getRandom","getElems","getMsgUniqueId","addText","addElem","Elem","addFace","face","addImage","addLocation","addFile","file","addCustom","custom","toHtml","setOfflinePushInfo","getContent","getText","Face","getIndex","getData","emotion","Location","longitude","latitude","getLatitude","getLongitude","getDesc","Images","imageId","smallImage","getImage","bigImage","oriImage","getUrl","getImageId","getImageFormat","Image","getSize","getWidth","getHeight","Sound","second","downUrl","getUUID","getSecond","getSenderId","getDownUrl","File","getName","getDownFlag","fileSize","unitStr","GroupTip","opType","opUserId","groupId","groupName","userIdList","userinfo","groupInfoList","memberInfoList","groupMemberNum","addGroupInfo","groupInfo","addMemberInfo","memberInfo","getOpType","getOpUserId","getGroupId","getGroupName","getUserIdList","getUserInfo","getGroupInfoList","getMemberInfoList","getGroupMemberNum","setGroupMemberNum","m","GROUP_TIP_MAX_USER_COUNT","getValue","getUserId","shutupTime","getShutupTime","MemberInfo","Custom","getExt","sessTimeline","visitSess","visitor","checkDupMsg","dup","first_key","second_key","tmpOpt","c2CMsgReaded","opts","addSession","delSession","addMsg","updateTimeline","arr","sort","onMsgCallback","onGroupInfoChangeCallback","onGroupSystemNotifyCallbacks","1","2","3","4","5","6","7","8","9","10","11","15","255","12","onFriendSystemNotifyCallbacks","onProfileSystemNotifyCallbacks","onKickedEventCall","longPollingOn","notifySeq","noticeSeq","onBigGroupMsgCallback","bigGroupLongPollingOn","bigGroupLongPollingStartSeqMap","bigGroupLongPollingHoldTime","bigGroupLongPollingKeyMap","bigGroupLongPollingMsgMap","onC2cEventCallbacks","92","96","myGroupMaxSeqs","groupSystemMsgsCache","setLongPollingOn","getLongPollingOn","resetLongPollingInfo","count","bigGroupLongPollingMsgCount","initIpAndAuthkey","IpList","AuthKey","ExpireTime","initMyGroupMaxSeqs","group_id","curMaxSeq","NextMsgSeq","updateMyGroupCurMaxSeq","msgSeq","curMsgSeq","addGroupMsgList","new_group_msgs","newGroupMsg","handlerGroupMsg","ToGroupId","handlerOrdinaryAndTipC2cMsgs","eventType","groupMsgArray","groupMsgMap","groupMsgs","NoticeSeq","Event","handlerOrdinaryAndTipGroupMsgs","handlerGroupSystemMsgs","groupSystemMsgs","isNeedValidRepeatMsg","groupTip","groupReportTypeMsg","reportType","ReportType","Operator_Account","notify","SrcFlag","GroupName","MsgTime","RemarkInfo","ClientSeq","GroupReadInfoArray","l","handlerFriendSystemNotices","friendSystemNotices","friendNotice","PushType","FriendAdd_Account","FriendDel_Account","PendencyAdd","FrienPencydDel_Account","BlackListAdd_Account","BlackListDel_Account","handlerProfileSystemNotices","profileSystemNotices","profileNotice","Profile_Account","ProfileList","handlerGroupSystemMsg","handlerC2cNotifyMsgArray","handlerC2cEventMsg","SubMsgType","ReadC2cMsgNotify","UinPairReadArray","longPolling","doPolling","EventArray","NotifySeq","GroupMsgArray","GroupTips","FriendListMod","ProfileDataMod","C2cMsgArray","C2cNotifyMsgArray","successInfo","updatecLongPollingStatus","Timeout","USP","StartSeq","HoldTime","Key","msgObjList","NextSeq","RspMsgList","F_Account","T_Account","FAType","TAType","GCode","GName","GId","MFlg","FAEInfo","Evt","GInfo","BPlc","MBody","Pri","Rdm","MSeq","TStp","TGId","UEInfo","UId","BSys","FAHUrl","FANick","IsPlaceMsg","errObj","isNeedCallback","startNextLongPolling","longPollingIntervalTime","notifyInfo","msgInfos","isSendMsg","headUrl","From_AccountHeadurl","From_AccountNick","msgBody","mi","tempImg","Second","Download_Flag","Longitude","Latitude","userAction","handlerApplyJoinGroupSystemMsgs","eventArray","MsgCount","IsFinished","isSyncGroupMsgs","isAddMsgFlag","group_name","OpType","List_Account","MsgMemberExtraInfo","MemberNum","tempIsCallbackFlag","tempNewGroupInfo","GroupFaceUrl","OwnerAccount","GroupNotification","GroupIntroduction","msgGroupNewInfo","MsgGroupNewInfo","tmpNGIFaceUrl","tmpNGIName","tmpNGIOwner","tmpNGINotification","tmpNGIIntroduction","memberInfos","MsgMemberInfo","n","ShutupTime","extraInfo","MsgFrom_AccountExtraInfo","onBigGroupMsgNotify","onC2cEventNotifys","onGroupSystemNotifys","onGroupInfoChangeNotify","onFriendSystemNotifys","onProfileSystemNotifys","initIpAndAuthkeyResp","success","FileUploader","fileMd5","getFileMD5","loadNext","start","currentChunk","chunkSize","end","blobSlice","fileReader","readAsArrayBuffer","FileReader","mozSlice","webkitSlice","slice","chunks","spark","SparkMD5","binaryStr","bytes","Uint8Array","byteLength","fromCharCode","appendBinary","submitUploadFileForm","createFormInput","tempInput","form","checkFrameName","iframe","contentWindow","parentNode","formId","fileId","iframeNum","iframeName","businessType","getElementById","fileObj","style","display","uploadApiUrl","action","method","fileType","submit","uploadFile","file_upload","me","onProgressCallBack","abortButton","abortHandler","step","sliceSize","sliceOffset","reader","onloadstart","onLoadStart","onprogress","onProgress","onabort","onAbort","onerror","onLoad","onloadend","onLoadEnd","upload","readBlob","onError","DONE","slice_data_base64","pos","succCallback","IsFinish","Next_Offset","tempResp","File_UUID","URL_INFO","errorCallback","blob","readAsDataURL","Emotions","EmotionPicData","EmotionDataIndexs","EmotionPicDataIndex","offline","logoutAll","groupMsgReaded","createGroupHigh","handleApplyJoinGroupPendency","handleInviteJoinGroupRequest","searchGroupByName","changeGroupOwner","getRoleInGroup","applyJoinBigGroup","quitBigGroup","deleteChat","uploadFileByBase64","uploadPicByBase64","totalSize","base64Str","getLongPollingId","applyDownload","onDownFile","584","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_ConversationItem_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_1ca45723_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_ConversationItem_vue__","585","586","587","render","_vm","_h","$createElement","_c","_self","staticClass","attrs","alt","_v","_s","staticStyle","font-size","font-weight","color","margin-top","staticRenderFns","esExports","588","_l","nativeOn","click","$event","_e"],"mappings":"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","file":"17.build.js","sourcesContent":["webpackJsonp([17],{\n\n/***/ 198:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_ConversationList_vue__ = __webpack_require__(408);\n/* empty harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_f977e012_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_ConversationList_vue__ = __webpack_require__(588);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(581)\n}\nvar normalizeComponent = __webpack_require__(44)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-f977e012\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_ConversationList_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_f977e012_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_ConversationList_vue__[\"a\" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 239:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  packPerson: \"./static/img/ic_pack_personal.png\",\n  packTeam: \"./static/img/ic_pack_team.png\",\n  packDept: \"./static/img/ic_pack_org.png\",\n  orgPubImg: \"./static/img/ic_org_bg.png\",\n  orgImg: \"./static/img/ic_org_logo.png\",\n  appIconDoctor: \"./static/img/app_icon_doctor.png\",\n  appIconUser: \"./static/img/app_icon.png\",\n  topBg: \"./static/img/topbg.png\",\n  payWx: \"./static/img/ic_pay_wechat.png\",\n  docMale: \"./static/img/ic_doc_male.png\",\n  docFeMale: \"./static/img/ic_doc_female.png\",\n  focusImg: \"./static/img/ic_focused.png\",\n  unfocusImg: \"./static/img/ic_unfocus.png\",\n  yuyueImg: \"./static/img/ic_yuyue.png\",\n  reportImg: \"./static/img/ic_report.png\",\n  askImg: \"./static/img/ic_ask.png\",\n  serviceImg: \"./static/img/ic_services.png\",\n  yuyueGrayImg: \"./static/img/ic_yuyue_gray.png\",\n  askGrayImg: \"./static/img/ic_ask_grey.png\",\n  serviceGrayImg: \"./static/img/ic_services_grey.png\",\n  starImg: \"./static/img/ic_rating_all.png\",\n  docRectMale: \"./static/img/ic_rect_male.png\",\n  docRectFeMale: \"./static/img/ic_rect_female.png\",\n  defaultAva: \"./static/img/ic_default_ava.png\",\n  appointBg: \"./static/img/ic_appoint_bg.png\",\n  rulePhoto: \"./static/img/ic_rule.png\",\n  arrowDown: \"./static/img/ic_arrow_down.png\",\n  arrowRight: \"./static/img/arrow_right.png\",\n  arrowR: \"./static/img/ic_arrow_right.png\",\n\n  home: \"./static/img/home.png\",\n  news: \"./static/img/news.png\",\n  service: \"./static/img/service.png\",\n  mine: \"./static/img/mine.png\",\n  doctor: \"./static/img/doctor.png\",\n\n  mineBg: \"./static/img/mine_bg.png\",\n\n  homeAppoint: \"./static/img/home_appoint.png\",\n  homeDoctor: \"./static/img/home_doctor.png\",\n  homeOnline: \"./static/img/home_online.png\",\n  homeOrder: \"./static/img/home_order.png\",\n\n  notice: \"./static/img/notice.png\",\n\n  groupUser: './static/img/ic_group_user.png',\n  groupDoc: './static/img/ic_group_doc.png',\n  groupDocPatient: './static/img/ic_group_doc_patient.png',\n\n  shareImg: \"./static/img/share.png\",\n\n  consultationHomeDefault: \"./static/img/ic_consulation_home_default.png\",\n  consultationHomeSelected: \"./static/img/ic_consulation_home_selected.png\",\n  consultationMineDefault: \"./static/img/ic_consulation_mine_default.png\",\n  consultationMineSelected: \"./static/img/ic_consulation_mine_selected.png\",\n  consultationSmallImg: \"./static/img/ic_consultation_small_default.png\",\n  consultationBigImg: \"./static/img/ic_consultation_big_default.png\",\n  consultationWant: './static/img/ic_want.png',\n  consultationWanted: './static/img/ic_wanted.png',\n  consultationPaySuccess: './static/img/ic_sign_success.png',\n  choose: './static/img/choose.png',\n  chosen: './static/img/choosen.png',\n  arrowWhiteRight: './static/img/ic_arrow_right_white.png',\n  consultationMineBg: './static/img/ic_mine_bg.png',\n  consultationEmpty: './static/img/ic_empty.png',\n\n  /**  新版  ***/\n\n  //首页\n  house_n: './static/img/house_n.png',\n  house_s: './static/img/house_s.png',\n  //商城\n  shopping_n: './static/img/shopping_n.png',\n  shopping_s: './static/img/shopping_s.png',\n  //小组\n  group_n: './static/img/group_n.png',\n  group_s: './static/img/group_s.png',\n  //消息\n  msg_n: './static/img/msg_n.png',\n  msg_s: './static/img/msg_s.png',\n  //我的\n  my_n: './static/img/my_n.png',\n  my_s: './static/img/my_s.png',\n\n  //关注/取消\n  focusLookImg: \"./static/img/look@2.png\",\n  unfocusLookImg: \"./static/img/no_look@2.png\",\n  //医生助理头像\n  assistantHeadImg: \"./static/img/assistant_head_img.png\",\n  //无标记消息\n  msgTip: \"./static/img/msg_tip.png\",\n  //有标记消息\n  msgDot: \"./static/img/msg_dot.png\",\n  //系统消息\n  systemMsg: \"./static/img/system_msg.png\",\n  //通知消息\n  noticeMsg: \"./static/img/notice_msg.png\",\n  //家庭医生\n  familyDoc: \"./static/img/family_doc.png\"\n});\n\n/***/ }),\n\n/***/ 408:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vuex__ = __webpack_require__(12);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__assets_im_webim_js__ = __webpack_require__(583);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ConversationItem_vue__ = __webpack_require__(584);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__static_js_imgmap_js__ = __webpack_require__(239);\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  data: function data() {\n    return {\n      loginInfo: {},\n      conversationList: [],\n      orgId: this.$route.query.orgId\n    };\n  },\n\n\n  components: {\n    conversationItem: __WEBPACK_IMPORTED_MODULE_2__ConversationItem_vue__[\"a\" /* default */]\n  },\n  computed: _extends({}, Object(__WEBPACK_IMPORTED_MODULE_0_vuex__[\"c\" /* mapGetters */])(['loginData']), {\n    consultationEmpty: function consultationEmpty() {\n      return __WEBPACK_IMPORTED_MODULE_3__static_js_imgmap_js__[\"a\" /* default */].consultationEmpty;\n    }\n  }),\n\n  methods: {\n    imLogin: function imLogin() {\n      this.loginInfo = {\n        'sdkAppID': 1400034465, //用户所属应用id,必填\n        'identifier': this.$store.getters.loginData.userObj.userId.value, //当前用户ID,必须是否字符串类型，必填\n        'accountType': 12230, //用户所属应用帐号类型，必填\n        'userSig': this.$store.getters.loginData.imUserSign\n      };\n      var onConnNotify = function onConnNotify(resp) {\n        var info = void 0;\n        switch (resp.ErrorCode) {\n          case __WEBPACK_IMPORTED_MODULE_1__assets_im_webim_js__[\"a\" /* webim */].CONNECTION_STATUS.ON:\n            __WEBPACK_IMPORTED_MODULE_1__assets_im_webim_js__[\"a\" /* webim */].Log.warn('建立连接成功: ' + resp.ErrorInfo);\n            break;\n          case __WEBPACK_IMPORTED_MODULE_1__assets_im_webim_js__[\"a\" /* webim */].CONNECTION_STATUS.OFF:\n            info = '连接已断开，无法收到新消息，请检查下你的网络是否正常: ' + resp.ErrorInfo;\n            // alert(info);\n            __WEBPACK_IMPORTED_MODULE_1__assets_im_webim_js__[\"a\" /* webim */].Log.warn(info);\n            break;\n          case __WEBPACK_IMPORTED_MODULE_1__assets_im_webim_js__[\"a\" /* webim */].CONNECTION_STATUS.RECONNECT:\n            info = '连接状态恢复正常: ' + resp.ErrorInfo;\n            // alert(info);\n            __WEBPACK_IMPORTED_MODULE_1__assets_im_webim_js__[\"a\" /* webim */].Log.warn(info);\n            break;\n          default:\n            __WEBPACK_IMPORTED_MODULE_1__assets_im_webim_js__[\"a\" /* webim */].Log.error('未知连接状态: =' + resp.ErrorInfo);\n            break;\n        }\n      };\n\n      //监听事件\n      var listeners = {\n        \"onConnNotify\": onConnNotify, //监听连接状态回调变化事件,必填\n        \"jsonpCallback\": this.jsonpCallback, //IE9(含)以下浏览器用到的jsonp回调函数，\n        \"onMsgNotify\": this.onMsgNotify, //监听新消息(私聊，普通群(非直播聊天室)消息，全员推送消息)事件，必填\n        \"onLongPullingNotify\": function onLongPullingNotify(data) {\n          console.debug('onLongPullingNotify', data);\n        }\n      };\n\n      //初始化时，其他对象，选填\n      var options = {\n        'isAccessFormalEnv': true, //是否访问正式环境，默认访问正式，选填\n        'isLogOn': false //是否开启控制台打印日志,默认开启，选填\n      };\n\n      var vm = this;\n      __WEBPACK_IMPORTED_MODULE_1__assets_im_webim_js__[\"a\" /* webim */].login(this.loginInfo, listeners, options, function (resp) {\n        vm.loginInfo.identifierNick = resp.identifierNick; //设置当前用户昵称\n        vm.loginInfo.headurl = resp.headurl; //设置当前用户头像\n\n        vm.getRecentContact();\n      }, function (err) {\n        alert(err.ErrorInfo);\n      });\n    },\n    onMsgNotify: function onMsgNotify(newMsgList) {\n      this.getRecentContact();\n    },\n\n\n    //IE9(含)以下浏览器用到的jsonp回调函数\n    jsonpCallback: function jsonpCallback(rspData) {\n      __WEBPACK_IMPORTED_MODULE_1__assets_im_webim_js__[\"a\" /* webim */].setJsonpLastRspData(rspData);\n    },\n    getRecentContact: function getRecentContact() {\n      var vm = this;\n      var options = {\n        'Count': 100 //要拉取的最近会话条数\n      };\n      // var sessMap = webim.MsgStore.sessMap();\n      // console.log(sessMap);\n\n      __WEBPACK_IMPORTED_MODULE_1__assets_im_webim_js__[\"a\" /* webim */].getRecentContactList(options, function (resp) {\n        // console.log(resp);\n        var firstSessType = void 0; //保存第一个会话类型\n        var firstSessId = void 0; //保存第一个会话id\n        var ids = [];\n        var imConversationList = [];\n        if (resp.SessionItem && resp.SessionItem.length > 0) {\n          //如果存在最近会话记录\n\n          for (var i in resp.SessionItem) {\n            var item = resp.SessionItem[i];\n            var type = item.Type; //接口返回的会话类型\n            var sessType = void 0,\n                typeZh = void 0,\n                sessionId = void 0,\n                sessionNick = '',\n                sessionImage = '',\n                senderId = '';\n            if (type == __WEBPACK_IMPORTED_MODULE_1__assets_im_webim_js__[\"a\" /* webim */].RECENT_CONTACT_TYPE.C2C) {\n              //私聊\n              typeZh = '私聊';\n              sessType = __WEBPACK_IMPORTED_MODULE_1__assets_im_webim_js__[\"a\" /* webim */].SESSION_TYPE.C2C; //设置会话类型\n              sessionId = item.To_Account; //会话id，私聊时为好友ID或者系统账号（值为@TIM#SYSTEM，业务可以自己决定是否需要展示），注意：从To_Account获取,\n              if (sessionId == '@TIM#SYSTEM') {\n                //先过滤系统消息，，\n                __WEBPACK_IMPORTED_MODULE_1__assets_im_webim_js__[\"a\" /* webim */].Log.warn('过滤好友系统消息,sessionId=' + sessionId);\n                continue;\n              }\n              sessionNick = item.C2cNick; //会话昵称，如果昵称为空，默认将其设成会话id\n              sessionImage = item.C2cImage;\n              senderId = item.To_Account;\n            } else if (type == __WEBPACK_IMPORTED_MODULE_1__assets_im_webim_js__[\"a\" /* webim */].RECENT_CONTACT_TYPE.GROUP) {\n              //群聊\n              continue; //TODO  暂时屏蔽群消息\n\n              typeZh = '群聊';\n              sessType = __WEBPACK_IMPORTED_MODULE_1__assets_im_webim_js__[\"a\" /* webim */].SESSION_TYPE.GROUP; //设置会话类型\n              sessionId = item.ToAccount; //会话id，群聊时为群ID，注意：从ToAccount获取\n              sessionNick = item.GroupNick; //会话昵称，群聊时，为群名称，接口一定会返回\n              sessionImage = item.GroupImage;\n              senderId = item.MsgGroupFrom_Account; //群消息的发送者id\n              if (!senderId) {\n                //发送者id为空\n                __WEBPACK_IMPORTED_MODULE_1__assets_im_webim_js__[\"a\" /* webim */].Log.warn('群消息发送者id为空,senderId=' + senderId + \",groupid=\" + sessionId);\n                continue;\n              }\n              if (senderId == '@TIM#SYSTEM') {\n                //先过滤群系统消息，因为接口暂时区分不了是进群还是退群等提示消息，\n                __WEBPACK_IMPORTED_MODULE_1__assets_im_webim_js__[\"a\" /* webim */].Log.warn('过滤群系统消息,senderId=' + senderId + \",groupid=\" + sessionId);\n                continue;\n              }\n            } else {\n              typeZh = '未知类型';\n              sessionId = item.ToAccount; //\n            }\n            if (!sessionId) {\n              //会话id为空\n              __WEBPACK_IMPORTED_MODULE_1__assets_im_webim_js__[\"a\" /* webim */].Log.warn('会话id为空,sessionId=' + sessionId);\n              continue;\n            }\n\n            if (sessionId == '@TLS#NOT_FOUND') {\n              //会话id不存在，可能是已经被删除了\n              __WEBPACK_IMPORTED_MODULE_1__assets_im_webim_js__[\"a\" /* webim */].Log.warn('会话id不存在,sessionId=' + sessionId);\n              continue;\n            }\n\n            if (!firstSessId) {\n              firstSessType = sessType; //记录第一个会话类型\n              firstSessId = sessionId; //记录第一个会话id\n            }\n            imConversationList.push({\n              SessionType: sessType, //会话类型\n              SessionId: sessionId, //会话对象id，好友id或者群id\n              SessionNick: sessionNick, //会话昵称，好友昵称或群名称\n              SessionImage: sessionImage, //会话头像，好友头像或者群头像\n              C2cAccount: senderId, //发送者id，群聊时，才有用\n              UnreadMsgCount: item.UnreadMsgCount, //未读消息数,私聊时需要通过webim.syncMsgs(initUnreadMsgCount)获取,参考后面的demo，群聊时不需要。\n              MsgSeq: item.MsgSeq, //消息seq\n              MsgRandom: item.MsgRandom, //消息随机数\n              MsgTimeStamp: __WEBPACK_IMPORTED_MODULE_1__assets_im_webim_js__[\"a\" /* webim */].Tool.formatTimeStamp(item.MsgTimeStamp), //消息时间戳\n              MsgGroupReadedSeq: item.MsgGroupReadedSeq || 0,\n              MsgShow: item.MsgShow //消息内容,文本消息为原内容，表情消息为[表情],其他类型消息以此类推\n            });\n            ids.push(sessionId);\n          }\n        }\n        if (ids.length > 0) {\n          vm.netConversationGet(ids, imConversationList);\n        }\n      });\n    },\n    netConversationGet: function netConversationGet(ids, imConversationList) {\n      var _this = this;\n\n      var request = {\n        accounts: ids,\n        orgId: this.orgId\n      };\n      var vm = this;\n      this.$store.dispatch(\"imConversationList\", request).then(function (dataList) {\n        if (dataList && dataList.length > 0) {\n          vm.conversationList = dataList;\n          if (imConversationList && imConversationList.length > 0) {\n            for (var i = 0; i < dataList.length; i++) {\n              var netData = dataList[i];\n              for (var j = 0; j < imConversationList.length; j++) {\n                var imData = imConversationList[j];\n                if (netData.account == imData.SessionId) {\n                  netData.conversation = imData;\n                  break;\n                }\n              }\n            }\n          }\n        }\n      }).catch(function (error) {\n        _this.$toast(error.message);\n      });\n    },\n    toChat: function toChat(conversationItem) {\n      this.$router.push({\n        path: \"chat\",\n        query: { userId: conversationItem.account, drName: conversationItem.nick, friendHeadUrl: conversationItem.faceUrl, gender: conversationItem.gender.value }\n      });\n    },\n\n    //获取聊天记录\n    getImChatData: function getImChatData() {\n      var _this2 = this;\n\n      var request = {\n        chatuser: '1098738383691227100' //this.$store.getters.loginData.userObj.userId.value\n      };\n      var vm = this;\n      this.$store.dispatch(\"imChatData\", request).then(function (dataList) {\n        // if(dataList && dataList.length > 0) {\n        //   vm.conversationList = dataList;\n        //   if(imConversationList && imConversationList.length > 0) {\n        //     for (let i = 0; i < dataList.length; i++) {\n        //         let netData = dataList[i];\n        //         for (let j = 0; j < imConversationList.length; j++) {\n        //           let imData = imConversationList[j];\n        //           if(netData.account == imData.SessionId) {\n        //             netData.conversation = imData;\n        //             break;\n        //           }\n        //         }\n        //     }\n        //   }\n        // }\n      }).catch(function (error) {\n        _this2.$toast(error.message);\n      });\n    }\n  },\n\n  created: function created() {\n    // this.getImChatData();\n    // this.imLogin();\n    // console.log('localStorage.getItem(\"imMsgList\")==',localStorage.getItem(\"imMsgList\"));\n  }\n});\n\n/***/ }),\n\n/***/ 409:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__static_js_imgmap_js__ = __webpack_require__(239);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  props: ['conversationItem'],\n\n  computed: {\n    img: function img() {\n      if (this.conversationItem.faceUrl) return this.conversationItem.faceUrl;\n\n      if (this.conversationItem.groupType.value != '0') {\n        var img = __WEBPACK_IMPORTED_MODULE_0__static_js_imgmap_js__[\"a\" /* default */].groupUser;\n        if (this.conversationItem.groupType.value == \"2\") {\n          img = __WEBPACK_IMPORTED_MODULE_0__static_js_imgmap_js__[\"a\" /* default */].groupDoc;\n        } else if (this.conversationItem.groupType.value == \"3\") {\n          img = __WEBPACK_IMPORTED_MODULE_0__static_js_imgmap_js__[\"a\" /* default */].groupDocPatient;\n        }\n        return img;\n      } else {\n        if (this.conversationItem.sysType.value == '1003104') {\n          //对方是用户\n          return __WEBPACK_IMPORTED_MODULE_0__static_js_imgmap_js__[\"a\" /* default */].defaultAva;\n        } else {\n          var _img = __WEBPACK_IMPORTED_MODULE_0__static_js_imgmap_js__[\"a\" /* default */].docMale;\n          if (this.conversationItem.gender && this.conversationItem.gender.value == \"0\") {\n            _img = __WEBPACK_IMPORTED_MODULE_0__static_js_imgmap_js__[\"a\" /* default */].docFeMale;\n          }\n          return _img;\n        }\n      }\n    },\n    showText: function showText() {\n      if (this.conversationItem.conversation) {\n        return this.conversationItem.conversation.MsgShow;\n      }\n    },\n    sendTime: function sendTime() {\n      if (this.conversationItem.conversation) {\n        var time = this.conversationItem.conversation.MsgTimeStamp;\n        if (time) {\n          var date = new Date(Date.parse(time.replace(/-/g, \"/\"))).format('MM-dd hh:mm');\n          return date;\n        }\n      }\n    }\n  }\n});\n\n/***/ }),\n\n/***/ 581:\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(582);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(1)(\"f4fd4304\", content, true, {});\n\n/***/ }),\n\n/***/ 582:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(0)(false);\n// imports\n\n\n// module\nexports.push([module.i, \".empty[data-v-f977e012]{padding:50px 40px;text-align:center}\", \"\"]);\n\n// exports\n\n\n/***/ }),\n\n/***/ 583:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return webim; });\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/* webim javascript SDK\n * VER 1.7.2\n */\n(function (global, factory) {\n\n    global[\"Long\"] = factory();\n})(window, function () {\n    \"use strict\";\n\n    function Long(low, high, unsigned) {\n        this.low = low | 0;\n        this.high = high | 0;\n        this.unsigned = !!unsigned;\n    }\n    Long.prototype.__isLong__;\n\n    Object.defineProperty(Long.prototype, \"__isLong__\", {\n        value: true,\n        enumerable: false,\n        configurable: false\n    });\n\n    function isLong(obj) {\n        return (obj && obj[\"__isLong__\"]) === true;\n    }\n    Long.isLong = isLong;\n    var INT_CACHE = {};\n    var UINT_CACHE = {};\n\n    function fromInt(value, unsigned) {\n        var obj, cachedObj, cache;\n        if (unsigned) {\n            value >>>= 0;\n            if (cache = 0 <= value && value < 256) {\n                cachedObj = UINT_CACHE[value];\n                if (cachedObj) return cachedObj;\n            }\n            obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n            if (cache) UINT_CACHE[value] = obj;\n            return obj;\n        } else {\n            value |= 0;\n            if (cache = -128 <= value && value < 128) {\n                cachedObj = INT_CACHE[value];\n                if (cachedObj) return cachedObj;\n            }\n            obj = fromBits(value, value < 0 ? -1 : 0, false);\n            if (cache) INT_CACHE[value] = obj;\n            return obj;\n        }\n    }\n    Long.fromInt = fromInt;\n\n    function fromNumber(value, unsigned) {\n        if (isNaN(value) || !isFinite(value)) return unsigned ? UZERO : ZERO;\n        if (unsigned) {\n            if (value < 0) return UZERO;\n            if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n        } else {\n            if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n            if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n        }\n        if (value < 0) return fromNumber(-value, unsigned).neg();\n        return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n    }\n    Long.fromNumber = fromNumber;\n\n    function fromBits(lowBits, highBits, unsigned) {\n        return new Long(lowBits, highBits, unsigned);\n    }\n    Long.fromBits = fromBits;\n    var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n\n    function fromString(str, unsigned, radix) {\n        if (str.length === 0) throw Error('empty string');\n        if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return ZERO;\n        if (typeof unsigned === 'number') {\n            // For goog.math.long compatibility\n            radix = unsigned, unsigned = false;\n        } else {\n            unsigned = !!unsigned;\n        }\n        radix = radix || 10;\n        if (radix < 2 || 36 < radix) throw RangeError('radix');\n\n        var p;\n        if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n            return fromString(str.substring(1), unsigned, radix).neg();\n        }\n        var radixToPower = fromNumber(pow_dbl(radix, 8));\n\n        var result = ZERO;\n        for (var i = 0; i < str.length; i += 8) {\n            var size = Math.min(8, str.length - i),\n                value = parseInt(str.substring(i, i + size), radix);\n            if (size < 8) {\n                var power = fromNumber(pow_dbl(radix, size));\n                result = result.mul(power).add(fromNumber(value));\n            } else {\n                result = result.mul(radixToPower);\n                result = result.add(fromNumber(value));\n            }\n        }\n        result.unsigned = unsigned;\n        return result;\n    }\n    Long.fromString = fromString;\n\n    function fromValue(val) {\n        if (val /* is compatible */ instanceof Long) return val;\n        if (typeof val === 'number') return fromNumber(val);\n        if (typeof val === 'string') return fromString(val);\n        // Throws for non-objects, converts non-instanceof Long:\n        return fromBits(val.low, val.high, val.unsigned);\n    }\n    Long.fromValue = fromValue;\n    var TWO_PWR_16_DBL = 1 << 16;\n    var TWO_PWR_24_DBL = 1 << 24;\n    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n    var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n    var ZERO = fromInt(0);\n    Long.ZERO = ZERO;\n    var UZERO = fromInt(0, true);\n    Long.UZERO = UZERO;\n    var ONE = fromInt(1);\n    Long.ONE = ONE;\n    var UONE = fromInt(1, true);\n    Long.UONE = UONE;\n    var NEG_ONE = fromInt(-1);\n    Long.NEG_ONE = NEG_ONE;\n    var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n    Long.MAX_VALUE = MAX_VALUE;\n    var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n    Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n    var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n    Long.MIN_VALUE = MIN_VALUE;\n    var LongPrototype = Long.prototype;\n    LongPrototype.toInt = function toInt() {\n        return this.unsigned ? this.low >>> 0 : this.low;\n    };\n    LongPrototype.toNumber = function toNumber() {\n        if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n    };\n\n    LongPrototype.toString = function toString(radix) {\n        radix = radix || 10;\n        if (radix < 2 || 36 < radix) throw RangeError('radix');\n        if (this.isZero()) return '0';\n        if (this.isNegative()) {\n            // Unsigned Longs are never negative\n            if (this.eq(MIN_VALUE)) {\n                // We need to change the Long value before it can be negated, so we remove\n                // the bottom-most digit in this base and then recurse to do the rest.\n                var radixLong = fromNumber(radix),\n                    div = this.div(radixLong),\n                    rem1 = div.mul(radixLong).sub(this);\n                return div.toString(radix) + rem1.toInt().toString(radix);\n            } else return '-' + this.neg().toString(radix);\n        }\n        var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n            rem = this;\n        var result = '';\n        while (true) {\n            var remDiv = rem.div(radixToPower),\n                intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n                digits = intval.toString(radix);\n            rem = remDiv;\n            if (rem.isZero()) return digits + result;else {\n                while (digits.length < 6) {\n                    digits = '0' + digits;\n                }result = '' + digits + result;\n            }\n        }\n    };\n    LongPrototype.getHighBits = function getHighBits() {\n        return this.high;\n    };\n    LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n        return this.high >>> 0;\n    };\n    LongPrototype.getLowBits = function getLowBits() {\n        return this.low;\n    };\n    LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n        return this.low >>> 0;\n    };\n    LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n        if (this.isNegative()) // Unsigned Longs are never negative\n            return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n        var val = this.high != 0 ? this.high : this.low;\n        for (var bit = 31; bit > 0; bit--) {\n            if ((val & 1 << bit) != 0) break;\n        }return this.high != 0 ? bit + 33 : bit + 1;\n    };\n    LongPrototype.isZero = function isZero() {\n        return this.high === 0 && this.low === 0;\n    };\n    LongPrototype.isNegative = function isNegative() {\n        return !this.unsigned && this.high < 0;\n    };\n    LongPrototype.isPositive = function isPositive() {\n        return this.unsigned || this.high >= 0;\n    };\n    LongPrototype.isOdd = function isOdd() {\n        return (this.low & 1) === 1;\n    };\n    LongPrototype.isEven = function isEven() {\n        return (this.low & 1) === 0;\n    };\n    LongPrototype.equals = function equals(other) {\n        if (!isLong(other)) other = fromValue(other);\n        if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n        return this.high === other.high && this.low === other.low;\n    };\n    LongPrototype.eq = LongPrototype.equals;\n    LongPrototype.notEquals = function notEquals(other) {\n        return !this.eq( /* validates */other);\n    };\n    LongPrototype.neq = LongPrototype.notEquals;\n\n    /**\n     * Tests if this Long's value is less than the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.lessThan = function lessThan(other) {\n        return this.comp( /* validates */other) < 0;\n    };\n\n    /**\n     * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.lt = LongPrototype.lessThan;\n\n    /**\n     * Tests if this Long's value is less than or equal the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n        return this.comp( /* validates */other) <= 0;\n    };\n\n    /**\n     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.lte = LongPrototype.lessThanOrEqual;\n\n    /**\n     * Tests if this Long's value is greater than the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.greaterThan = function greaterThan(other) {\n        return this.comp( /* validates */other) > 0;\n    };\n\n    /**\n     * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.gt = LongPrototype.greaterThan;\n\n    /**\n     * Tests if this Long's value is greater than or equal the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n        return this.comp( /* validates */other) >= 0;\n    };\n\n    /**\n     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n\n    /**\n     * Compares this Long's value with the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n     *  if the given one is greater\n     */\n    LongPrototype.compare = function compare(other) {\n        if (!isLong(other)) other = fromValue(other);\n        if (this.eq(other)) return 0;\n        var thisNeg = this.isNegative(),\n            otherNeg = other.isNegative();\n        if (thisNeg && !otherNeg) return -1;\n        if (!thisNeg && otherNeg) return 1;\n        // At this point the sign bits are the same\n        if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1;\n        // Both are positive if at least one is unsigned\n        return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n    };\n\n    /**\n     * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n     *  if the given one is greater\n     */\n    LongPrototype.comp = LongPrototype.compare;\n\n    /**\n     * Negates this Long's value.\n     * @returns {!Long} Negated Long\n     */\n    LongPrototype.negate = function negate() {\n        if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n        return this.not().add(ONE);\n    };\n\n    /**\n     * Negates this Long's value. This is an alias of {@link Long#negate}.\n     * @function\n     * @returns {!Long} Negated Long\n     */\n    LongPrototype.neg = LongPrototype.negate;\n\n    /**\n     * Returns the sum of this and the specified Long.\n     * @param {!Long|number|string} addend Addend\n     * @returns {!Long} Sum\n     */\n    LongPrototype.add = function add(addend) {\n        if (!isLong(addend)) addend = fromValue(addend);\n\n        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n        var a48 = this.high >>> 16;\n        var a32 = this.high & 0xFFFF;\n        var a16 = this.low >>> 16;\n        var a00 = this.low & 0xFFFF;\n\n        var b48 = addend.high >>> 16;\n        var b32 = addend.high & 0xFFFF;\n        var b16 = addend.low >>> 16;\n        var b00 = addend.low & 0xFFFF;\n\n        var c48 = 0,\n            c32 = 0,\n            c16 = 0,\n            c00 = 0;\n        c00 += a00 + b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xFFFF;\n        c16 += a16 + b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xFFFF;\n        c32 += a32 + b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c48 += a48 + b48;\n        c48 &= 0xFFFF;\n        return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n    };\n\n    /**\n     * Returns the difference of this and the specified Long.\n     * @param {!Long|number|string} subtrahend Subtrahend\n     * @returns {!Long} Difference\n     */\n    LongPrototype.subtract = function subtract(subtrahend) {\n        if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n        return this.add(subtrahend.neg());\n    };\n\n    /**\n     * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n     * @function\n     * @param {!Long|number|string} subtrahend Subtrahend\n     * @returns {!Long} Difference\n     */\n    LongPrototype.sub = LongPrototype.subtract;\n\n    /**\n     * Returns the product of this and the specified Long.\n     * @param {!Long|number|string} multiplier Multiplier\n     * @returns {!Long} Product\n     */\n    LongPrototype.multiply = function multiply(multiplier) {\n        if (this.isZero()) return ZERO;\n        if (!isLong(multiplier)) multiplier = fromValue(multiplier);\n        if (multiplier.isZero()) return ZERO;\n        if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n        if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n\n        if (this.isNegative()) {\n            if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n        } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg();\n\n        // If both longs are small, use float multiplication\n        if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n\n        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n        // We can skip products that would overflow.\n\n        var a48 = this.high >>> 16;\n        var a32 = this.high & 0xFFFF;\n        var a16 = this.low >>> 16;\n        var a00 = this.low & 0xFFFF;\n\n        var b48 = multiplier.high >>> 16;\n        var b32 = multiplier.high & 0xFFFF;\n        var b16 = multiplier.low >>> 16;\n        var b00 = multiplier.low & 0xFFFF;\n\n        var c48 = 0,\n            c32 = 0,\n            c16 = 0,\n            c00 = 0;\n        c00 += a00 * b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xFFFF;\n        c16 += a16 * b00;\n        c32 += c16 >>> 16;\n        c16 &= 0xFFFF;\n        c16 += a00 * b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xFFFF;\n        c32 += a32 * b00;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c32 += a16 * b16;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c32 += a00 * b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n        c48 &= 0xFFFF;\n        return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n    };\n\n    /**\n     * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n     * @function\n     * @param {!Long|number|string} multiplier Multiplier\n     * @returns {!Long} Product\n     */\n    LongPrototype.mul = LongPrototype.multiply;\n\n    /**\n     * Returns this Long divided by the specified. The result is signed if this Long is signed or\n     *  unsigned if this Long is unsigned.\n     * @param {!Long|number|string} divisor Divisor\n     * @returns {!Long} Quotient\n     */\n    LongPrototype.divide = function divide(divisor) {\n        if (!isLong(divisor)) divisor = fromValue(divisor);\n        if (divisor.isZero()) throw Error('division by zero');\n        if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n        var approx, rem, res;\n        if (!this.unsigned) {\n            // This section is only relevant for signed longs and is derived from the\n            // closure library as a whole.\n            if (this.eq(MIN_VALUE)) {\n                if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n                else if (divisor.eq(MIN_VALUE)) return ONE;else {\n                        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                        var halfThis = this.shr(1);\n                        approx = halfThis.div(divisor).shl(1);\n                        if (approx.eq(ZERO)) {\n                            return divisor.isNegative() ? ONE : NEG_ONE;\n                        } else {\n                            rem = this.sub(divisor.mul(approx));\n                            res = approx.add(rem.div(divisor));\n                            return res;\n                        }\n                    }\n            } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n            if (this.isNegative()) {\n                if (divisor.isNegative()) return this.neg().div(divisor.neg());\n                return this.neg().div(divisor).neg();\n            } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n            res = ZERO;\n        } else {\n            // The algorithm below has not been made for unsigned longs. It's therefore\n            // required to take special care of the MSB prior to running it.\n            if (!divisor.unsigned) divisor = divisor.toUnsigned();\n            if (divisor.gt(this)) return UZERO;\n            if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n                return UONE;\n            res = UZERO;\n        }\n\n        // Repeat the following until the remainder is less than other:  find a\n        // floating-point that approximates remainder / other *from below*, add this\n        // into the result, and subtract it from the remainder.  It is critical that\n        // the approximate value is less than or equal to the real value so that the\n        // remainder never becomes negative.\n        rem = this;\n        while (rem.gte(divisor)) {\n            // Approximate the result of division. This may be a little greater or\n            // smaller than the actual value.\n            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n\n            // We will tweak the approximate result by changing it in the 48-th digit or\n            // the smallest non-fractional digit, whichever is larger.\n            var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n                delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n\n\n            // Decrease the approximation until it is smaller than the remainder.  Note\n            // that if it is too large, the product overflows and is negative.\n            approxRes = fromNumber(approx),\n                approxRem = approxRes.mul(divisor);\n            while (approxRem.isNegative() || approxRem.gt(rem)) {\n                approx -= delta;\n                approxRes = fromNumber(approx, this.unsigned);\n                approxRem = approxRes.mul(divisor);\n            }\n\n            // We know the answer can't be zero... and actually, zero would cause\n            // infinite recursion since we would make no progress.\n            if (approxRes.isZero()) approxRes = ONE;\n\n            res = res.add(approxRes);\n            rem = rem.sub(approxRem);\n        }\n        return res;\n    };\n\n    /**\n     * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n     * @function\n     * @param {!Long|number|string} divisor Divisor\n     * @returns {!Long} Quotient\n     */\n    LongPrototype.div = LongPrototype.divide;\n\n    /**\n     * Returns this Long modulo the specified.\n     * @param {!Long|number|string} divisor Divisor\n     * @returns {!Long} Remainder\n     */\n    LongPrototype.modulo = function modulo(divisor) {\n        if (!isLong(divisor)) divisor = fromValue(divisor);\n        return this.sub(this.div(divisor).mul(divisor));\n    };\n\n    /**\n     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n     * @function\n     * @param {!Long|number|string} divisor Divisor\n     * @returns {!Long} Remainder\n     */\n    LongPrototype.mod = LongPrototype.modulo;\n\n    /**\n     * Returns the bitwise NOT of this Long.\n     * @returns {!Long}\n     */\n    LongPrototype.not = function not() {\n        return fromBits(~this.low, ~this.high, this.unsigned);\n    };\n\n    /**\n     * Returns the bitwise AND of this Long and the specified.\n     * @param {!Long|number|string} other Other Long\n     * @returns {!Long}\n     */\n    LongPrototype.and = function and(other) {\n        if (!isLong(other)) other = fromValue(other);\n        return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n    };\n\n    /**\n     * Returns the bitwise OR of this Long and the specified.\n     * @param {!Long|number|string} other Other Long\n     * @returns {!Long}\n     */\n    LongPrototype.or = function or(other) {\n        if (!isLong(other)) other = fromValue(other);\n        return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n    };\n\n    /**\n     * Returns the bitwise XOR of this Long and the given one.\n     * @param {!Long|number|string} other Other Long\n     * @returns {!Long}\n     */\n    LongPrototype.xor = function xor(other) {\n        if (!isLong(other)) other = fromValue(other);\n        return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n    };\n\n    /**\n     * Returns this Long with bits shifted to the left by the given amount.\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shiftLeft = function shiftLeft(numBits) {\n        if (isLong(numBits)) numBits = numBits.toInt();\n        if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n    };\n\n    /**\n     * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shl = LongPrototype.shiftLeft;\n\n    /**\n     * Returns this Long with bits arithmetically shifted to the right by the given amount.\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shiftRight = function shiftRight(numBits) {\n        if (isLong(numBits)) numBits = numBits.toInt();\n        if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n    };\n\n    /**\n     * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shr = LongPrototype.shiftRight;\n\n    /**\n     * Returns this Long with bits logically shifted to the right by the given amount.\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n        if (isLong(numBits)) numBits = numBits.toInt();\n        numBits &= 63;\n        if (numBits === 0) return this;else {\n            var high = this.high;\n            if (numBits < 32) {\n                var low = this.low;\n                return fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);\n            } else if (numBits === 32) return fromBits(high, 0, this.unsigned);else return fromBits(high >>> numBits - 32, 0, this.unsigned);\n        }\n    };\n\n    /**\n     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n\n    /**\n     * Converts this Long to signed.\n     * @returns {!Long} Signed long\n     */\n    LongPrototype.toSigned = function toSigned() {\n        if (!this.unsigned) return this;\n        return fromBits(this.low, this.high, false);\n    };\n\n    /**\n     * Converts this Long to unsigned.\n     * @returns {!Long} Unsigned long\n     */\n    LongPrototype.toUnsigned = function toUnsigned() {\n        if (this.unsigned) return this;\n        return fromBits(this.low, this.high, true);\n    };\n\n    /**\n     * Converts this Long to its byte representation.\n     * @param {boolean=} le Whether little or big endian, defaults to big endian\n     * @returns {!Array.<number>} Byte representation\n     */\n    LongPrototype.toBytes = function (le) {\n        return le ? this.toBytesLE() : this.toBytesBE();\n    };\n\n    /**\n     * Converts this Long to its little endian byte representation.\n     * @returns {!Array.<number>} Little endian byte representation\n     */\n    LongPrototype.toBytesLE = function () {\n        var hi = this.high,\n            lo = this.low;\n        return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24 & 0xff, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24 & 0xff];\n    };\n\n    /**\n     * Converts this Long to its big endian byte representation.\n     * @returns {!Array.<number>} Big endian byte representation\n     */\n    LongPrototype.toBytesBE = function () {\n        var hi = this.high,\n            lo = this.low;\n        return [hi >>> 24 & 0xff, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24 & 0xff, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n    };\n\n    return Long;\n});\n\nif (typeof Array.prototype.forEach != 'function') {\n    Array.prototype.forEach = function (callback) {\n        for (var i = 0; i < this.length; i++) {\n            callback.apply(this, [this[i], i, this]);\n        }\n    };\n}\n\n/* webim API definitions\n */\nvar msgCache = {};\nvar webim = { // namespace object webim\n\n    /* function init\n     *   sdk登录\n     * params:\n     *   loginInfo      - Object, 登录身份相关参数集合，详见下面\n     *   {\n     *     sdkAppID     - String, 用户标识接入SDK的应用ID，必填\n     *     accountType  - int, 账号类型，必填\n     *     identifier   - String, 用户帐号,必须是字符串类型，必填\n     *     identifierNick   - String, 用户昵称，选填\n     *     userSig      - String, 鉴权Token，必须是字符串类型，必填\n     *   }\n     *   listeners      - Object, 事件回调函数集合, 详见下面\n     *   {\n     *     onConnNotify - function(connInfo), 用于收到连接状态相关通知的回调函数,目前未使用\n     *     jsonpCallback -function(rspData),//IE9(含)以下浏览器用到的jsonp回调函数\n     *     onMsgNotify  - function(newMsgList), 用于收到消息通知的回调函数,\n     *      newMsgList为新消息数组，格式为[Msg对象]\n     *      使用方有两种处理回调: 1)处理newMsgList中的增量消息,2)直接访问webim.MsgStore获取最新的消息\n     *     onGroupInfoChangeNotify  - function(groupInfo), 用于监听群组资料变更的回调函数,\n     *          groupInfo为新的群组资料信息\n     *     onGroupSystemNotifys - Object, 用于监听（多终端同步）群系统消息的回调函数对象\n     *\n     *   }\n     *   options        - Object, 其它选项, 目前未使用\n     * return:\n     *   (无)\n     */\n    login: function login(loginInfo, listeners, options) {},\n\n    /* function syncMsgs\n     *   拉取最新C2C消息\n     *   一般不需要使用方直接调用, SDK底层会自动同步最新消息并通知使用方, 一种有用的调用场景是用户手动触发刷新消息\n     * params:\n     *   cbOk   - function(msgList)类型, 当同步消息成功时的回调函数, msgList为新消息数组，格式为[Msg对象],\n     *            如果此参数为null或undefined则同步消息成功后会像自动同步那样回调cbNotify\n     *   cbErr  - function(err)类型, 当同步消息失败时的回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    syncMsgs: function syncMsgs(cbOk, cbErr) {},\n\n    /* function getC2CHistoryMsgs\n     * 拉取C2C漫游消息\n     * params:\n     *   options    - 请求参数\n     *   cbOk   - function(msgList)类型, 成功时的回调函数, msgList为消息数组，格式为[Msg对象],\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    getC2CHistoryMsgs: function getC2CHistoryMsgs(options, cbOk, cbErr) {},\n\n    /* function syncGroupMsgs\n     * 拉取群漫游消息\n     * params:\n     *   options    - 请求参数\n     *   cbOk   - function(msgList)类型, 成功时的回调函数, msgList为消息数组，格式为[Msg对象],\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    syncGroupMsgs: function syncGroupMsgs(options, cbOk, cbErr) {},\n\n    /* function sendMsg\n     *   发送一条消息\n     * params:\n     *   msg    - webim.Msg类型, 要发送的消息对象\n     *   cbOk   - function()类型, 当发送消息成功时的回调函数\n     *   cbErr  - function(err)类型, 当发送消息失败时的回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    sendMsg: function sendMsg(msg, cbOk, cbErr) {},\n\n    /* function logout\n     *   sdk登出\n     * params:\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    logout: function logout(cbOk, cbErr) {},\n\n    /* function setAutoRead\n     * 设置会话自动已读上报标志\n     * params:\n     *   selSess    - webim.Session类型, 当前会话\n     *   isOn   - boolean, 将selSess的自动已读消息标志改为isOn，同时是否上报当前会话已读消息\n     *   isResetAll - boolean，是否重置所有会话的自动已读标志\n     * return:\n     *   (无)\n     */\n    setAutoRead: function setAutoRead(selSess, isOn, isResetAll) {},\n\n    /* function getProfilePortrait\n     *   拉取资料（搜索用户）\n     * params:\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    getProfilePortrait: function getProfilePortrait(options, cbOk, cbErr) {},\n\n    /* function setProfilePortrait\n     *   设置个人资料\n     * params:\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    setProfilePortrait: function setProfilePortrait(options, cbOk, cbErr) {},\n\n    /* function applyAddFriend\n     *   申请添加好友\n     * params:\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    applyAddFriend: function applyAddFriend(options, cbOk, cbErr) {},\n\n    /* function getPendency\n     *   拉取好友申请\n     * params:\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    getPendency: function getPendency(options, cbOk, cbErr) {},\n\n    /* function deletePendency\n     *   删除好友申请\n     * params:\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    deletePendency: function deletePendency(options, cbOk, cbErr) {},\n\n    /* function responseFriend\n     *   响应好友申请\n     * params:\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    responseFriend: function responseFriend(options, cbOk, cbErr) {},\n\n    /* function getAllFriend\n     *   拉取我的好友\n     * params:\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    getAllFriend: function getAllFriend(options, cbOk, cbErr) {},\n\n    /* function deleteFriend\n     *   删除好友\n     * params:\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    deleteFriend: function deleteFriend(options, cbOk, cbErr) {},\n\n    /* function addBlackList\n     *   增加黑名单\n     * params:\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    addBlackList: function addBlackList(options, cbOk, cbErr) {},\n\n    /* function getBlackList\n     *   删除黑名单\n     * params:\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    getBlackList: function getBlackList(options, cbOk, cbErr) {},\n\n    /* function deleteBlackList\n     *   我的黑名单\n     * params:\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    deleteBlackList: function deleteBlackList(options, cbOk, cbErr) {},\n\n    /* function uploadPic\n     *   上传图片\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    uploadPic: function uploadPic(options, cbOk, cbErr) {},\n\n    /* function createGroup\n     *   创建群\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    createGroup: function createGroup(options, cbOk, cbErr) {},\n\n    /* function applyJoinGroup\n     *   申请加群\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    applyJoinGroup: function applyJoinGroup(options, cbOk, cbErr) {},\n\n    /* function handleApplyJoinGroup\n     *   处理申请加群(同意或拒绝)\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    handleApplyJoinGroup: function handleApplyJoinGroup(options, cbOk, cbErr) {},\n\n    /* function deleteApplyJoinGroupPendency\n     *   删除加群申请\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    deleteApplyJoinGroupPendency: function deleteApplyJoinGroupPendency(options, cbOk, cbErr) {},\n\n    /* function quitGroup\n     *  主动退群\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    quitGroup: function quitGroup(options, cbOk, cbErr) {},\n\n    /* function getGroupPublicInfo\n     *   读取群公开资料-高级接口\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    getGroupPublicInfo: function getGroupPublicInfo(options, cbOk, cbErr) {},\n\n    /* function getGroupInfo\n     *   读取群详细资料-高级接口\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    getGroupInfo: function getGroupInfo(options, cbOk, cbErr) {},\n\n    /* function modifyGroupBaseInfo\n     *   修改群基本资料\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    modifyGroupBaseInfo: function modifyGroupBaseInfo(options, cbOk, cbErr) {},\n\n    /* function destroyGroup\n     *  解散群\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    destroyGroup: function destroyGroup(options, cbOk, cbErr) {},\n\n    /* function getJoinedGroupListHigh\n     *   获取我的群组-高级接口\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    getJoinedGroupListHigh: function getJoinedGroupListHigh(options, cbOk, cbErr) {},\n\n    /* function getGroupMemberInfo\n     *   获取群组成员列表\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    getGroupMemberInfo: function getGroupMemberInfo(options, cbOk, cbErr) {},\n\n    /* function addGroupMember\n     *   邀请好友加群\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    addGroupMember: function addGroupMember(options, cbOk, cbErr) {},\n\n    /* function modifyGroupMember\n     *   修改群成员资料（角色或者群消息提类型示）\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    modifyGroupMember: function modifyGroupMember(options, cbOk, cbErr) {},\n\n    /* function forbidSendMsg\n     *   设置群成员禁言时间\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    forbidSendMsg: function forbidSendMsg(options, cbOk, cbErr) {},\n\n    /* function deleteGroupMember\n     *   删除群成员\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    deleteGroupMember: function deleteGroupMember(options, cbOk, cbErr) {},\n\n    /* function getPendencyGroup\n     *   获取群组未决列表\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    getPendencyGroup: function getPendencyGroup(options, cbOk, cbErr) {},\n\n    /* function getPendencyReport\n     *   好友未决已读上报\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    getPendencyReport: function getPendencyReport(options, cbOk, cbErr) {},\n\n    /* function getPendencyGroupRead\n     *   群组未决已读上报\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    getPendencyGroupRead: function getPendencyGroupRead(options, cbOk, cbErr) {},\n\n    /* function sendCustomGroupNotify\n     *   发送自定义群通知\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    sendCustomGroupNotify: function sendCustomGroupNotify(options, cbOk, cbErr) {},\n\n    /* class webim.Msg\n     *   一条消息的描述类, 消息发送、接收的API中都会涉及此类型的对象\n     * properties:\n     *   sess   - Session object-ref, 消息所属的会话(e.g:我与好友A的C2C会话，我与群组G的GROUP会话)\n     *   isSend - Boolean, true表示是我发出消息, false表示是发给我的消息)\n     *   seq    - Integer, 消息序列号, 用于判断消息是否同一条\n     *   random - Integer, 消息随机数,用于判断消息是否同一条\n     *   time   - Integer, 消息时间戳, 为unix timestamp\n     *   fromAccount -String,  消息发送者帐号\n     *   subType -Integer,  消息子类型，c2c消息时，0-表示普通消息；群消息时，0-普通消息，1-点赞消息，2-提示消息\n     *   fromAccountNick -String,  消息发送者昵称\n     *   elems  - Array of webim.Msg.Elem, 描述消息内容的元素列表\n     * constructor:\n     *   Msg(sess, isSend, seq,random time,fromAccount) - 构造函数, 参数定义同上面properties中定义\n     * methods:\n     *   addText(text)  - 向elems中添加一个TEXT元素\n     *   addFace(face)  - 向elems中添加一个FACE元素\n     *   toHtml()       - 转成可展示的html String\n     *addFace\n     * sub-class webim.Msg.Elem\n     *   消息中一个组成元素的描述类, 一条消息的内容被抽象描述为N个元素的有序列表\n     * properties:\n     *   type   - 元素类型, 目前有TEXT(文本)、FACE(表情)、IMAGE(图片)等\n     *   content- 元素内容体, 当TEXT时为String, 当PIC时为UrlString\n     * constructor:\n     *   Elem(type, content) - 构造函数, 参数定义同上面properties中定义\n     *\n     * sub-class webim.Msg.Elem.TextElem\n     *   文本\n     * properties:\n     *   text  - String 内容\n     * constructor:\n     *   TextElem(text) - 构造函数, 参数定义同上面properties中定义\n     *\n     * sub-class webim.Msg.Elem.FaceElem\n     *   表情\n     * properties:\n     *   index  - Integer 表情索引, 用户自定义\n     *   data   - String 额外数据，用户自定义\n     * constructor:\n     *   FaceElem(index,data) - 构造函数, 参数定义同上面properties中定义\n     *\n     *\n     */\n    Msg: function Msg(sess, isSend, seq, random, time, fromAccount, subType, fromAccountNick, fromAccountHeadurl) {/*Class constructor*/},\n\n    /* singleton object MsgStore\n     * webim.MsgStore是消息数据的Model对象(参考MVC概念), 它提供接口访问当前存储的会话和消息数据\n     * 下面说明下会话数据类型: Session\n     *\n     * class Session\n     *   一个Session对象描述一个会话，会话可简单理解为最近会话列表的一个条目，它由两个字段唯一标识:\n     *     type - String, 会话类型(如\"C2C\", \"GROUP\", ...)\n     *     id   - String, 会话ID(如C2C类型中为对方帐号,\"C2C\"时为好友ID,\"GROUP\"时为群ID)\n     * properties:\n     *   (Session对象未对外暴露任何属性字段, 所有访问通过下面的getter方法进行)\n     * methods:\n     *   type()     - String, 返回会话类型,\"C2C\"表示与好友私聊，\"GROUP\"表示群聊\n     *   id()       - String, 返回会话ID\n     *   name()     - String, 返回会话标题(如C2C类型中为对方的昵称,暂不支持)\n     *   icon()     - String, 返回会话图标(对C2C类型中为对方的头像URL，暂不支持)\n     *   unread()           - Integer, 返回会话未读条数\n     *   time()     - Integer, 返回会话最后活跃时间, 为unix timestamp\n     *   curMaxMsgSeq() - Integer, 返回会话最大消息序列号\n     *   msgCount() - Integer, 返回会话中所有消息条数\n     *   msg(index) - webim.Msg, 返回会话中第index条消息\n     */\n    MsgStore: {\n        /* function sessMap\n         *   获取所有会话\n         * return:\n         *   所有会话对象\n         */\n        sessMap: function sessMap() {\n            return {/*Object*/};\n        },\n        /* function sessCount\n         *   获取当前会话的个数\n         * return:\n         *   Integer, 会话个数\n         */\n        sessCount: function sessCount() {\n            return 0;\n        },\n\n        /* function sessByTypeId\n         *   根据会话类型和会话ID取得相应会话\n         * params:\n         *   type   - String, 会话类型(如\"C2C\", \"GROUP\", ...)\n         *   id     - String, 会话ID(如对方ID)\n         * return:\n         *   Session, 会话对象(说明见上面)\n         */\n        sessByTypeId: function sessByTypeId(type, id) {\n            return {/*Session Object*/};\n        },\n        /* function delSessByTypeId\n         *   根据会话类型和会话ID删除相应会话\n         * params:\n         *   type   - String, 会话类型(如\"C2C\", \"GROUP\", ...)\n         *   id     - String, 会话ID(如对方ID)\n         * return:\n         *   Boolean, 布尔类型\n         */\n        delSessByTypeId: function delSessByTypeId(type, id) {\n            return true;\n        },\n\n        /* function resetCookieAndSyncFlag\n         *   重置上一次读取新c2c消息Cookie和是否继续拉取标记\n         * return:\n         *\n         */\n        resetCookieAndSyncFlag: function resetCookieAndSyncFlag() {},\n\n        downloadMap: {}\n    }\n\n};\n\n/* webim API implementation\n */\n(function (webim) {\n    //sdk版本\n    var SDK = {\n        'VERSION': '1.7.2', //sdk版本号\n        'APPID': '537048168', //web im sdk 版本 APPID\n        'PLAATFORM': \"10\" //发送请求时判断其是来自web端的请求\n    };\n\n    //是否启用正式环境，默认启用\n    var isAccessFormaEnvironment = true;\n    // var isAccessFormaEnvironment = false;\n\n    //后台接口主机\n    var SRV_HOST = {\n        'FORMAL': {\n            'COMMON': 'https://webim.tim.qq.com',\n            'PIC': 'https://pic.tim.qq.com'\n        },\n        'TEST': {\n            'COMMON': 'https://test.tim.qq.com',\n            'PIC': 'https://pic.tim.qq.com'\n        }\n    };\n\n    //浏览器版本信息\n    var BROWSER_INFO = {};\n    //是否为ie9（含）以下\n    var lowerBR = false;\n\n    //服务名称\n    var SRV_NAME = {\n        'OPEN_IM': 'openim', //私聊（拉取未读c2c消息，长轮询，c2c消息已读上报等）服务名\n        'GROUP': 'group_open_http_svc', //群组管理（拉取群消息，创建群，群成员管理，群消息已读上报等）服务名\n        'FRIEND': 'sns', //关系链管理（好友管理，黑名单管理等）服务名\n        'PROFILE': 'profile', //资料管理（查询，设置个人资料等）服务名\n        'RECENT_CONTACT': 'recentcontact', //最近联系人服务名\n        'PIC': 'openpic', //图片（或文件）服务名\n        'BIG_GROUP': 'group_open_http_noauth_svc', //直播大群 群组管理（申请加大群）服务名\n        'BIG_GROUP_LONG_POLLING': 'group_open_long_polling_http_noauth_svc', //直播大群 长轮询（拉取消息等）服务名\n        'IM_OPEN_STAT': 'imopenstat', //质量上报，统计接口错误率\n        'DEL_CHAT': 'recentcontact', //删除会话\n        'WEB_IM': 'webim'\n    };\n\n    //不同服务对应的版本号\n    var SRV_NAME_VER = {\n        'openim': 'v4',\n        'group_open_http_svc': 'v4',\n        'sns': 'v4',\n        'profile': 'v4',\n        'recentcontact': 'v4',\n        'openpic': 'v4',\n        'group_open_http_noauth_svc': 'v1',\n        'group_open_long_polling_http_noauth_svc': 'v1',\n        'imopenstat': 'v4',\n        'webim': 'v3'\n    };\n\n    //不同的命令名对应的上报类型ID，用于接口质量上报\n    var CMD_EVENT_ID_MAP = {\n        'login': 1, //登录\n        'pic_up': 3, //上传图片\n        'apply_join_group': 9, //申请加入群组\n        'create_group': 10, //创建群组\n        'longpolling': 18, //普通长轮询\n        'send_group_msg': 19, //群聊\n        'sendmsg': 20 //私聊\n    };\n\n    //聊天类型\n    var SESSION_TYPE = {\n        'C2C': 'C2C', //私聊\n        'GROUP': 'GROUP' //群聊\n    };\n\n    //最近联系人类型\n    var RECENT_CONTACT_TYPE = {\n        'C2C': 1, //好友\n        'GROUP': 2 //群\n    };\n\n    //消息最大长度（字节）\n    var MSG_MAX_LENGTH = {\n        'C2C': 12000, //私聊消息\n        'GROUP': 8898 //群聊\n    };\n\n    //后台接口返回类型\n    var ACTION_STATUS = {\n        'OK': 'OK', //成功\n        'FAIL': 'FAIL' //失败\n    };\n\n    var ERROR_CODE_CUSTOM = 99999; //自定义后台接口返回错误码\n\n    //消息元素类型\n    var MSG_ELEMENT_TYPE = {\n        'TEXT': 'TIMTextElem', //文本\n        'FACE': 'TIMFaceElem', //表情\n        'IMAGE': 'TIMImageElem', //图片\n        'CUSTOM': 'TIMCustomElem', //自定义\n        'SOUND': 'TIMSoundElem', //语音,只支持显示\n        'FILE': 'TIMFileElem', //文件,只支持显示\n        'LOCATION': 'TIMLocationElem', //地理位置\n        'GROUP_TIP': 'TIMGroupTipElem' //群提示消息,只支持显示\n    };\n\n    //图片类型\n    var IMAGE_TYPE = {\n        'ORIGIN': 1, //原图\n        'LARGE': 2, //缩略大图\n        'SMALL': 3 //缩略小图\n    };\n    //图片格式\n    var IMAGE_FORMAT = {\n        JPG: 0x1,\n        JPEG: 0x1,\n        GIF: 0x2,\n        PNG: 0x3,\n        BMP: 0x4,\n        UNKNOWN: 0xff\n    };\n\n    //上传资源包类型\n    var UPLOAD_RES_PKG_FLAG = {\n        'RAW_DATA': 0, //原始数据\n        'BASE64_DATA': 1 //base64编码数据\n    };\n\n    //下载文件配置\n    var DOWNLOAD_FILE = {\n        'BUSSINESS_ID': '10001', //下载文件业务ID\n        'AUTH_KEY': '617574686b6579', //下载文件authkey\n        'SERVER_IP': '182.140.186.147', //下载文件服务器IP\n        'SOUND_SERVER_DOMAIN': 'grouptalk.c2c.qq.com'\n    };\n\n    //下载文件类型\n    var DOWNLOAD_FILE_TYPE = {\n        \"SOUND\": 2106, //语音\n        \"FILE\": 2107 //普通文件\n    };\n\n    //上传资源类型\n    var UPLOAD_RES_TYPE = {\n        \"IMAGE\": 1, //图片\n        \"FILE\": 2, //文件\n        \"SHORT_VIDEO\": 3, //短视频\n        \"SOUND\": 4 //语音，PTT\n    };\n\n    //版本号，用于上传图片或文件接口\n    var VERSION_INFO = {\n        'APP_VERSION': '2.1', //应用版本号\n        'SERVER_VERSION': 1 //服务端版本号\n    };\n\n    //长轮询消息类型\n    var LONG_POLLINNG_EVENT_TYPE = {\n        \"C2C\": 1 //新的c2c消息通知\n\n        , \"GROUP_COMMON\": 3 //新的群普通消息\n\n        , \"GROUP_TIP\": 4 //新的群提示消息\n\n        , \"GROUP_SYSTEM\": 5 //新的群系统消息\n\n        , \"GROUP_TIP2\": 6 //新的群提示消息2\n\n        , \"FRIEND_NOTICE\": 7 //好友系统通知\n\n        , \"PROFILE_NOTICE\": 8 //资料系统通知\n\n        , \"C2C_COMMON\": 9 //新的C2C消息\n\n        , \"C2C_EVENT\": 10\n    };\n\n    //c2c消息子类型\n    var C2C_MSG_SUB_TYPE = {\n        \"COMMON\": 0 //普通消息\n    };\n    //c2c消息子类型\n    var C2C_EVENT_SUB_TYPE = {\n        \"READED\": 92, //已读消息同步\n        \"KICKEDOUT\": 96\n    };\n\n    //群消息子类型\n    var GROUP_MSG_SUB_TYPE = {\n        \"COMMON\": 0, //普通消息\n        \"LOVEMSG\": 1, //点赞消息\n        \"TIP\": 2, //提示消息\n        \"REDPACKET\": 3 //红包消息\n    };\n\n    //群消息优先级类型\n    var GROUP_MSG_PRIORITY_TYPE = {\n        \"REDPACKET\": 1, //红包消息\n        \"COMMON\": 2, //普通消息\n        \"LOVEMSG\": 3 //点赞消息\n    };\n\n    //群提示消息类型\n    var GROUP_TIP_TYPE = {\n        \"JOIN\": 1, //加入群组\n        \"QUIT\": 2, //退出群组\n        \"KICK\": 3, //被踢出群组\n        \"SET_ADMIN\": 4, //被设置为管理员\n        \"CANCEL_ADMIN\": 5, //被取消管理员\n        \"MODIFY_GROUP_INFO\": 6, //修改群资料\n        \"MODIFY_MEMBER_INFO\": 7 //修改群成员信息\n    };\n\n    //群提示消息-群资料变更类型\n    var GROUP_TIP_MODIFY_GROUP_INFO_TYPE = {\n        \"FACE_URL\": 1, //修改群头像URL\n        \"NAME\": 2, //修改群名称\n        \"OWNER\": 3, //修改群主\n        \"NOTIFICATION\": 4, //修改群公告\n        \"INTRODUCTION\": 5 //修改群简介\n    };\n\n    //群系统消息类型\n    var GROUP_SYSTEM_TYPE = {\n        \"JOIN_GROUP_REQUEST\": 1, //申请加群请求（只有管理员会收到）\n        \"JOIN_GROUP_ACCEPT\": 2, //申请加群被同意（只有申请人能够收到）\n        \"JOIN_GROUP_REFUSE\": 3, //申请加群被拒绝（只有申请人能够收到）\n        \"KICK\": 4, //被管理员踢出群(只有被踢者接收到)\n        \"DESTORY\": 5, //群被解散(全员接收)\n        \"CREATE\": 6, //创建群(创建者接收, 不展示)\n        \"INVITED_JOIN_GROUP_REQUEST\": 7, //邀请加群(被邀请者接收)\n        \"QUIT\": 8, //主动退群(主动退出者接收, 不展示)\n        \"SET_ADMIN\": 9, //设置管理员(被设置者接收)\n        \"CANCEL_ADMIN\": 10, //取消管理员(被取消者接收)\n        \"REVOKE\": 11, //群已被回收(全员接收, 不展示)\n        \"READED\": 15, //群消息已读同步\n        \"CUSTOM\": 255, //用户自定义通知(默认全员接收)\n        \"INVITED_JOIN_GROUP_REQUEST_AGREE\": 12 //邀请加群(被邀请者需同意)\n    };\n\n    //好友系统通知子类型\n    var FRIEND_NOTICE_TYPE = {\n        \"FRIEND_ADD\": 1, //好友表增加\n        \"FRIEND_DELETE\": 2, //好友表删除\n        \"PENDENCY_ADD\": 3, //未决增加\n        \"PENDENCY_DELETE\": 4, //未决删除\n        \"BLACK_LIST_ADD\": 5, //黑名单增加\n        \"BLACK_LIST_DELETE\": 6, //黑名单删除\n        \"PENDENCY_REPORT\": 7, //未决已读上报\n        \"FRIEND_UPDATE\": 8 //好友数据更新\n    };\n\n    //资料系统通知子类型\n    var PROFILE_NOTICE_TYPE = {\n        \"PROFILE_MODIFY\": 1 //资料修改\n    };\n\n    //腾讯登录服务错误码（用于托管模式）\n    var TLS_ERROR_CODE = {\n        'OK': 0, //成功\n        'SIGNATURE_EXPIRATION': 11 //用户身份凭证过期\n    };\n\n    //长轮询连接状态\n    var CONNECTION_STATUS = {\n        'INIT': -1, //初始化\n        'ON': 0, //连接正常\n        'RECONNECT': 1, //连接恢复正常\n        'OFF': 9999 //连接已断开,可能是用户网络问题，或者长轮询接口报错引起的\n    };\n\n    var UPLOAD_PIC_BUSSINESS_TYPE = { //图片业务类型\n        'GROUP_MSG': 1, //私聊图片\n        'C2C_MSG': 2, //群聊图片\n        'USER_HEAD': 3, //用户头像\n        'GROUP_HEAD': 4 //群头像\n    };\n\n    var FRIEND_WRITE_MSG_ACTION = { //好友输入消息状态\n        'ING': 14, //正在输入\n        'STOP': 15 //停止输入\n    };\n\n    //ajax默认超时时间，单位：毫秒\n    var ajaxDefaultTimeOut = 15000;\n\n    //大群长轮询接口返回正常时，延时一定时间再发起下一次请求\n    var OK_DELAY_TIME = 1000;\n\n    //大群长轮询接口发生错误时，延时一定时间再发起下一次请求\n    var ERROR_DELAY_TIME = 5000;\n\n    //群提示消息最多显示人数\n    var GROUP_TIP_MAX_USER_COUNT = 10;\n\n    //长轮询连接状态\n    var curLongPollingStatus = CONNECTION_STATUS.INIT;\n\n    //当长轮询连接断开后，是否已经回调过\n    var longPollingOffCallbackFlag = false;\n\n    //当前长轮询返回错误次数\n    var curLongPollingRetErrorCount = 0;\n\n    //长轮询默认超时时间，单位：毫秒\n    var longPollingDefaultTimeOut = 60000;\n\n    //长轮询返回错误次数达到一定值后，发起新的长轮询请求间隔时间，单位：毫秒\n    var longPollingIntervalTime = 5000;\n\n    //没有新消息时，长轮询返回60008错误码是正常的\n    var longPollingTimeOutErrorCode = 60008;\n\n    //多实例登录被kick的错误码\n    var longPollingKickedErrorCode = 91101;\n\n    var longPollingPackageTooLargeErrorCode = 10018;\n\n    var LongPollingId = null;\n\n    //当前大群长轮询返回错误次数\n    var curBigGroupLongPollingRetErrorCount = 0;\n\n    //最大允许长轮询返回错误次数\n    var LONG_POLLING_MAX_RET_ERROR_COUNT = 10;\n\n    //上传重试累计\n    var Upload_Retry_Times = 0;\n    //最大上传重试\n    var Upload_Retry_Max_Times = 20;\n\n    //ie7/8/9采用jsonp方法解决ajax跨域限制\n    var jsonpRequestId = 0; //jsonp请求id\n    //最新jsonp请求返回的json数据\n    var jsonpLastRspData = null;\n    //兼容ie7/8/9,jsonp回调函数\n    var jsonpCallback = null;\n\n    var uploadResultIframeId = 0; //用于上传图片的iframe id\n\n    var ipList = []; //文件下载地址\n    var authkey = null; //文件下载票据\n    var expireTime = null; //文件下载票据超时时间\n\n    //错误码\n    var ERROR = {};\n    //当前登录用户\n    var ctx = {\n        sdkAppID: null,\n        appIDAt3rd: null,\n        accountType: null,\n        identifier: null,\n        tinyid: null,\n        identifierNick: null,\n        userSig: null,\n        a2: null,\n        contentType: 'json',\n        apn: 1\n    };\n    var opt = {};\n    var xmlHttpObjSeq = 0; //ajax请求id\n    var xmlHttpObjMap = {}; //发起的ajax请求\n    var curSeq = 0; //消息seq\n    var tempC2CMsgList = []; //新c2c消息临时缓存\n    var tempC2CHistoryMsgList = []; //漫游c2c消息临时缓存\n\n    var maxApiReportItemCount = 20; //一次最多上报条数\n    var apiReportItems = []; //暂存api接口质量上报数据\n    var onLongPullingNotify = null;\n\n    var Resources = {\n        downloadMap: {}\n    };\n\n    //表情标识字符和索引映射关系对象，用户可以自定义\n    var emotionDataIndexs = {\n        \"[期待]\": 1,\n        \"[谢谢]\": 2,\n        \"[神医]\": 3,\n        \"[愤怒]\": 4,\n        \"[欣喜]\": 5,\n        \"[炸弹]\": 6,\n        \"[恶魔]\": 7,\n        \"[重伤]\": 8,\n        \"[疑问]\": 9,\n        \"[脸黑]\": 10,\n        \"[无脸]\": 11,\n        \"[发烧]\": 12,\n        \"[难受]\": 13,\n        \"[哭泣]\": 14,\n        \"[笑哭]\": 15,\n        \"[晕]\": 16,\n        \"[伤心]\": 17,\n        \"[闭嘴]\": 18,\n        \"[微笑]\": 19,\n        \"[大笑]\": 20,\n        \"[憨笑]\": 21,\n        \"[龇笑]\": 22,\n        \"[酷]\": 23,\n        \"[得意]\": 24,\n        \"[困]\": 25,\n        \"[哈欠]\": 26,\n        \"[眼瞎]\": 27,\n        \"[流汗]\": 28,\n        \"[难过]\": 29,\n        \"[可怜]\": 30,\n        \"[斜眼]\": 31,\n        \"[天使]\": 32,\n        \"[受伤]\": 33\n    };\n\n    //表情对象，用户可以自定义\n    var emotions = {};\n    //工具类\n    var tool = new function () {\n\n        //格式化时间戳\n        //format格式如下：\n        //yyyy-MM-dd hh:mm:ss 年月日时分秒(默认格式)\n        //yyyy-MM-dd 年月日\n        //hh:mm:ss 时分秒\n        this.formatTimeStamp = function (timestamp, format) {\n            if (!timestamp) {\n                return 0;\n            }\n            var formatTime;\n            format = format || 'yyyy-MM-dd hh:mm:ss';\n            var date = new Date(timestamp * 1000);\n            var o = {\n                \"M+\": date.getMonth() + 1, //月份\n                \"d+\": date.getDate(), //日\n                \"h+\": date.getHours(), //小时\n                \"m+\": date.getMinutes(), //分\n                \"s+\": date.getSeconds() //秒\n            };\n            if (/(y+)/.test(format)) {\n                formatTime = format.replace(RegExp.$1, (date.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n            } else {\n                formatTime = format;\n            }\n            for (var k in o) {\n                if (new RegExp(\"(\" + k + \")\").test(formatTime)) formatTime = formatTime.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : (\"00\" + o[k]).substr((\"\" + o[k]).length));\n            }\n            return formatTime;\n        };\n\n        //根据群类型英文名转换成中文名\n        this.groupTypeEn2Ch = function (type_en) {\n            var type_ch = null;\n            switch (type_en) {\n                case 'Public':\n                    type_ch = '公开群';\n                    break;\n                case 'ChatRoom':\n                    type_ch = '聊天室';\n                    break;\n                case 'Private':\n                    type_ch = '私有群'; //即讨论组\n                    break;\n                case 'AVChatRoom':\n                    type_ch = '直播聊天室';\n                    break;\n                default:\n                    type_ch = type_en;\n                    break;\n            }\n            return type_ch;\n        };\n        //根据群类型中文名转换成英文名\n        this.groupTypeCh2En = function (type_ch) {\n            var type_en = null;\n            switch (type_ch) {\n                case '公开群':\n                    type_en = 'Public';\n                    break;\n                case '聊天室':\n                    type_en = 'ChatRoom';\n                    break;\n                case '私有群':\n                    //即讨论组\n                    type_en = 'Private';\n                    break;\n                case '直播聊天室':\n                    type_en = 'AVChatRoom';\n                    break;\n                default:\n                    type_en = type_ch;\n                    break;\n            }\n            return type_en;\n        };\n        //根据群身份英文名转换成群身份中文名\n        this.groupRoleEn2Ch = function (role_en) {\n            var role_ch = null;\n            switch (role_en) {\n                case 'Member':\n                    role_ch = '成员';\n                    break;\n                case 'Admin':\n                    role_ch = '管理员';\n                    break;\n                case 'Owner':\n                    role_ch = '群主';\n                    break;\n                default:\n                    role_ch = role_en;\n                    break;\n            }\n            return role_ch;\n        };\n        //根据群身份中文名转换成群身份英文名\n        this.groupRoleCh2En = function (role_ch) {\n            var role_en = null;\n            switch (role_ch) {\n                case '成员':\n                    role_en = 'Member';\n                    break;\n                case '管理员':\n                    role_en = 'Admin';\n                    break;\n                case '群主':\n                    role_en = 'Owner';\n                    break;\n                default:\n                    role_en = role_ch;\n                    break;\n            }\n            return role_en;\n        };\n        //根据群消息提示类型英文转换中文\n        this.groupMsgFlagEn2Ch = function (msg_flag_en) {\n            var msg_flag_ch = null;\n            switch (msg_flag_en) {\n                case 'AcceptAndNotify':\n                    msg_flag_ch = '接收并提示';\n                    break;\n                case 'AcceptNotNotify':\n                    msg_flag_ch = '接收不提示';\n                    break;\n                case 'Discard':\n                    msg_flag_ch = '屏蔽';\n                    break;\n                default:\n                    msg_flag_ch = msg_flag_en;\n                    break;\n            }\n            return msg_flag_ch;\n        };\n        //根据群消息提示类型中文名转换英文名\n        this.groupMsgFlagCh2En = function (msg_flag_ch) {\n            var msg_flag_en = null;\n            switch (msg_flag_ch) {\n                case '接收并提示':\n                    msg_flag_en = 'AcceptAndNotify';\n                    break;\n                case '接收不提示':\n                    msg_flag_en = 'AcceptNotNotify';\n                    break;\n                case '屏蔽':\n                    msg_flag_en = 'Discard';\n                    break;\n                default:\n                    msg_flag_en = msg_flag_ch;\n                    break;\n            }\n            return msg_flag_en;\n        };\n        //将空格和换行符转换成HTML标签\n        this.formatText2Html = function (text) {\n            var html = text;\n            if (html) {\n                html = this.xssFilter(html); //用户昵称或群名称等字段会出现脚本字符串\n                html = html.replace(/ /g, \"&nbsp;\");\n                html = html.replace(/\\n/g, \"<br/>\");\n            }\n            return html;\n        };\n        //将HTML标签转换成空格和换行符\n        this.formatHtml2Text = function (html) {\n            var text = html;\n            if (text) {\n                text = text.replace(/&nbsp;/g, \" \");\n                text = text.replace(/<br\\/>/g, \"\\n\");\n            }\n            return text;\n        };\n        //获取字符串(UTF-8编码)所占字节数\n        //参考：http://zh.wikipedia.org/zh-cn/UTF-8\n        this.getStrBytes = function (str) {\n            if (str == null || str === undefined) return 0;\n            if (typeof str != \"string\") {\n                return 0;\n            }\n            var total = 0,\n                charCode,\n                i,\n                len;\n            for (i = 0, len = str.length; i < len; i++) {\n                charCode = str.charCodeAt(i);\n                if (charCode <= 0x007f) {\n                    total += 1; //字符代码在000000 – 00007F之间的，用一个字节编码\n                } else if (charCode <= 0x07ff) {\n                    total += 2; //000080 – 0007FF之间的字符用两个字节\n                } else if (charCode <= 0xffff) {\n                    total += 3; //000800 – 00D7FF 和 00E000 – 00FFFF之间的用三个字节，注: Unicode在范围 D800-DFFF 中不存在任何字符\n                } else {\n                    total += 4; //010000 – 10FFFF之间的用4个字节\n                }\n            }\n            return total;\n        };\n\n        //防止XSS攻击\n        this.xssFilter = function (val) {\n            val = val.toString();\n            val = val.replace(/[<]/g, \"&lt;\");\n            val = val.replace(/[>]/g, \"&gt;\");\n            val = val.replace(/\"/g, \"&quot;\");\n            //val = val.replace(/'/g, \"&#039;\");\n            return val;\n        };\n\n        //去掉头尾空白符\n        this.trimStr = function (str) {\n            if (!str) return '';\n            str = str.toString();\n            return str.replace(/(^\\s*)|(\\s*$)/g, \"\");\n        };\n        //判断是否为8位整数\n        this.validNumber = function (str) {\n            str = str.toString();\n            return str.match(/(^\\d{1,8}$)/g);\n        };\n        this.getReturnError = function (errorInfo, errorCode) {\n            if (!errorCode) {\n                errorCode = -100;\n            }\n            var error = {\n                'ActionStatus': ACTION_STATUS.FAIL,\n                'ErrorCode': errorCode,\n                'ErrorInfo': errorInfo + \"[\" + errorCode + \"]\"\n            };\n            return error;\n        };\n        //设置cookie\n        //name 名字\n        //value 值\n        //expires 有效期(单位：秒)\n        //path\n        //domain 作用域\n        this.setCookie = function (name, value, expires, path, domain) {\n            var exp = new Date();\n            exp.setTime(exp.getTime() + expires * 1000);\n            document.cookie = name + \"=\" + escape(value) + \";expires=\" + exp.toGMTString();\n        };\n        //获取cookie\n        this.getCookie = function (name) {\n            var result = document.cookie.match(new RegExp(\"(^| )\" + name + \"=([^;]*)(;|$)\"));\n            if (result != null) {\n                return unescape(result[2]);\n            }\n            return null;\n        };\n        //删除cookie\n        this.delCookie = function (name) {\n            var exp = new Date();\n            exp.setTime(exp.getTime() - 1);\n            var value = this.getCookie(name);\n            if (value != null) document.cookie = name + \"=\" + escape(value) + \";expires=\" + exp.toGMTString();\n        };\n        //根据名字获取url参数值\n        this.getQueryString = function (name) {\n            var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\", \"i\");\n            var r = window.location.search.substr(1).match(reg);\n            if (r != null) return unescape(r[2]);\n            return null;\n        };\n        //判断IE版本号，ver表示版本号\n        this.isIE = function (ver) {\n            var b = document.createElement('b');\n            b.innerHTML = '<!--[if IE ' + ver + ']><i></i><![endif]-->';\n            return b.getElementsByTagName('i').length === 1;\n        };\n        //判断浏览器版本\n        this.getBrowserInfo = function () {\n            var Sys = {};\n            var ua = navigator.userAgent.toLowerCase();\n            log.info('navigator.userAgent=' + ua);\n            var s;\n            (s = ua.match(/msie ([\\d.]+)/)) ? Sys.ie = s[1] : (s = ua.match(/firefox\\/([\\d.]+)/)) ? Sys.firefox = s[1] : (s = ua.match(/chrome\\/([\\d.]+)/)) ? Sys.chrome = s[1] : (s = ua.match(/opera.([\\d.]+)/)) ? Sys.opera = s[1] : (s = ua.match(/version\\/([\\d.]+).*safari/)) ? Sys.safari = s[1] : 0;\n            if (Sys.ie) {\n                //Js判断为IE浏览器\n                //ie10的判断这里有个问题\n                // Mozilla/5.0 (compatible; MSIE 9.0; qdesk 2.5.1277.202; Windows NT 6.1; WOW64; Trident/6.0)\n                // 是IE10 而不是IE9\n                if (ua.match(/trident\\/(\\d)\\./) && ua.match(/trident\\/(\\d)\\./)[1] == 6) {\n                    Sys.ie = 10;\n                }\n                return {\n                    'type': 'ie',\n                    'ver': Sys.ie\n                };\n            }\n            if (Sys.firefox) {\n                //Js判断为火狐(firefox)浏览器\n                return {\n                    'type': 'firefox',\n                    'ver': Sys.firefox\n                };\n            }\n            if (Sys.chrome) {\n                //Js判断为谷歌chrome浏览器\n                return {\n                    'type': 'chrome',\n                    'ver': Sys.chrome\n                };\n            }\n            if (Sys.opera) {\n                //Js判断为opera浏览器\n                return {\n                    'type': 'opera',\n                    'ver': Sys.opera\n                };\n            }\n            if (Sys.safari) {\n                //Js判断为苹果safari浏览器\n                return {\n                    'type': 'safari',\n                    'ver': Sys.safari\n                };\n            }\n            return {\n                'type': 'unknow',\n                'ver': -1\n            };\n        };\n\n        this.replaceObject = function (keyMap, json) {\n            for (var a in json) {\n                if (keyMap[a]) {\n                    json[keyMap[a]] = json[a];\n                    delete json[a];\n                    if (json[keyMap[a]] instanceof Array) {\n                        var len = json[keyMap[a]].length;\n                        for (var i = 0; i < len; i++) {\n                            json[keyMap[a]][i] = this.replaceObject(keyMap, json[keyMap[a]][i]);\n                        }\n                    } else if (_typeof(json[keyMap[a]]) === 'object') {\n                        json[keyMap[a]] = this.replaceObject(keyMap, json[keyMap[a]]);\n                    }\n                }\n            }\n            return json;\n        };\n    }();\n\n    //日志对象\n    var log = new function () {\n\n        var on = true;\n\n        this.setOn = function (onFlag) {\n            on = onFlag;\n        };\n\n        this.getOn = function () {\n            return on;\n        };\n\n        this.error = function (logStr) {\n            try {\n                on && console.error(logStr);\n            } catch (e) {}\n        };\n        this.warn = function (logStr) {\n            try {\n                on && console.warn(logStr);\n            } catch (e) {}\n        };\n        this.info = function (logStr) {\n            try {\n                on && console.info(logStr);\n            } catch (e) {}\n        };\n        this.debug = function (logStr) {\n            try {\n                on && console.debug(logStr);\n            } catch (e) {}\n        };\n    }();\n    //获取unix时间戳\n    var unixtime = function unixtime(d) {\n        if (!d) d = new Date();\n        return Math.round(d.getTime() / 1000);\n    };\n    //时间戳转日期\n    var fromunixtime = function fromunixtime(t) {\n        return new Date(t * 1000);\n    };\n    //获取下一个消息序号\n    var nextSeq = function nextSeq() {\n        if (curSeq) {\n            curSeq = curSeq + 1;\n        } else {\n            curSeq = Math.round(Math.random() * 10000000);\n        }\n        return curSeq;\n    };\n    //产生随机数\n    var createRandom = function createRandom() {\n        return Math.round(Math.random() * 4294967296);\n    };\n\n    //获取ajax请求对象\n    var getXmlHttp = function getXmlHttp() {\n        var xmlhttp = null;\n        if (window.XMLHttpRequest) {\n            xmlhttp = new XMLHttpRequest();\n        } else {\n            try {\n                xmlhttp = new ActiveXObject(\"Msxml2.XMLHTTP\");\n            } catch (e) {\n                try {\n                    xmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } catch (e) {\n                    return null;\n                }\n            }\n        }\n        return xmlhttp;\n    };\n    //发起ajax请求\n    var ajaxRequest = function ajaxRequest(meth, url, req, timeout, content_type, isLongPolling, cbOk, cbErr) {\n\n        var xmlHttpObj = getXmlHttp();\n\n        var error, errInfo;\n        if (!xmlHttpObj) {\n            errInfo = \"创建请求失败\";\n            var error = tool.getReturnError(errInfo, -1);\n            log.error(errInfo);\n            if (cbErr) cbErr(error);\n            return;\n        }\n        //保存ajax请求对象\n        xmlHttpObjSeq++;\n        xmlHttpObjMap[xmlHttpObjSeq] = xmlHttpObj;\n\n        xmlHttpObj.open(meth, url, true);\n        xmlHttpObj.onreadystatechange = function () {\n            if (xmlHttpObj.readyState == 4) {\n                xmlHttpObjMap[xmlHttpObjSeq] = null; //清空\n                if (xmlHttpObj.status == 200) {\n                    if (cbOk) cbOk(xmlHttpObj.responseText);\n                    xmlHttpObj = null;\n                    curLongPollingRetErrorCount = curBigGroupLongPollingRetErrorCount = 0;\n                } else {\n                    xmlHttpObj = null;\n                    //避免刷新的时候，由于abord ajax引起的错误回调\n                    setTimeout(function () {\n                        var errInfo = \"请求服务器失败,请检查你的网络是否正常\";\n                        var error = tool.getReturnError(errInfo, -2);\n                        //if (!isLongPolling && cbErr) cbErr(error);\n                        if (isLongPolling && onLongPullingNotify) {\n                            onLongPullingNotify(error);\n                        }\n                        if (cbErr) cbErr(error);\n                    }, 16);\n                }\n            }\n        };\n        xmlHttpObj.setRequestHeader('Content-Type', content_type);\n        //设置超时时间\n        if (!timeout) {\n            timeout = ajaxDefaultTimeOut; //设置ajax默认超时时间\n        }\n        if (timeout) {\n            xmlHttpObj.timeout = timeout;\n            xmlHttpObj.ontimeout = function (event) {\n                xmlHttpObj = null;\n                //var errInfo = \"请求服务器超时\";\n                //var error = tool.getReturnError(errInfo, -3);\n                //if (cbErr) cbErr(error);\n            };\n        }\n        //\n        if (xmlHttpObj.overrideMimeType) {\n            // xmlHttpObj.overrideMimeType(\"application/json;charset=utf-8\");\n        }\n\n        xmlHttpObj.send(req);\n    };\n    //发起ajax请求（json格式数据）\n    var ajaxRequestJson = function ajaxRequestJson(meth, url, req, timeout, content_type, isLongPolling, cbOk, cbErr) {\n        ajaxRequest(meth, url, JSON.stringify(req), timeout, content_type, isLongPolling, function (resp) {\n            var json = null;\n            if (resp) json = JSON.parse(resp); //将返回的json字符串转换成json对象\n            if (isLongPolling && onLongPullingNotify) {\n                onLongPullingNotify(json);\n            }\n            if (cbOk) cbOk(json);\n        }, cbErr);\n    };\n    //判断用户是否已登录\n    var isLogin = function isLogin() {\n        return ctx.sdkAppID && ctx.identifier;\n    };\n    //检查是否登录\n    var checkLogin = function checkLogin(cbErr, isNeedCallBack) {\n        if (!isLogin()) {\n            if (isNeedCallBack) {\n                var errInfo = \"请登录\";\n                var error = tool.getReturnError(errInfo, -4);\n\n                if (cbErr) cbErr(error);\n            }\n            return false;\n        }\n        return true;\n    };\n\n    //检查是否访问正式环境\n    var isAccessFormalEnv = function isAccessFormalEnv() {\n        return isAccessFormaEnvironment;\n    };\n\n    //根据不同的服务名和命令，获取对应的接口地址\n    var getApiUrl = function getApiUrl(srvName, cmd, cbOk, cbErr) {\n        var srvHost = SRV_HOST;\n        if (isAccessFormalEnv()) {\n            srvHost = SRV_HOST.FORMAL.COMMON;\n        } else {\n            srvHost = SRV_HOST.TEST.COMMON;\n        }\n\n        //if (srvName == SRV_NAME.RECENT_CONTACT) {\n        //    srvHost = SRV_HOST.TEST.COMMON;\n        //}\n\n        if (srvName == SRV_NAME.PIC) {\n            if (isAccessFormalEnv()) {\n                srvHost = SRV_HOST.FORMAL.PIC;\n            } else {\n                srvHost = SRV_HOST.TEST.PIC;\n            }\n        }\n\n        var url = srvHost + '/' + SRV_NAME_VER[srvName] + '/' + srvName + '/' + cmd + '?websdkappid=' + SDK.APPID + \"&v=\" + SDK.VERSION + \"&platform=\" + SDK.PLAATFORM;;\n\n        if (isLogin()) {\n            if (cmd == 'login' || cmd == 'accesslayer') {\n                url += '&identifier=' + encodeURIComponent(ctx.identifier) + '&usersig=' + ctx.userSig;\n            } else {\n                if (ctx.tinyid && ctx.a2) {\n                    url += '&tinyid=' + ctx.tinyid + '&a2=' + ctx.a2;\n                } else {\n                    if (cbErr) {\n                        log.error(\"tinyid或a2为空[\" + srvName + \"][\" + cmd + \"]\");\n                        cbErr(tool.getReturnError(\"tinyid或a2为空[\" + srvName + \"][\" + cmd + \"]\", -5));\n                        return false;\n                    }\n                }\n            }\n            url += '&contenttype=' + ctx.contentType;\n        }\n        url += '&sdkappid=' + ctx.sdkAppID + '&accounttype=' + ctx.accountType + '&apn=' + ctx.apn + '&reqtime=' + unixtime();\n        return url;\n    };\n\n    //获取语音下载url\n    var getSoundDownUrl = function getSoundDownUrl(uuid, senderId) {\n        var soundUrl = null;\n        if (authkey && ipList[0]) {\n            // soundUrl = \"http://\" + ipList[0] + \"/asn.com/stddownload_common_file?authkey=\" + authkey + \"&bid=\" + DOWNLOAD_FILE.BUSSINESS_ID + \"&subbid=\" + ctx.sdkAppID + \"&fileid=\" + uuid + \"&filetype=\" + DOWNLOAD_FILE_TYPE.SOUND + \"&openid=\" + senderId + \"&ver=0\";\n            soundUrl = \"https://\" + DOWNLOAD_FILE.SOUND_SERVER_DOMAIN + \"/asn.com/stddownload_common_file?authkey=\" + authkey + \"&bid=\" + DOWNLOAD_FILE.BUSSINESS_ID + \"&subbid=\" + ctx.sdkAppID + \"&fileid=\" + uuid + \"&filetype=\" + DOWNLOAD_FILE_TYPE.SOUND + \"&openid=\" + senderId + \"&ver=0\";\n        } else {\n            log.error(\"拼接语音下载url不报错：ip或者authkey为空\");\n        }\n        return soundUrl;\n    };\n\n    //获取文件下载地址\n    var getFileDownUrl = function getFileDownUrl(uuid, senderId, fileName) {\n        var fileUrl = null;\n        if (authkey && ipList[0]) {\n            fileUrl = \"http://\" + ipList[0] + \"/asn.com/stddownload_common_file?authkey=\" + authkey + \"&bid=\" + DOWNLOAD_FILE.BUSSINESS_ID + \"&subbid=\" + ctx.sdkAppID + \"&fileid=\" + uuid + \"&filetype=\" + DOWNLOAD_FILE_TYPE.FILE + \"&openid=\" + senderId + \"&ver=0&filename=\" + encodeURIComponent(fileName);\n        } else {\n            log.error(\"拼接文件下载url不报错：ip或者authkey为空\");\n        }\n        Resources.downloadMap[\"uuid_\" + uuid] = fileUrl;\n        return fileUrl;\n    };\n\n    //获取文件下载地址\n    var getFileDownUrlV2 = function getFileDownUrlV2(uuid, senderId, fileName, downFlag, receiverId, busiId, type) {\n        var options = {\n            \"From_Account\": senderId, //\"identifer_0\",       // 类型: String, 发送者tinyid\n            \"To_Account\": receiverId, //\"identifer_1\",         // 类型: String, 接收者tinyid\n            \"os_platform\": 10, // 类型: Number, 终端的类型 1(android) 2(ios) 3(windows) 10(others...)\n            \"Timestamp\": unixtime().toString(), // 类型: Number, 时间戳\n            \"Random\": createRandom().toString(), // 类型: Number, 随机值\n            \"request_info\": [// 类型: Array\n            {\n                \"busi_id\": busiId, // 类型: Number, 群(1) C2C(2) 其他请联系sdk开发者分配\n                \"download_flag\": downFlag, // 类型: Number, 申请下载地址标识  0(申请架平下载地址)  1(申请COS平台下载地址)  2(不需要申请, 直接拿url下载(这里应该不会为2))\n                \"type\": type, // 类型: Number, 0(短视频缩略图), 1(文件), 2(短视频), 3(ptt), 其他待分配\n                \"uuid\": uuid, // 类型: Number, 唯一标识一个文件的uuid\n                \"version\": VERSION_INFO.SERVER_VERSION, // 类型: Number, 架平server版本\n                \"auth_key\": authkey, // 类型: String, 认证签名\n                \"ip\": ipList[0] // 类型: Number, 架平IP\n            }]\n        };\n        //获取下载地址\n        proto_applyDownload(options, function (resp) {\n            if (resp.error_code == 0 && resp.response_info) {\n                Resources.downloadMap[\"uuid_\" + options.uuid] = resp.response_info.url;\n            }\n            if (onAppliedDownloadUrl) {\n                onAppliedDownloadUrl({\n                    uuid: options.uuid,\n                    url: resp.response_info.url,\n                    maps: Resources.downloadMap\n                });\n            }\n        }, function (resp) {\n            log.error(\"获取下载地址失败\", options.uuid);\n        });\n    };\n\n    //重置ajax请求\n    var clearXmlHttpObjMap = function clearXmlHttpObjMap() {\n        //遍历xmlHttpObjMap{}\n        for (var seq in xmlHttpObjMap) {\n            var xmlHttpObj = xmlHttpObjMap[seq];\n            if (xmlHttpObj) {\n                xmlHttpObj.abort(); //中断ajax请求(长轮询)\n                xmlHttpObjMap[xmlHttpObjSeq] = null; //清空\n            }\n        }\n        xmlHttpObjSeq = 0;\n        xmlHttpObjMap = {};\n    };\n\n    //重置sdk全局变量\n    var clearSdk = function clearSdk() {\n\n        clearXmlHttpObjMap();\n\n        //当前登录用户\n        ctx = {\n            sdkAppID: null,\n            appIDAt3rd: null,\n            accountType: null,\n            identifier: null,\n            identifierNick: null,\n            userSig: null,\n            contentType: 'json',\n            apn: 1\n        };\n        opt = {};\n\n        curSeq = 0;\n\n        //ie8,9采用jsonp方法解决ajax跨域限制\n        jsonpRequestId = 0; //jsonp请求id\n        //最新jsonp请求返回的json数据\n        jsonpLastRspData = null;\n\n        apiReportItems = [];\n\n        MsgManager.clear();\n        MsgStore.clear();\n\n        //重置longpollingId\n        LongPollingId = null;\n    };\n\n    //登录\n    var _login = function _login(loginInfo, listeners, options, cbOk, cbErr) {\n\n        clearSdk();\n\n        if (options) opt = options;\n        if (opt.isAccessFormalEnv == false) {\n            log.error(\"请切换为正式环境！！！！\");\n            isAccessFormaEnvironment = opt.isAccessFormalEnv;\n        }\n        if (opt.isLogOn == false) {\n            log.setOn(opt.isLogOn);\n        }\n        /*\n         if(opt.emotions){\n         emotions=opt.emotions;\n         webim.Emotions= emotions;\n         }\n         if(opt.emotionDataIndexs){\n         emotionDataIndexs=opt.emotionDataIndexs;\n         webim.EmotionDataIndexs= emotionDataIndexs;\n         }*/\n\n        if (!loginInfo) {\n            if (cbErr) {\n                cbErr(tool.getReturnError(\"loginInfo is empty\", -6));\n                return;\n            }\n        }\n        if (!loginInfo.sdkAppID) {\n            if (cbErr) {\n                cbErr(tool.getReturnError(\"loginInfo.sdkAppID is empty\", -7));\n                return;\n            }\n        }\n        if (!loginInfo.accountType) {\n            if (cbErr) {\n                cbErr(tool.getReturnError(\"loginInfo.accountType is empty\", -8));\n                return;\n            }\n        }\n\n        if (loginInfo.identifier) {\n            ctx.identifier = loginInfo.identifier.toString();\n        }\n        if (loginInfo.identifier && !loginInfo.userSig) {\n            if (cbErr) {\n                cbErr(tool.getReturnError(\"loginInfo.userSig is empty\", -9));\n                return;\n            }\n        }\n        if (loginInfo.userSig) {\n            ctx.userSig = loginInfo.userSig.toString();\n        }\n        ctx.sdkAppID = loginInfo.sdkAppID;\n        ctx.accountType = loginInfo.accountType;\n\n        if (ctx.identifier && ctx.userSig) {\n            //带登录态\n            proto_accesslayer(function () {\n                //登录\n                proto_login(function (identifierNick, headurl) {\n                    MsgManager.init(listeners, function (mmInitResp) {\n                        if (cbOk) {\n                            mmInitResp.identifierNick = identifierNick;\n                            mmInitResp.headurl = headurl;\n                            cbOk(mmInitResp);\n                        }\n                    }, cbErr);\n                }, cbErr);\n            });\n        } else {\n            //不带登录态，进入直播场景sdk\n            MsgManager.init(listeners, cbOk, cbErr);\n        }\n    };\n\n    //初始化浏览器信息\n    var initBrowserInfo = function initBrowserInfo() {\n        //初始化浏览器类型\n        BROWSER_INFO = tool.getBrowserInfo();\n        log.info('BROWSER_INFO: type=' + BROWSER_INFO.type + ', ver=' + BROWSER_INFO.ver);\n        if (BROWSER_INFO.type == \"ie\") {\n            if (parseInt(BROWSER_INFO.ver) < 10) {\n                lowerBR = true;\n            }\n        }\n    };\n\n    //接口质量上报\n    var reportApiQuality = function reportApiQuality(cmd, errorCode, errorInfo) {\n        if (cmd == 'longpolling' && (errorCode == longPollingTimeOutErrorCode || errorCode == longPollingKickedErrorCode)) {\n            //longpolling 返回60008错误可以视为正常,可以不上报\n            return;\n        }\n        var eventId = CMD_EVENT_ID_MAP[cmd];\n        if (eventId) {\n            var reportTime = unixtime();\n            var uniqKey = null;\n            var msgCmdErrorCode = {\n                'Code': errorCode,\n                'ErrMsg': errorInfo\n            };\n            if (ctx.a2) {\n                uniqKey = ctx.a2.substring(0, 10) + \"_\" + reportTime + \"_\" + createRandom();\n            } else if (ctx.userSig) {\n                uniqKey = ctx.userSig.substring(0, 10) + \"_\" + reportTime + \"_\" + createRandom();\n            }\n\n            if (uniqKey) {\n\n                var rptEvtItem = {\n                    \"UniqKey\": uniqKey,\n                    \"EventId\": eventId,\n                    \"ReportTime\": reportTime,\n                    \"MsgCmdErrorCode\": msgCmdErrorCode\n                };\n\n                if (cmd == 'login') {\n                    var loginApiReportItems = [];\n                    loginApiReportItems.push(rptEvtItem);\n                    var loginReportOpt = {\n                        \"EvtItems\": loginApiReportItems,\n                        \"MainVersion\": SDK.VERSION,\n                        \"Version\": \"0\"\n                    };\n                    proto_reportApiQuality(loginReportOpt, function (resp) {\n                        loginApiReportItems = null; //\n                    }, function (err) {\n                        loginApiReportItems = null; //\n                    });\n                } else {\n                    apiReportItems.push(rptEvtItem);\n                    if (apiReportItems.length >= maxApiReportItemCount) {\n                        //累计一定条数再上报\n                        var reportOpt = {\n                            \"EvtItems\": apiReportItems,\n                            \"MainVersion\": SDK.VERSION,\n                            \"Version\": \"0\"\n                        };\n                        proto_reportApiQuality(reportOpt, function (resp) {\n                            apiReportItems = []; //清空\n                        }, function (err) {\n                            apiReportItems = []; //清空\n                        });\n                    }\n                }\n            }\n        }\n    };\n\n    var proto_accesslayer = function proto_accesslayer(callback) {\n        ConnManager.apiCall(SRV_NAME.WEB_IM, \"accesslayer\", {}, function (data) {\n            if (data.ErrorCode === 0 && data.WebImAccessLayer === 1) {\n                SRV_HOST.FORMAL.COMMON = 'https://events.tim.qq.com';\n            }\n            callback();\n        }, function () {\n            callback();\n        });\n    };\n    // REST API calls\n    //上线\n    var proto_login = function proto_login(cbOk, cbErr) {\n        ConnManager.apiCall(SRV_NAME.OPEN_IM, \"login\", {\n            \"State\": \"Online\"\n        }, function (loginResp) {\n            if (loginResp.TinyId) {\n                ctx.tinyid = loginResp.TinyId;\n            } else {\n                if (cbErr) {\n                    cbErr(tool.getReturnError(\"TinyId is empty\", -10));\n                    return;\n                }\n            }\n            if (loginResp.A2Key) {\n                ctx.a2 = loginResp.A2Key;\n            } else {\n                if (cbErr) {\n                    cbErr(tool.getReturnError(\"A2Key is empty\", -11));\n                    return;\n                }\n            }\n            var tag_list = [\"Tag_Profile_IM_Nick\", \"Tag_Profile_IM_Image\"];\n            var options = {\n                'From_Account': ctx.identifier,\n                'To_Account': [ctx.identifier],\n                'LastStandardSequence': 0,\n                'TagList': tag_list\n            };\n            proto_getProfilePortrait(options, function (resp) {\n                var nick, image;\n                if (resp.UserProfileItem && resp.UserProfileItem.length > 0) {\n                    for (var i in resp.UserProfileItem) {\n                        for (var j in resp.UserProfileItem[i].ProfileItem) {\n                            switch (resp.UserProfileItem[i].ProfileItem[j].Tag) {\n                                case 'Tag_Profile_IM_Nick':\n                                    nick = resp.UserProfileItem[i].ProfileItem[j].Value;\n                                    if (nick) ctx.identifierNick = nick;\n                                    break;\n                                case 'Tag_Profile_IM_Image':\n                                    image = resp.UserProfileItem[i].ProfileItem[j].Value;\n                                    if (image) ctx.headurl = image;\n                                    break;\n                            }\n                        }\n                    }\n                }\n                if (cbOk) cbOk(ctx.identifierNick, ctx.headurl); //回传当前用户昵称\n            }, cbErr);\n        }, cbErr);\n    };\n    //下线\n    var proto_logout = function proto_logout(type, cbOk, cbErr) {\n        if (!checkLogin(cbErr, false)) {\n            //不带登录态\n            clearSdk();\n            if (cbOk) cbOk({\n                'ActionStatus': ACTION_STATUS.OK,\n                'ErrorCode': 0,\n                'ErrorInfo': 'logout success'\n            });\n            return;\n        }\n        if (type == \"all\") {\n            ConnManager.apiCall(SRV_NAME.OPEN_IM, \"logout\", {}, function (resp) {\n                clearSdk();\n                if (cbOk) cbOk(resp);\n            }, cbErr);\n        } else {\n            ConnManager.apiCall(SRV_NAME.OPEN_IM, \"longpollinglogout\", {\n                LongPollingId: LongPollingId\n            }, function (resp) {\n                clearSdk();\n                if (cbOk) cbOk(resp);\n            }, cbErr);\n        }\n    };\n    //发送消息，包括私聊和群聊\n    var proto_sendMsg = function proto_sendMsg(msg, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        var msgInfo = null;\n\n        switch (msg.sess.type()) {\n            case SESSION_TYPE.C2C:\n                msgInfo = {\n                    'From_Account': ctx.identifier,\n                    'To_Account': msg.sess.id().toString(),\n                    'MsgTimeStamp': msg.time,\n                    'MsgSeq': msg.seq,\n                    'MsgRandom': msg.random,\n                    'MsgBody': [],\n                    'OfflinePushInfo': msg.offlinePushInfo\n                };\n                break;\n            case SESSION_TYPE.GROUP:\n                var subType = msg.getSubType();\n                msgInfo = {\n                    'GroupId': msg.sess.id().toString(),\n                    'From_Account': ctx.identifier,\n                    'Random': msg.random,\n                    'MsgBody': []\n                };\n                switch (subType) {\n                    case GROUP_MSG_SUB_TYPE.COMMON:\n                        msgInfo.MsgPriority = \"COMMON\";\n                        break;\n                    case GROUP_MSG_SUB_TYPE.REDPACKET:\n                        msgInfo.MsgPriority = \"REDPACKET\";\n                        break;\n                    case GROUP_MSG_SUB_TYPE.LOVEMSG:\n                        msgInfo.MsgPriority = \"LOVEMSG\";\n                        break;\n                    case GROUP_MSG_SUB_TYPE.TIP:\n                        log.error(\"不能主动发送群提示消息,subType=\" + subType);\n                        break;\n                    default:\n                        log.error(\"发送群消息时，出现未知子消息类型：subType=\" + subType);\n                        return;\n                        break;\n                }\n                break;\n            default:\n                break;\n        }\n\n        for (var i in msg.elems) {\n            var elem = msg.elems[i];\n            var msgContent = null;\n            var msgType = elem.type;\n            switch (msgType) {\n                case MSG_ELEMENT_TYPE.TEXT:\n                    //文本\n                    msgContent = {\n                        'Text': elem.content.text\n                    };\n                    break;\n                case MSG_ELEMENT_TYPE.FACE:\n                    //表情\n                    msgContent = {\n                        'Index': elem.content.index,\n                        'Data': elem.content.data\n                    };\n                    break;\n                case MSG_ELEMENT_TYPE.IMAGE:\n                    //图片\n                    var ImageInfoArray = [];\n                    for (var j in elem.content.ImageInfoArray) {\n                        ImageInfoArray.push({\n                            'Type': elem.content.ImageInfoArray[j].type,\n                            'Size': elem.content.ImageInfoArray[j].size,\n                            'Width': elem.content.ImageInfoArray[j].width,\n                            'Height': elem.content.ImageInfoArray[j].height,\n                            'URL': elem.content.ImageInfoArray[j].url\n                        });\n                    }\n                    msgContent = {\n                        'ImageFormat': elem.content.ImageFormat,\n                        'UUID': elem.content.UUID,\n                        'ImageInfoArray': ImageInfoArray\n                    };\n                    break;\n                case MSG_ELEMENT_TYPE.SOUND:\n                    //\n                    log.warn('web端暂不支持发送语音消息');\n                    continue;\n                    break;\n                case MSG_ELEMENT_TYPE.LOCATION:\n                    //\n                    log.warn('web端暂不支持发送地理位置消息');\n                    continue;\n                    break;\n                case MSG_ELEMENT_TYPE.FILE:\n                    //\n                    msgContent = {\n                        'UUID': elem.content.uuid,\n                        'FileName': elem.content.name,\n                        'FileSize': elem.content.size,\n                        'DownloadFlag': elem.content.downFlag\n                    };\n                    break;\n                case MSG_ELEMENT_TYPE.CUSTOM:\n                    //\n                    msgContent = {\n                        'Data': elem.content.data,\n                        'Desc': elem.content.desc,\n                        'Ext': elem.content.ext\n                    };\n                    msgType = MSG_ELEMENT_TYPE.CUSTOM;\n                    break;\n                default:\n                    log.warn('web端暂不支持发送' + elem.type + '消息');\n                    continue;\n                    break;\n            }\n\n            if (msg.PushInfoBoolean) {\n                msgInfo.OfflinePushInfo = msg.PushInfo; //当android终端进程被杀掉时才走push，IOS退到后台即可\n            }\n\n            msgInfo.MsgBody.push({\n                'MsgType': msgType,\n                'MsgContent': msgContent\n            });\n        }\n        if (msg.sess.type() == SESSION_TYPE.C2C) {\n            //私聊\n            ConnManager.apiCall(SRV_NAME.OPEN_IM, \"sendmsg\", msgInfo, cbOk, cbErr);\n        } else if (msg.sess.type() == SESSION_TYPE.GROUP) {\n            //群聊\n            ConnManager.apiCall(SRV_NAME.GROUP, \"send_group_msg\", msgInfo, cbOk, cbErr);\n        }\n    };\n    //长轮询接口\n    var proto_longPolling = function proto_longPolling(options, cbOk, cbErr) {\n        if (!isAccessFormaEnvironment && typeof stopPolling != \"undefined\" && stopPolling == true) {\n            return;\n        }\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.OPEN_IM, \"longpolling\", options, cbOk, cbErr, longPollingDefaultTimeOut, true);\n    };\n\n    //长轮询接口(拉取直播聊天室新消息)\n    var proto_bigGroupLongPolling = function proto_bigGroupLongPolling(options, cbOk, cbErr, timeout) {\n        ConnManager.apiCall(SRV_NAME.BIG_GROUP_LONG_POLLING, \"get_msg\", options, cbOk, cbErr, timeout);\n    };\n\n    //拉取未读c2c消息接口\n    var proto_getMsgs = function proto_getMsgs(cookie, syncFlag, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.OPEN_IM, \"getmsg\", {\n            'Cookie': cookie,\n            'SyncFlag': syncFlag\n        }, function (resp) {\n\n            if (resp.MsgList && resp.MsgList.length) {\n                for (var i in resp.MsgList) {\n                    tempC2CMsgList.push(resp.MsgList[i]);\n                }\n            }\n            if (resp.SyncFlag == 1) {\n                proto_getMsgs(resp.Cookie, resp.SyncFlag, cbOk, cbErr);\n            } else {\n                resp.MsgList = tempC2CMsgList;\n                tempC2CMsgList = [];\n                if (cbOk) cbOk(resp);\n            }\n        }, cbErr);\n    };\n    //C2C消息已读上报接口\n    var proto_c2CMsgReaded = function proto_c2CMsgReaded(cookie, c2CMsgReadedItem, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        var tmpC2CMsgReadedItem = [];\n        for (var i in c2CMsgReadedItem) {\n            var item = {\n                'To_Account': c2CMsgReadedItem[i].toAccount,\n                'LastedMsgTime': c2CMsgReadedItem[i].lastedMsgTime\n            };\n            tmpC2CMsgReadedItem.push(item);\n        }\n        ConnManager.apiCall(SRV_NAME.OPEN_IM, \"msgreaded\", {\n            C2CMsgReaded: {\n                'Cookie': cookie,\n                'C2CMsgReadedItem': tmpC2CMsgReadedItem\n            }\n        }, cbOk, cbErr);\n    };\n\n    //删除c2c消息\n    var proto_deleteC2CMsg = function proto_deleteC2CMsg(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.OPEN_IM, \"deletemsg\", options, cbOk, cbErr);\n    };\n\n    //拉取c2c历史消息接口\n    var proto_getC2CHistoryMsgs = function proto_getC2CHistoryMsgs(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.OPEN_IM, \"getroammsg\", options, function (resp) {\n            var reqMsgCount = options.MaxCnt;\n            var complete = resp.Complete;\n            var rspMsgCount = resp.MaxCnt;\n            var msgKey = resp.MsgKey;\n            var lastMsgTime = resp.LastMsgTime;\n\n            if (resp.MsgList && resp.MsgList.length) {\n                for (var i in resp.MsgList) {\n                    tempC2CHistoryMsgList.push(resp.MsgList[i]);\n                }\n            }\n            var netxOptions = null;\n            if (complete == 0) {\n                //还有历史消息可拉取\n                if (rspMsgCount < reqMsgCount) {\n                    netxOptions = {\n                        'Peer_Account': options.Peer_Account,\n                        'MaxCnt': reqMsgCount - rspMsgCount,\n                        'LastMsgTime': lastMsgTime,\n                        'MsgKey': msgKey\n                    };\n                }\n            }\n\n            if (netxOptions) {\n                //继续拉取\n                proto_getC2CHistoryMsgs(netxOptions, cbOk, cbErr);\n            } else {\n                resp.MsgList = tempC2CHistoryMsgList;\n                tempC2CHistoryMsgList = [];\n                if (cbOk) cbOk(resp);\n            }\n        }, cbErr);\n    };\n\n    //群组接口\n    //创建群组\n    //协议参考：https://www.qcloud.com/doc/product/269/1615\n    var proto_createGroup = function proto_createGroup(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        var opt = {\n            //必填    群组形态，包括Public（公开群），Private（私有群），ChatRoom（聊天室），AVChatRoom（互动直播聊天室）。\n            'Type': options.Type,\n            //必填    群名称，最长30字节。\n            'Name': options.Name\n        };\n        var member_list = [];\n\n        //Array 选填  初始群成员列表，最多500个。成员信息字段详情参见：群成员资料。\n        for (var i = 0; i < options.MemberList.length; i++) {\n            member_list.push({\n                'Member_Account': options.MemberList[i]\n            });\n        }\n        opt.MemberList = member_list;\n        //选填    为了使得群组ID更加简单，便于记忆传播，腾讯云支持APP在通过REST API创建群组时自定义群组ID。详情参见：自定义群组ID。\n        if (options.GroupId) {\n            opt.GroupId = options.GroupId;\n        }\n        //选填    群主id，自动添加到群成员中。如果不填，群没有群主。\n        if (options.Owner_Account) {\n            opt.Owner_Account = options.Owner_Account;\n        }\n        //选填    群简介，最长240字节。\n        if (options.Introduction) {\n            opt.Introduction = options.Introduction;\n        }\n        //选填    群公告，最长300字节。\n        if (options.Notification) {\n            opt.Notification = options.Notification;\n        }\n        //选填    最大群成员数量，最大为10000，不填默认为2000个。\n        if (options.MaxMemberCount) {\n            opt.MaxMemberCount = options.MaxMemberCount;\n        }\n        //选填    申请加群处理方式。包含FreeAccess（自由加入），NeedPermission（需要验证），DisableApply（禁止加群），不填默认为NeedPermission（需要验证）。\n        if (options.ApplyJoinOption) {\n            //\n            opt.ApplyJoinOption = options.ApplyJoinOption;\n        }\n        //Array 选填  群组维度的自定义字段，默认情况是没有的，需要开通，详情参见：自定义字段。\n        if (options.AppDefinedData) {\n            opt.AppDefinedData = options.AppDefinedData;\n        }\n        //选填    群头像URL，最长100字节。\n        if (options.FaceUrl) {\n            opt.FaceUrl = options.FaceUrl;\n        }\n        ConnManager.apiCall(SRV_NAME.GROUP, \"create_group\", opt, cbOk, cbErr);\n    };\n\n    //创建群组-高级接口\n    //协议参考：https://www.qcloud.com/doc/product/269/1615\n    var proto_createGroupHigh = function proto_createGroupHigh(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.GROUP, \"create_group\", options, cbOk, cbErr);\n    };\n\n    //修改群组基本资料\n    //协议参考：https://www.qcloud.com/doc/product/269/1620\n    var proto_modifyGroupBaseInfo = function proto_modifyGroupBaseInfo(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.GROUP, \"modify_group_base_info\", options, cbOk, cbErr);\n    };\n\n    //申请加群\n    var proto_applyJoinGroup = function proto_applyJoinGroup(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        options.GroupId = String(options.GroupId);\n        ConnManager.apiCall(SRV_NAME.GROUP, \"apply_join_group\", {\n            'GroupId': options.GroupId,\n            'ApplyMsg': options.ApplyMsg,\n            'UserDefinedField': options.UserDefinedField\n        }, cbOk, cbErr);\n    };\n\n    //申请加入大群\n    // var BigGroupId;\n    var proto_applyJoinBigGroup = function proto_applyJoinBigGroup(options, cbOk, cbErr) {\n        options.GroupId = String(options.GroupId);\n        //BigGroupId = options.GroupId;\n        var srvName;\n        if (!checkLogin(cbErr, false)) {\n            //未登录\n            srvName = SRV_NAME.BIG_GROUP;\n        } else {\n            //已登录\n            srvName = SRV_NAME.GROUP;\n        }\n        if (MsgManager.checkBigGroupLongPollingOn(options.GroupId)) {\n            cbErr && cbErr(tool.getReturnError(\"Join Group failed; You have already been in this group, you have to quit group before you rejoin\", 10013));\n            return;\n        }\n        ConnManager.apiCall(srvName, \"apply_join_group\", {\n            'GroupId': options.GroupId,\n            'ApplyMsg': options.ApplyMsg,\n            'UserDefinedField': options.UserDefinedField\n        }, function (resp) {\n            if (resp.JoinedStatus && resp.JoinedStatus == 'JoinedSuccess') {\n                if (resp.LongPollingKey) {\n                    MsgManager.setBigGroupLongPollingOn(true); //开启长轮询\n                    MsgManager.setBigGroupLongPollingKey(options.GroupId, resp.LongPollingKey); //更新大群长轮询key\n                    MsgManager.setBigGroupLongPollingMsgMap(options.GroupId, 0); //收到的群消息置0\n                    MsgManager.bigGroupLongPolling(options.GroupId); //开启长轮询\n                } else {\n                    //没有返回LongPollingKey，说明申请加的群不是直播聊天室(AVChatRoom)\n                    cbErr && cbErr(tool.getReturnError(\"Join Group succeed; But the type of group is not AVChatRoom: groupid=\" + options.GroupId, -12));\n                    return;\n                }\n            }\n            if (cbOk) cbOk(resp);\n        }, function (err) {\n\n            if (cbErr) cbErr(err);\n        });\n    };\n\n    //处理加群申请(同意或拒绝)\n    var proto_handleApplyJoinGroupPendency = function proto_handleApplyJoinGroupPendency(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.GROUP, \"handle_apply_join_group\", {\n            'GroupId': options.GroupId,\n            'Applicant_Account': options.Applicant_Account,\n            'HandleMsg': options.HandleMsg,\n            'Authentication': options.Authentication,\n            'MsgKey': options.MsgKey,\n            'ApprovalMsg': options.ApprovalMsg,\n            'UserDefinedField': options.UserDefinedField\n        }, cbOk, function (err) {\n            if (err.ErrorCode == 10024) {\n                //apply has be handled\n                if (cbOk) {\n                    var resp = {\n                        'ActionStatus': ACTION_STATUS.OK,\n                        'ErrorCode': 0,\n                        'ErrorInfo': '该申请已经被处理过'\n                    };\n                    cbOk(resp);\n                }\n            } else {\n                if (cbErr) cbErr(err);\n            }\n        });\n    };\n\n    //获取群组未决列表\n    var proto_getPendencyGroup = function proto_getPendencyGroup(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.GROUP, \"get_pendency\", {\n            'StartTime': options.StartTime,\n            'Limit': options.Limit,\n            'Handle_Account': ctx.identifier\n        }, cbOk, function (err) {});\n    };\n\n    //群组未决已经上报\n    var proto_getPendencyGroupRead = function proto_getPendencyGroupRead(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.GROUP, \"report_pendency\", {\n            'ReportTime': options.ReportTime,\n            'From_Account': ctx.identifier\n        }, cbOk, function (err) {});\n    };\n\n    //处理被邀请进群申请(同意或拒绝)\n    var proto_handleInviteJoinGroupRequest = function proto_handleInviteJoinGroupRequest(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.GROUP, \"handle_invite_join_group\", {\n            'GroupId': options.GroupId,\n            'Inviter_Account': options.Inviter_Account,\n            'HandleMsg': options.HandleMsg,\n            'Authentication': options.Authentication,\n            'MsgKey': options.MsgKey,\n            'ApprovalMsg': options.ApprovalMsg,\n            'UserDefinedField': options.UserDefinedField\n        }, cbOk, function (err) {});\n    };\n\n    //主动退群\n    var proto_quitGroup = function proto_quitGroup(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.GROUP, \"quit_group\", {\n            'GroupId': options.GroupId\n        }, cbOk, cbErr);\n    };\n\n    //退出大群\n    var proto_quitBigGroup = function proto_quitBigGroup(options, cbOk, cbErr) {\n        var srvName;\n        if (!checkLogin(cbErr, false)) {\n            //未登录\n            srvName = SRV_NAME.BIG_GROUP;\n        } else {\n            //已登录\n            srvName = SRV_NAME.GROUP;\n        }\n        MsgManager.resetBigGroupLongPollingInfo(options.GroupId);\n        ConnManager.apiCall(srvName, \"quit_group\", {\n            'GroupId': options.GroupId\n        }, function (resp) {\n\n            MsgStore.delSessByTypeId(SESSION_TYPE.GROUP, options.GroupId);\n            //重置当前再请求中的ajax\n            //clearXmlHttpObjMap();\n            //退出大群成功之后需要重置长轮询信息\n            // MsgManager.resetBigGroupLongPollingInfo();\n            if (cbOk) cbOk(resp);\n        }, cbErr);\n    };\n    //查找群(按名称)\n    var proto_searchGroupByName = function proto_searchGroupByName(options, cbOk, cbErr) {\n        ConnManager.apiCall(SRV_NAME.GROUP, \"search_group\", options, cbOk, cbErr);\n    };\n\n    //获取群组公开资料\n    var proto_getGroupPublicInfo = function proto_getGroupPublicInfo(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.GROUP, \"get_group_public_info\", {\n            'GroupIdList': options.GroupIdList,\n            'ResponseFilter': {\n                'GroupBasePublicInfoFilter': options.GroupBasePublicInfoFilter\n            }\n        }, function (resp) {\n            resp.ErrorInfo = '';\n            if (resp.GroupInfo) {\n                for (var i in resp.GroupInfo) {\n                    var errorCode = resp.GroupInfo[i].ErrorCode;\n                    if (errorCode > 0) {\n                        resp.ActionStatus = ACTION_STATUS.FAIL;\n                        resp.GroupInfo[i].ErrorInfo = \"[\" + errorCode + \"]\" + resp.GroupInfo[i].ErrorInfo;\n                        resp.ErrorInfo += resp.GroupInfo[i].ErrorInfo + '\\n';\n                    }\n                }\n            }\n            if (resp.ActionStatus == ACTION_STATUS.FAIL) {\n                if (cbErr) {\n                    cbErr(resp);\n                }\n            } else if (cbOk) {\n                cbOk(resp);\n            }\n        }, cbErr);\n    };\n\n    //获取群组详细资料--高级\n    //请求协议参考：https://www.qcloud.com/doc/product/269/1616\n    var proto_getGroupInfo = function proto_getGroupInfo(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        var opt = {\n            'GroupIdList': options.GroupIdList,\n            'ResponseFilter': {\n                'GroupBaseInfoFilter': options.GroupBaseInfoFilter,\n                'MemberInfoFilter': options.MemberInfoFilter\n            }\n        };\n        if (options.AppDefinedDataFilter_Group) {\n            opt.ResponseFilter.AppDefinedDataFilter_Group = options.AppDefinedDataFilter_Group;\n        }\n        if (options.AppDefinedDataFilter_GroupMember) {\n            opt.ResponseFilter.AppDefinedDataFilter_GroupMember = options.AppDefinedDataFilter_GroupMember;\n        }\n        ConnManager.apiCall(SRV_NAME.GROUP, \"get_group_info\", opt, cbOk, cbErr);\n    };\n\n    //获取群组成员-高级接口\n    //协议参考：https://www.qcloud.com/doc/product/269/1617\n    var proto_getGroupMemberInfo = function proto_getGroupMemberInfo(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.GROUP, \"get_group_member_info\", {\n            'GroupId': options.GroupId,\n            'Offset': options.Offset,\n            'Limit': options.Limit,\n            'MemberInfoFilter': options.MemberInfoFilter,\n            'MemberRoleFilter': options.MemberRoleFilter,\n            'AppDefinedDataFilter_GroupMember': options.AppDefinedDataFilter_GroupMember\n        }, cbOk, cbErr);\n    };\n\n    //增加群组成员\n    //协议参考：https://www.qcloud.com/doc/product/269/1621\n    var proto_addGroupMember = function proto_addGroupMember(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.GROUP, \"add_group_member\", {\n            'GroupId': options.GroupId,\n            'Silence': options.Silence,\n            'MemberList': options.MemberList\n        }, cbOk, cbErr);\n    };\n    //修改群组成员资料\n    //协议参考：https://www.qcloud.com/doc/product/269/1623\n    var proto_modifyGroupMember = function proto_modifyGroupMember(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        var opt = {};\n        if (options.GroupId) {\n            opt.GroupId = options.GroupId;\n        }\n        if (options.Member_Account) {\n            opt.Member_Account = options.Member_Account;\n        }\n        //Admin或者Member\n        if (options.Role) {\n            opt.Role = options.Role;\n        }\n        // AcceptAndNotify代表解收并提示消息，Discard代表不接收也不提示消息，AcceptNotNotify代表接收消息但不提示\n        if (options.MsgFlag) {\n            opt.MsgFlag = options.MsgFlag;\n        }\n        if (options.ShutUpTime) {\n            //禁言时间\n            opt.ShutUpTime = options.ShutUpTime;\n        }\n        if (options.NameCard) {\n            //群名片,最大不超过50个字节\n            opt.NameCard = options.NameCard;\n        }\n        if (options.AppMemberDefinedData) {\n            //群成员维度的自定义字段，默认情况是没有的，需要开通\n            opt.AppMemberDefinedData = options.AppMemberDefinedData;\n        }\n        ConnManager.apiCall(SRV_NAME.GROUP, \"modify_group_member_info\", opt, cbOk, cbErr);\n    };\n    //删除群组成员\n    //协议参考：https://www.qcloud.com/doc/product/269/1622\n    var proto_deleteGroupMember = function proto_deleteGroupMember(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.GROUP, \"delete_group_member\", {\n            'GroupId': options.GroupId,\n            'Silence': options.Silence,\n            'MemberToDel_Account': options.MemberToDel_Account,\n            'Reason': options.Reason\n        }, cbOk, cbErr);\n    };\n    //解散群组\n    //协议参考：https://www.qcloud.com/doc/product/269/1624\n    var proto_destroyGroup = function proto_destroyGroup(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.GROUP, \"destroy_group\", {\n            'GroupId': options.GroupId\n        }, cbOk, cbErr);\n    };\n    //转让群组\n    //协议参考：https://www.qcloud.com/doc/product/269/1633\n    var proto_changeGroupOwner = function proto_changeGroupOwner(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.GROUP, \"change_group_owner\", options, cbOk, cbErr);\n    };\n    //获取用户所加入的群组-高级接口\n    //协议参考：https://www.qcloud.com/doc/product/269/1625\n    var proto_getJoinedGroupListHigh = function proto_getJoinedGroupListHigh(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.GROUP, \"get_joined_group_list\", {\n            'Member_Account': options.Member_Account,\n            'Limit': options.Limit,\n            'Offset': options.Offset,\n            'GroupType': options.GroupType,\n            'ResponseFilter': {\n                'GroupBaseInfoFilter': options.GroupBaseInfoFilter,\n                'SelfInfoFilter': options.SelfInfoFilter\n            }\n        }, cbOk, cbErr);\n    };\n    //查询一组UserId在群中的身份\n    //协议参考：https://www.qcloud.com/doc/product/269/1626\n    var proto_getRoleInGroup = function proto_getRoleInGroup(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.GROUP, \"get_role_in_group\", {\n            'GroupId': options.GroupId,\n            'User_Account': options.User_Account\n        }, cbOk, cbErr);\n    };\n    //设置取消成员禁言时间\n    //协议参考：https://www.qcloud.com/doc/product/269/1627\n    var proto_forbidSendMsg = function proto_forbidSendMsg(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.GROUP, \"forbid_send_msg\", {\n            'GroupId': options.GroupId,\n            'Members_Account': options.Members_Account,\n            'ShutUpTime': options.ShutUpTime //单位为秒，为0时表示取消禁言\n        }, cbOk, cbErr);\n    };\n\n    //发送自定义群系统通知\n    var proto_sendCustomGroupNotify = function proto_sendCustomGroupNotify(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.GROUP, \"send_group_system_notification\", options, cbOk, cbErr);\n    };\n\n    //拉取群消息接口\n    var proto_getGroupMsgs = function proto_getGroupMsgs(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.GROUP, \"group_msg_get\", {\n            \"GroupId\": options.GroupId,\n            \"ReqMsgSeq\": options.ReqMsgSeq,\n            \"ReqMsgNumber\": options.ReqMsgNumber\n        }, cbOk, cbErr);\n    };\n    //群消息已读上报接口\n    var proto_groupMsgReaded = function proto_groupMsgReaded(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.GROUP, \"msg_read_report\", {\n            'GroupId': options.GroupId,\n            'MsgReadedSeq': options.MsgReadedSeq\n        }, cbOk, cbErr);\n    };\n    //end\n\n    //好友接口\n    //处理好友接口返回的错误码\n    var convertErrorEn2ZhFriend = function convertErrorEn2ZhFriend(resp) {\n        var errorAccount = [];\n        if (resp.Fail_Account && resp.Fail_Account.length) {\n            errorAccount = resp.Fail_Account;\n        }\n        if (resp.Invalid_Account && resp.Invalid_Account.length) {\n            for (var k in resp.Invalid_Account) {\n                errorAccount.push(resp.Invalid_Account[k]);\n            }\n        }\n        if (errorAccount.length) {\n            resp.ActionStatus = ACTION_STATUS.FAIL;\n            resp.ErrorCode = ERROR_CODE_CUSTOM;\n            resp.ErrorInfo = '';\n            for (var i in errorAccount) {\n                var failCount = errorAccount[i];\n                for (var j in resp.ResultItem) {\n                    if (resp.ResultItem[j].To_Account == failCount) {\n\n                        var resultCode = resp.ResultItem[j].ResultCode;\n                        resp.ResultItem[j].ResultInfo = \"[\" + resultCode + \"]\" + resp.ResultItem[j].ResultInfo;\n                        resp.ErrorInfo += resp.ResultItem[j].ResultInfo + \"\\n\";\n                        break;\n                    }\n                }\n            }\n        }\n        return resp;\n    };\n    //添加好友\n    var proto_applyAddFriend = function proto_applyAddFriend(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.FRIEND, \"friend_add\", {\n            'From_Account': ctx.identifier,\n            'AddFriendItem': options.AddFriendItem\n        }, function (resp) {\n            var newResp = convertErrorEn2ZhFriend(resp);\n            if (newResp.ActionStatus == ACTION_STATUS.FAIL) {\n                if (cbErr) cbErr(newResp);\n            } else if (cbOk) {\n                cbOk(newResp);\n            }\n        }, cbErr);\n    };\n    //删除好友\n    var proto_deleteFriend = function proto_deleteFriend(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.FRIEND, \"friend_delete\", {\n            'From_Account': ctx.identifier,\n            'To_Account': options.To_Account,\n            'DeleteType': options.DeleteType\n        }, function (resp) {\n            var newResp = convertErrorEn2ZhFriend(resp);\n            if (newResp.ActionStatus == ACTION_STATUS.FAIL) {\n                if (cbErr) cbErr(newResp);\n            } else if (cbOk) {\n                cbOk(newResp);\n            }\n        }, cbErr);\n    };\n    //删除会话\n    var proto_deleteChat = function proto_deleteChat(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        if (options.chatType == 1) {\n            ConnManager.apiCall(SRV_NAME.DEL_CHAT, \"delete\", {\n                'From_Account': ctx.identifier,\n                'Type': options.chatType,\n                'To_Account': options.To_Account\n            }, cbOk, cbErr);\n        } else {\n            ConnManager.apiCall(SRV_NAME.DEL_CHAT, \"delete\", {\n                'From_Account': ctx.identifier,\n                'Type': options.chatType,\n                'ToGroupid': options.To_Account\n            }, cbOk, cbErr);\n        }\n    };\n    //获取好友申请\n    var proto_getPendency = function proto_getPendency(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.FRIEND, \"pendency_get\", {\n            \"From_Account\": ctx.identifier,\n            \"PendencyType\": options.PendencyType,\n            \"StartTime\": options.StartTime,\n            \"MaxLimited\": options.MaxLimited,\n            \"LastSequence\": options.LastSequence\n        }, cbOk, cbErr);\n    };\n    //好友申请已读上报\n    var proto_getPendencyReport = function proto_getPendencyReport(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.FRIEND, \"PendencyReport\", {\n            \"From_Account\": ctx.identifier,\n            \"LatestPendencyTimeStamp\": options.LatestPendencyTimeStamp\n        }, cbOk, cbErr);\n    };\n    //删除好友申请\n    var proto_deletePendency = function proto_deletePendency(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.FRIEND, \"pendency_delete\", {\n            \"From_Account\": ctx.identifier,\n            \"PendencyType\": options.PendencyType,\n            \"To_Account\": options.To_Account\n\n        }, function (resp) {\n            var newResp = convertErrorEn2ZhFriend(resp);\n            if (newResp.ActionStatus == ACTION_STATUS.FAIL) {\n                if (cbErr) cbErr(newResp);\n            } else if (cbOk) {\n                cbOk(newResp);\n            }\n        }, cbErr);\n    };\n    //处理好友申请\n    var proto_responseFriend = function proto_responseFriend(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.FRIEND, \"friend_response\", {\n            'From_Account': ctx.identifier,\n            'ResponseFriendItem': options.ResponseFriendItem\n        }, function (resp) {\n            var newResp = convertErrorEn2ZhFriend(resp);\n            if (newResp.ActionStatus == ACTION_STATUS.FAIL) {\n                if (cbErr) cbErr(newResp);\n            } else if (cbOk) {\n                cbOk(newResp);\n            }\n        }, cbErr);\n    };\n    //我的好友\n    var proto_getAllFriend = function proto_getAllFriend(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.FRIEND, \"friend_get_all\", {\n            'From_Account': ctx.identifier,\n            'TimeStamp': options.TimeStamp,\n            'StartIndex': options.StartIndex,\n            'GetCount': options.GetCount,\n            'LastStandardSequence': options.LastStandardSequence,\n            'TagList': options.TagList\n        }, cbOk, cbErr);\n    };\n\n    //资料接口\n    //查看个人资料\n    var proto_getProfilePortrait = function proto_getProfilePortrait(options, cbOk, cbErr) {\n        if (options.To_Account.length > 100) {\n            options.To_Account.length = 100;\n            log.error('获取用户资料人数不能超过100人');\n        }\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.PROFILE, \"portrait_get\", {\n            'From_Account': ctx.identifier,\n            'To_Account': options.To_Account,\n            //'LastStandardSequence':options.LastStandardSequence,\n            'TagList': options.TagList\n        }, function (resp) {\n            var errorAccount = [];\n            if (resp.Fail_Account && resp.Fail_Account.length) {\n                errorAccount = resp.Fail_Account;\n            }\n            if (resp.Invalid_Account && resp.Invalid_Account.length) {\n                for (var k in resp.Invalid_Account) {\n                    errorAccount.push(resp.Invalid_Account[k]);\n                }\n            }\n            if (errorAccount.length) {\n                resp.ActionStatus = ACTION_STATUS.FAIL;\n                resp.ErrorCode = ERROR_CODE_CUSTOM;\n                resp.ErrorInfo = '';\n                for (var i in errorAccount) {\n                    var failCount = errorAccount[i];\n                    for (var j in resp.UserProfileItem) {\n                        if (resp.UserProfileItem[j].To_Account == failCount) {\n                            var resultCode = resp.UserProfileItem[j].ResultCode;\n                            resp.UserProfileItem[j].ResultInfo = \"[\" + resultCode + \"]\" + resp.UserProfileItem[j].ResultInfo;\n                            resp.ErrorInfo += \"账号:\" + failCount + \",\" + resp.UserProfileItem[j].ResultInfo + \"\\n\";\n                            break;\n                        }\n                    }\n                }\n            }\n            if (resp.ActionStatus == ACTION_STATUS.FAIL) {\n                if (cbErr) cbErr(resp);\n            } else if (cbOk) {\n                cbOk(resp);\n            }\n        }, cbErr);\n    };\n\n    //设置个人资料\n    var proto_setProfilePortrait = function proto_setProfilePortrait(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.PROFILE, \"portrait_set\", {\n            'From_Account': ctx.identifier,\n            'ProfileItem': options.ProfileItem\n        }, function (resp) {\n            for (var i in options.ProfileItem) {\n                var profile = options.ProfileItem[i];\n                if (profile.Tag == 'Tag_Profile_IM_Nick') {\n                    ctx.identifierNick = profile.Value; //更新昵称\n                    break;\n                }\n            }\n            if (cbOk) cbOk(resp);\n        }, cbErr);\n    };\n\n    //增加黑名单\n    var proto_addBlackList = function proto_addBlackList(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.FRIEND, \"black_list_add\", {\n            'From_Account': ctx.identifier,\n            'To_Account': options.To_Account\n        }, function (resp) {\n            var newResp = convertErrorEn2ZhFriend(resp);\n            if (newResp.ActionStatus == ACTION_STATUS.FAIL) {\n                if (cbErr) cbErr(newResp);\n            } else if (cbOk) {\n                cbOk(newResp);\n            }\n        }, cbErr);\n    };\n\n    //删除黑名单\n    var proto_deleteBlackList = function proto_deleteBlackList(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.FRIEND, \"black_list_delete\", {\n            'From_Account': ctx.identifier,\n            'To_Account': options.To_Account\n        }, function (resp) {\n            var newResp = convertErrorEn2ZhFriend(resp);\n            if (newResp.ActionStatus == ACTION_STATUS.FAIL) {\n                if (cbErr) cbErr(newResp);\n            } else if (cbOk) {\n                cbOk(newResp);\n            }\n        }, cbErr);\n    };\n\n    //我的黑名单\n    var proto_getBlackList = function proto_getBlackList(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.FRIEND, \"black_list_get\", {\n            'From_Account': ctx.identifier,\n            'StartIndex': options.StartIndex,\n            'MaxLimited': options.MaxLimited,\n            'LastSequence': options.LastSequence\n        }, cbOk, cbErr);\n    };\n\n    //获取最近联系人\n    var proto_getRecentContactList = function proto_getRecentContactList(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.RECENT_CONTACT, \"get\", {\n            'From_Account': ctx.identifier,\n            'Count': options.Count\n        }, cbOk, cbErr);\n    };\n\n    //上传图片或文件\n    var proto_uploadPic = function proto_uploadPic(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        var cmdName;\n        if (isAccessFormalEnv()) {\n            cmdName = 'pic_up';\n        } else {\n            cmdName = 'pic_up_test';\n        }\n        ConnManager.apiCall(SRV_NAME.PIC, cmdName, {\n            'App_Version': VERSION_INFO.APP_VERSION,\n            'From_Account': ctx.identifier,\n            'To_Account': options.To_Account,\n            'Seq': options.Seq,\n            'Timestamp': options.Timestamp,\n            'Random': options.Random,\n            'File_Str_Md5': options.File_Str_Md5,\n            'File_Size': options.File_Size,\n            'File_Type': options.File_Type,\n            'Server_Ver': VERSION_INFO.SERVER_VERSION,\n            'Auth_Key': authkey,\n            'Busi_Id': options.Busi_Id,\n            'PkgFlag': options.PkgFlag,\n            'Slice_Offset': options.Slice_Offset,\n            'Slice_Size': options.Slice_Size,\n            'Slice_Data': options.Slice_Data,\n            'content_type': \"application/x-www-form-urlencoded\"\n        }, cbOk, cbErr);\n    };\n\n    //获取语音和文件下载IP和authkey\n    var proto_getIpAndAuthkey = function proto_getIpAndAuthkey(cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.OPEN_IM, \"authkey\", {}, cbOk, cbErr);\n    };\n\n    //接口质量上报\n    var proto_reportApiQuality = function proto_reportApiQuality(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.IM_OPEN_STAT, \"web_report\", options, cbOk, cbErr);\n    };\n\n    var proto_getLongPollingId = function proto_getLongPollingId(options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.OPEN_IM, \"getlongpollingid\", {}, function (resp) {\n            cbOk && cbOk(resp);\n        }, cbErr);\n    };\n\n    var proto_applyDownload = function proto_applyDownload(options, cbOk, cbErr) {\n        //把下载地址push到map中\n        ConnManager.apiCall(SRV_NAME.PIC, \"apply_download\", options, cbOk, cbErr);\n    };\n\n    //end\n    initBrowserInfo();\n    // singleton object ConnManager\n    var ConnManager = lowerBR == false ? new function () {\n        var onConnCallback = null; //回调函数\n        this.init = function (onConnNotify, cbOk, cbErr) {\n            if (onConnNotify) onConnCallback = onConnNotify;\n        };\n        this.callBack = function (info) {\n            if (onConnCallback) onConnCallback(info);\n        };\n        this.clear = function () {\n            onConnCallback = null;\n        };\n        //请求后台服务接口\n        this.apiCall = function (type, cmd, data, cbOk, cbErr, timeout, isLongPolling) {\n            //封装后台服务接口地址\n            var url = getApiUrl(type, cmd, cbOk, cbErr);\n            if (url == false) return;\n            //发起ajax请求\n            var content_type = data.content_type ? data.content_type : \"application/x-www-form-urlencoded\";\n            ajaxRequestJson(\"POST\", url, data, timeout, content_type, isLongPolling, function (resp) {\n                var errorCode = null,\n                    tempErrorInfo = '';\n                if (cmd == 'pic_up') {\n                    data.Slice_Data = '';\n                }\n                var info = \"\\n request url: \\n\" + url + \"\\n request body: \\n\" + JSON.stringify(data) + \"\\n response: \\n\" + JSON.stringify(resp);\n                //成功\n                if (resp.ActionStatus == ACTION_STATUS.OK) {\n                    log.info(\"[\" + type + \"][\" + cmd + \"]success: \" + info);\n                    if (cbOk) cbOk(resp); //回调\n                    errorCode = 0;\n                    tempErrorInfo = '';\n                } else {\n                    errorCode = resp.ErrorCode;\n                    tempErrorInfo = resp.ErrorInfo;\n                    //报错\n                    if (cbErr) {\n                        resp.SrcErrorInfo = resp.ErrorInfo;\n                        resp.ErrorInfo = \"[\" + type + \"][\" + cmd + \"]failed: \" + info;\n                        if (cmd != 'longpolling' || resp.ErrorCode != longPollingTimeOutErrorCode) {\n                            log.error(resp.ErrorInfo);\n                        }\n                        cbErr(resp);\n                    }\n                }\n                reportApiQuality(cmd, errorCode, tempErrorInfo); //接口质量上报\n            }, function (err) {\n                cbErr && cbErr(err);\n                reportApiQuality(cmd, err.ErrorCode, err.ErrorInfo); //接口质量上报\n            });\n        };\n    }() : new function () {\n        var onConnCallback = null; //回调函数\n        this.init = function (onConnNotify, cbOk, cbErr) {\n            if (onConnNotify) onConnCallback = onConnNotify;\n        };\n        this.callBack = function (info) {\n            if (onConnCallback) onConnCallback(info);\n        };\n        this.clear = function () {\n            onConnCallback = null;\n        };\n        //请求后台服务接口\n        this.apiCall = function (type, cmd, data, cbOk, cbErr, timeout, isLongPolling) {\n            //封装后台服务接口地址\n            var url = getApiUrl(type, cmd, cbOk, cbErr);\n            if (url == false) return;\n            //发起jsonp请求\n            var reqId = jsonpRequestId++,\n                cbkey = 'jsonpcallback',\n                // the 'callback' key\n            cbval = 'jsonpRequest' + reqId,\n                // the 'callback' value\n            script = document.createElement('script'),\n                loaded = 0;\n\n            window[cbval] = jsonpCallback;\n            script.type = 'text/javascript';\n            url = url + \"&\" + cbkey + \"=\" + cbval + \"&jsonpbody=\" + encodeURIComponent(JSON.stringify(data));\n            script.src = url;\n            script.async = true;\n\n            if (typeof script.onreadystatechange !== 'undefined') {\n                // need this for IE due to out-of-order onreadystatechange(), binding script\n                // execution to an event listener gives us control over when the script\n                // is executed. See http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html\n                script.event = 'onclick';\n                script.htmlFor = script.id = '_jsonpRequest_' + reqId;\n            }\n\n            script.onload = script.onreadystatechange = function () {\n                if (this.readyState && this.readyState !== 'complete' && this.readyState !== 'loaded' || loaded) {\n                    return false;\n                }\n                script.onload = script.onreadystatechange = null;\n                script.onclick && script.onclick();\n                // Call the user callback with the last value stored and clean up values and scripts.\n                var resp = jsonpLastRspData;\n                var info = \"\\n request url: \\n\" + url + \"\\n request body: \\n\" + JSON.stringify(data) + \"\\n response: \\n\" + JSON.stringify(resp);\n                if (resp.ActionStatus == ACTION_STATUS.OK) {\n                    log.info(\"[\" + type + \"][\" + cmd + \"]success: \" + info);\n                    cbOk && cbOk(resp);\n                } else {\n                    resp.ErrorInfo = \"[\" + type + \"][\" + cmd + \"]failed \" + info;\n                    if (cmd != 'longpolling' || resp.ErrorCode != longPollingTimeOutErrorCode) {\n                        log.error(resp.ErrorInfo);\n                    } else {\n                        log.warn(\"[\" + type + \"][\" + cmd + \"]success: \" + info);\n                    }\n                    cbErr && cbErr(resp);\n                }\n                jsonpLastRspData = undefined;\n                document.body.removeChild(script);\n                loaded = 1;\n            };\n\n            // Add the script to the DOM head\n            document.body.appendChild(script);\n        };\n    }();\n    // class Session\n    var Session = function Session(type, id, name, icon, time, seq) {\n        this._impl = {\n            skey: Session.skey(type, id),\n            type: type,\n            id: id,\n            name: name,\n            icon: icon,\n            unread: 0, //未读消息数\n            isAutoRead: false,\n            time: time >= 0 ? time : 0,\n            curMaxMsgSeq: seq >= 0 ? seq : 0,\n            msgs: [],\n            isFinished: 1\n        };\n    };\n    Session.skey = function (type, id) {\n        return type + id;\n    };\n    Session.prototype.type = function () {\n        return this._impl.type;\n    };\n    Session.prototype.id = function () {\n        return this._impl.id;\n    };\n    Session.prototype.name = function () {\n        return this._impl.name;\n    };\n    Session.prototype.icon = function () {\n        return this._impl.icon;\n    };\n    Session.prototype.unread = function (val) {\n        if (typeof val !== 'undefined') {\n            this._impl.unread = val;\n        } else {\n            return this._impl.unread;\n        }\n    };\n    Session.prototype.isFinished = function (val) {\n        if (typeof val !== 'undefined') {\n            this._impl.isFinished = val;\n        } else {\n            return this._impl.isFinished;\n        }\n    };\n    Session.prototype.time = function () {\n        return this._impl.time;\n    };\n    Session.prototype.curMaxMsgSeq = function (seq) {\n        if (typeof seq !== 'undefined') {\n            this._impl.curMaxMsgSeq = seq;\n        } else {\n            return this._impl.curMaxMsgSeq;\n        }\n    };\n    Session.prototype.msgCount = function () {\n        return this._impl.msgs.length;\n    };\n    Session.prototype.msg = function (index) {\n        return this._impl.msgs[index];\n    };\n    Session.prototype.msgs = function () {\n        return this._impl.msgs;\n    };\n    Session.prototype._impl_addMsg = function (msg, unread) {\n        this._impl.msgs.push(msg);\n        //if (!msg.isSend && msg.time > this._impl.time)\n        if (msg.time > this._impl.time) this._impl.time = msg.time;\n        //if (!msg.isSend && msg.seq > this._impl.curMaxMsgSeq)\n        if (msg.seq > this._impl.curMaxMsgSeq) this._impl.curMaxMsgSeq = msg.seq;\n        //自己发送的消息不计入未读数\n        if (!msg.isSend && !this._impl.isAutoRead && unread) {\n            this._impl.unread++;\n        }\n    };\n    //class C2CMsgReadedItem\n    var C2CMsgReadedItem = function C2CMsgReadedItem(toAccount, lastedMsgTime) {\n        this.toAccount = toAccount;\n        this.lastedMsgTime = lastedMsgTime;\n    };\n\n    var calcUniqId = function calcUniqId(num1, num2) {\n        var str1 = parseInt(num1).toString(2) + '00000000000000000000000000000000';\n        var str2 = parseInt(num2).toString(2);\n        var arr1 = str1.split('').reverse();\n        var arr2 = str2.split('').reverse();\n        var sig = null,\n            res = [];\n        var length = arr1.length > arr2.length ? arr1.length : arr2.length;\n        for (var a = 0; a < length; a++) {\n            sig = Number(arr1[a] || 0) || Number(arr2[a] || 0);\n            res.push(sig);\n        }\n        var numstr = res.reverse().join(\"\");\n        var long = {\n            high: \"0x\" + parseInt(numstr.substr(0, numstr.length - 32), 2).toString(16),\n            low: \"0x\" + parseInt(numstr.substr(numstr.length - 32 - 1), 2).toString(16)\n        };\n        var longVal = new Long(long.low, long.high, true);\n        return longVal.toString();\n    };\n    // class Msg\n    var Msg = function Msg(sess, isSend, seq, random, time, fromAccount, subType, fromAccountNick, fromAccountHeadurl) {\n        this.sess = sess;\n        this.subType = subType >= 0 ? subType : 0; //消息类型,c2c消息时，type取值为0；group消息时，type取值0和1，0-普通群消息，1-群提示消息\n        this.fromAccount = fromAccount;\n        this.fromAccountNick = fromAccountNick ? fromAccountNick : fromAccount;\n        this.fromAccountHeadurl = fromAccountHeadurl || null;\n        this.isSend = Boolean(isSend);\n        this.seq = seq >= 0 ? seq : nextSeq();\n        this.random = random >= 0 ? random : createRandom();\n        this.time = time >= 0 ? time : unixtime();\n        this.elems = [];\n        var type = sess.type();\n        switch (type) {\n            case SESSION_TYPE.GROUP:\n                this.uniqueId = calcUniqId(this.seq, this.random);\n                break;\n            case SESSION_TYPE.C2C:\n            default:\n                this.uniqueId = calcUniqId(this.time, this.random);\n                break;\n        }\n    };\n    Msg.prototype.getSession = function () {\n        return this.sess;\n    };\n    Msg.prototype.getType = function () {\n        return this.subType;\n    };\n    Msg.prototype.getSubType = function () {\n        return this.subType;\n    };\n    Msg.prototype.getFromAccount = function () {\n        return this.fromAccount;\n    };\n    Msg.prototype.getFromAccountNick = function () {\n        return this.fromAccountNick;\n    };\n    Msg.prototype.getIsSend = function () {\n        return this.isSend;\n    };\n    Msg.prototype.getSeq = function () {\n        return this.seq;\n    };\n    Msg.prototype.getTime = function () {\n        return this.time;\n    };\n    Msg.prototype.getRandom = function () {\n        return this.random;\n    };\n    Msg.prototype.getElems = function () {\n        return this.elems;\n    };\n    Msg.prototype.getMsgUniqueId = function () {\n        return this.uniqueId;\n    };\n    //文本\n    Msg.prototype.addText = function (text) {\n        this.addElem(new webim.Msg.Elem(MSG_ELEMENT_TYPE.TEXT, text));\n    };\n    //表情\n    Msg.prototype.addFace = function (face) {\n        this.addElem(new webim.Msg.Elem(MSG_ELEMENT_TYPE.FACE, face));\n    };\n    //图片\n    Msg.prototype.addImage = function (image) {\n        this.addElem(new webim.Msg.Elem(MSG_ELEMENT_TYPE.IMAGE, image));\n    };\n    //地理位置\n    Msg.prototype.addLocation = function (location) {\n        this.addElem(new webim.Msg.Elem(MSG_ELEMENT_TYPE.LOCATION, location));\n    };\n    //文件\n    Msg.prototype.addFile = function (file) {\n        this.addElem(new webim.Msg.Elem(MSG_ELEMENT_TYPE.FILE, file));\n    };\n    //自定义\n    Msg.prototype.addCustom = function (custom) {\n        this.addElem(new webim.Msg.Elem(MSG_ELEMENT_TYPE.CUSTOM, custom));\n    };\n    Msg.prototype.addElem = function (elem) {\n        this.elems.push(elem);\n    };\n    Msg.prototype.toHtml = function () {\n        var html = \"\";\n        for (var i in this.elems) {\n            var elem = this.elems[i];\n            html += elem.toHtml();\n        }\n        return html;\n    };\n\n    // 暴力点 直接添加，内部的配置不细写\n    Msg.prototype.setOfflinePushInfo = function (offlinePushInfo) {\n        this.offlinePushInfo = offlinePushInfo;\n    };\n\n    // class Msg.Elem\n    Msg.Elem = function (type, value) {\n        this.type = type;\n        this.content = value;\n    };\n    Msg.Elem.prototype.getType = function () {\n        return this.type;\n    };\n    Msg.Elem.prototype.getContent = function () {\n        return this.content;\n    };\n    Msg.Elem.prototype.toHtml = function () {\n        var html;\n        html = this.content.toHtml();\n        return html;\n    };\n\n    // class Msg.Elem.Text\n    Msg.Elem.Text = function (text) {\n        this.text = tool.xssFilter(text);\n    };\n    Msg.Elem.Text.prototype.getText = function () {\n        return this.text;\n    };\n    Msg.Elem.Text.prototype.toHtml = function () {\n        return this.text;\n    };\n\n    // class Msg.Elem.Face\n    Msg.Elem.Face = function (index, data) {\n        this.index = index;\n        this.data = data;\n    };\n    Msg.Elem.Face.prototype.getIndex = function () {\n        return this.index;\n    };\n    Msg.Elem.Face.prototype.getData = function () {\n        return this.data;\n    };\n    Msg.Elem.Face.prototype.toHtml = function () {\n        var faceUrl = null;\n        var index = emotionDataIndexs[this.data];\n        var emotion = emotions[index];\n        if (emotion && emotion[1]) {\n            faceUrl = emotion[1];\n        }\n        if (faceUrl) {\n            return \"<img src='\" + faceUrl + \"'/>\";\n        } else {\n            return this.data;\n        }\n    };\n\n    // 地理位置消息 class Msg.Elem.Location\n    Msg.Elem.Location = function (longitude, latitude, desc) {\n        this.latitude = latitude; //纬度\n        this.longitude = longitude; //经度\n        this.desc = desc; //描述\n    };\n    Msg.Elem.Location.prototype.getLatitude = function () {\n        return this.latitude;\n    };\n    Msg.Elem.Location.prototype.getLongitude = function () {\n        return this.longitude;\n    };\n    Msg.Elem.Location.prototype.getDesc = function () {\n        return this.desc;\n    };\n    Msg.Elem.Location.prototype.toHtml = function () {\n        return '经度=' + this.longitude + ',纬度=' + this.latitude + ',描述=' + this.desc;\n    };\n\n    //图片消息\n    // class Msg.Elem.Images\n    Msg.Elem.Images = function (imageId, format) {\n        this.UUID = imageId;\n        if (typeof format !== 'number') {\n            format = parseInt(IMAGE_FORMAT[format] || IMAGE_FORMAT['UNKNOWN'], 10);\n        }\n        this.ImageFormat = format;\n        this.ImageInfoArray = [];\n    };\n    Msg.Elem.Images.prototype.addImage = function (image) {\n        this.ImageInfoArray.push(image);\n    };\n    Msg.Elem.Images.prototype.toHtml = function () {\n        var smallImage = this.getImage(IMAGE_TYPE.SMALL);\n        var bigImage = this.getImage(IMAGE_TYPE.LARGE);\n        var oriImage = this.getImage(IMAGE_TYPE.ORIGIN);\n        if (!bigImage) {\n            bigImage = smallImage;\n        }\n        if (!oriImage) {\n            oriImage = smallImage;\n        }\n        return \"<img src='\" + smallImage.getUrl() + \"#\" + bigImage.getUrl() + \"#\" + oriImage.getUrl() + \"' style='CURSOR: hand' id='\" + this.getImageId() + \"' bigImgUrl='\" + bigImage.getUrl() + \"' onclick='imageClick(this)' />\";\n    };\n    Msg.Elem.Images.prototype.getImageId = function () {\n        return this.UUID;\n    };\n    Msg.Elem.Images.prototype.getImageFormat = function () {\n        return this.ImageFormat;\n    };\n    Msg.Elem.Images.prototype.getImage = function (type) {\n        for (var i in this.ImageInfoArray) {\n            if (this.ImageInfoArray[i].getType() == type) {\n                return this.ImageInfoArray[i];\n            }\n        }\n        var img = null;\n        this.ImageInfoArray.forEach(function (image) {\n            if (image.getType() == type) {\n                img = image;\n            }\n        });\n        return img;\n    };\n    // class Msg.Elem.Images.Image\n    Msg.Elem.Images.Image = function (type, size, width, height, url) {\n        this.type = type;\n        this.size = size;\n        this.width = width;\n        this.height = height;\n        this.url = url;\n    };\n    Msg.Elem.Images.Image.prototype.getType = function () {\n        return this.type;\n    };\n    Msg.Elem.Images.Image.prototype.getSize = function () {\n        return this.size;\n    };\n    Msg.Elem.Images.Image.prototype.getWidth = function () {\n        return this.width;\n    };\n    Msg.Elem.Images.Image.prototype.getHeight = function () {\n        return this.height;\n    };\n    Msg.Elem.Images.Image.prototype.getUrl = function () {\n        return this.url;\n    };\n\n    // class Msg.Elem.Sound\n    Msg.Elem.Sound = function (uuid, second, size, senderId, receiverId, downFlag, chatType) {\n        this.uuid = uuid; //文件id\n        this.second = second; //时长，单位：秒\n        this.size = size; //大小，单位：字节\n        this.senderId = senderId; //发送者\n        this.receiverId = receiverId; //接收方id\n        this.downFlag = downFlag; //下载标志位\n        this.busiId = chatType == SESSION_TYPE.C2C ? 2 : 1; //busi_id ( 1：群    2:C2C)\n\n        //根据不同情况拉取数据\n        //是否需要申请下载地址  0:到架平申请  1:到cos申请  2:不需要申请, 直接拿url下载\n        if (this.downFlag !== undefined && this.busiId !== undefined) {\n            getFileDownUrlV2(uuid, senderId, second, downFlag, receiverId, this.busiId, UPLOAD_RES_TYPE.SOUND);\n        } else {\n            this.downUrl = getSoundDownUrl(uuid, senderId, second); //下载地址\n        }\n    };\n    Msg.Elem.Sound.prototype.getUUID = function () {\n        return this.uuid;\n    };\n    Msg.Elem.Sound.prototype.getSecond = function () {\n        return this.second;\n    };\n    Msg.Elem.Sound.prototype.getSize = function () {\n        return this.size;\n    };\n    Msg.Elem.Sound.prototype.getSenderId = function () {\n        return this.senderId;\n    };\n    Msg.Elem.Sound.prototype.getDownUrl = function () {\n        return this.downUrl;\n    };\n    Msg.Elem.Sound.prototype.toHtml = function () {\n        if (BROWSER_INFO.type == 'ie' && parseInt(BROWSER_INFO.ver) <= 8) {\n            return '[这是一条语音消息]demo暂不支持ie8(含)以下浏览器播放语音,语音URL:' + this.downUrl;\n        }\n        return '<audio id=\"uuid_' + this.uuid + '\" src=\"' + this.downUrl + '\" controls=\"controls\" onplay=\"onChangePlayAudio(this)\" preload=\"none\"></audio>';\n    };\n\n    // class Msg.Elem.File\n    Msg.Elem.File = function (uuid, name, size, senderId, receiverId, downFlag, chatType) {\n        this.uuid = uuid; //文件id\n        this.name = name; //文件名\n        this.size = size; //大小，单位：字节\n        this.senderId = senderId; //发送者\n        this.receiverId = receiverId; //接收方id\n        this.downFlag = downFlag; //下载标志位\n\n        this.busiId = chatType == SESSION_TYPE.C2C ? 2 : 1; //busi_id ( 1：群    2:C2C)\n        //根据不同情况拉取数据\n        //是否需要申请下载地址  0:到架平申请  1:到cos申请  2:不需要申请, 直接拿url下载\n        if (downFlag !== undefined && busiId !== undefined) {\n            getFileDownUrlV2(uuid, senderId, name, downFlag, receiverId, this.busiId, UPLOAD_RES_TYPE.FILE);\n        } else {\n            this.downUrl = getFileDownUrl(uuid, senderId, name); //下载地址\n        }\n    };\n    Msg.Elem.File.prototype.getUUID = function () {\n        return this.uuid;\n    };\n    Msg.Elem.File.prototype.getName = function () {\n        return this.name;\n    };\n    Msg.Elem.File.prototype.getSize = function () {\n        return this.size;\n    };\n    Msg.Elem.File.prototype.getSenderId = function () {\n        return this.senderId;\n    };\n    Msg.Elem.File.prototype.getDownUrl = function () {\n        return this.downUrl;\n    };\n    Msg.Elem.File.prototype.getDownFlag = function () {\n        return this.downFlag;\n    };\n    Msg.Elem.File.prototype.toHtml = function () {\n        var fileSize, unitStr;\n        fileSize = this.size;\n        unitStr = \"Byte\";\n        if (this.size >= 1024) {\n            fileSize = Math.round(this.size / 1024);\n            unitStr = \"KB\";\n        }\n        return '<a href=\"javascript\" onclick=\"webim.onDownFile(\"' + this.uuid + '\")\" title=\"点击下载文件\" ><i class=\"glyphicon glyphicon-file\">&nbsp;' + this.name + '(' + fileSize + unitStr + ')</i></a>';\n    };\n\n    // class Msg.Elem.GroupTip 群提示消息对象\n    Msg.Elem.GroupTip = function (opType, opUserId, groupId, groupName, userIdList, userinfo) {\n        this.opType = opType; //操作类型\n        this.opUserId = opUserId; //操作者id\n        this.groupId = groupId; //群id\n        this.groupName = groupName; //群名称\n        this.userIdList = userIdList ? userIdList : []; //被操作的用户id列表\n        this.groupInfoList = []; //新的群资料信息，群资料变更时才有值\n        this.memberInfoList = []; //新的群成员资料信息，群成员资料变更时才有值\n        this.groupMemberNum = null; //群成员数，操作类型为加群或者退群时才有值\n        this.userinfo = userinfo ? userinfo : []; //被操作的用户信息列表列表\n    };\n    Msg.Elem.GroupTip.prototype.addGroupInfo = function (groupInfo) {\n        this.groupInfoList.push(groupInfo);\n    };\n    Msg.Elem.GroupTip.prototype.addMemberInfo = function (memberInfo) {\n        this.memberInfoList.push(memberInfo);\n    };\n    Msg.Elem.GroupTip.prototype.getOpType = function () {\n        return this.opType;\n    };\n    Msg.Elem.GroupTip.prototype.getOpUserId = function () {\n        return this.opUserId;\n    };\n    Msg.Elem.GroupTip.prototype.getGroupId = function () {\n        return this.groupId;\n    };\n    Msg.Elem.GroupTip.prototype.getGroupName = function () {\n        return this.groupName;\n    };\n    Msg.Elem.GroupTip.prototype.getUserIdList = function () {\n        return this.userIdList;\n    };\n    Msg.Elem.GroupTip.prototype.getUserInfo = function () {\n        return this.userinfo;\n    };\n    Msg.Elem.GroupTip.prototype.getGroupInfoList = function () {\n        return this.groupInfoList;\n    };\n    Msg.Elem.GroupTip.prototype.getMemberInfoList = function () {\n        return this.memberInfoList;\n    };\n    Msg.Elem.GroupTip.prototype.getGroupMemberNum = function () {\n        return this.groupMemberNum;\n    };\n    Msg.Elem.GroupTip.prototype.setGroupMemberNum = function (groupMemberNum) {\n        return this.groupMemberNum = groupMemberNum;\n    };\n    Msg.Elem.GroupTip.prototype.toHtml = function () {\n        var text = \"[群提示消息]\";\n        var maxIndex = GROUP_TIP_MAX_USER_COUNT - 1;\n        switch (this.opType) {\n            case GROUP_TIP_TYPE.JOIN:\n                //加入群\n                text += this.opUserId + \"邀请了\";\n                for (var m in this.userIdList) {\n                    text += this.userIdList[m] + \",\";\n                    if (this.userIdList.length > GROUP_TIP_MAX_USER_COUNT && m == maxIndex) {\n                        text += \"等\" + this.userIdList.length + \"人\";\n                        break;\n                    }\n                }\n                text += \"加入该群\";\n                break;\n            case GROUP_TIP_TYPE.QUIT:\n                //退出群\n                text += this.opUserId + \"主动退出该群\";\n                break;\n            case GROUP_TIP_TYPE.KICK:\n                //踢出群\n                text += this.opUserId + \"将\";\n                for (var m in this.userIdList) {\n                    text += this.userIdList[m] + \",\";\n                    if (this.userIdList.length > GROUP_TIP_MAX_USER_COUNT && m == maxIndex) {\n                        text += \"等\" + this.userIdList.length + \"人\";\n                        break;\n                    }\n                }\n                text += \"踢出该群\";\n                break;\n            case GROUP_TIP_TYPE.SET_ADMIN:\n                //设置管理员\n                text += this.opUserId + \"将\";\n                for (var m in this.userIdList) {\n                    text += this.userIdList[m] + \",\";\n                    if (this.userIdList.length > GROUP_TIP_MAX_USER_COUNT && m == maxIndex) {\n                        text += \"等\" + this.userIdList.length + \"人\";\n                        break;\n                    }\n                }\n                text += \"设为管理员\";\n                break;\n            case GROUP_TIP_TYPE.CANCEL_ADMIN:\n                //取消管理员\n                text += this.opUserId + \"取消\";\n                for (var m in this.userIdList) {\n                    text += this.userIdList[m] + \",\";\n                    if (this.userIdList.length > GROUP_TIP_MAX_USER_COUNT && m == maxIndex) {\n                        text += \"等\" + this.userIdList.length + \"人\";\n                        break;\n                    }\n                }\n                text += \"的管理员资格\";\n                break;\n\n            case GROUP_TIP_TYPE.MODIFY_GROUP_INFO:\n                //群资料变更\n                text += this.opUserId + \"修改了群资料：\";\n                for (var m in this.groupInfoList) {\n                    var type = this.groupInfoList[m].getType();\n                    var value = this.groupInfoList[m].getValue();\n                    switch (type) {\n                        case GROUP_TIP_MODIFY_GROUP_INFO_TYPE.FACE_URL:\n                            text += \"群头像为\" + value + \"; \";\n                            break;\n                        case GROUP_TIP_MODIFY_GROUP_INFO_TYPE.NAME:\n                            text += \"群名称为\" + value + \"; \";\n                            break;\n                        case GROUP_TIP_MODIFY_GROUP_INFO_TYPE.OWNER:\n                            text += \"群主为\" + value + \"; \";\n                            break;\n                        case GROUP_TIP_MODIFY_GROUP_INFO_TYPE.NOTIFICATION:\n                            text += \"群公告为\" + value + \"; \";\n                            break;\n                        case GROUP_TIP_MODIFY_GROUP_INFO_TYPE.INTRODUCTION:\n                            text += \"群简介为\" + value + \"; \";\n                            break;\n                        default:\n                            text += \"未知信息为:type=\" + type + \",value=\" + value + \"; \";\n                            break;\n                    }\n                }\n                break;\n\n            case GROUP_TIP_TYPE.MODIFY_MEMBER_INFO:\n                //群成员资料变更(禁言时间)\n                text += this.opUserId + \"修改了群成员资料:\";\n                for (var m in this.memberInfoList) {\n                    var userId = this.memberInfoList[m].getUserId();\n                    var shutupTime = this.memberInfoList[m].getShutupTime();\n                    text += userId + \": \";\n                    if (shutupTime != null && shutupTime !== undefined) {\n                        if (shutupTime == 0) {\n                            text += \"取消禁言; \";\n                        } else {\n                            text += \"禁言\" + shutupTime + \"秒; \";\n                        }\n                    } else {\n                        text += \" shutupTime为空\";\n                    }\n                    if (this.memberInfoList.length > GROUP_TIP_MAX_USER_COUNT && m == maxIndex) {\n                        text += \"等\" + this.memberInfoList.length + \"人\";\n                        break;\n                    }\n                }\n                break;\n\n            case GROUP_TIP_TYPE.READED:\n                //消息已读\n                /**/\n                Log.info(\"消息已读同步\");\n                break;\n            default:\n                text += \"未知群提示消息类型：type=\" + this.opType;\n                break;\n        }\n        return text;\n    };\n\n    // class Msg.Elem.GroupTip.GroupInfo，变更的群资料信息对象\n    Msg.Elem.GroupTip.GroupInfo = function (type, value) {\n        this.type = type; //群资料信息类型\n        this.value = value; //对应的值\n    };\n    Msg.Elem.GroupTip.GroupInfo.prototype.getType = function () {\n        return this.type;\n    };\n    Msg.Elem.GroupTip.GroupInfo.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // class Msg.Elem.GroupTip.MemberInfo，变更的群成员资料信息对象\n    Msg.Elem.GroupTip.MemberInfo = function (userId, shutupTime) {\n        this.userId = userId; //群成员id\n        this.shutupTime = shutupTime; //群成员被禁言时间，0表示取消禁言，大于0表示被禁言时长，单位：秒\n    };\n    Msg.Elem.GroupTip.MemberInfo.prototype.getUserId = function () {\n        return this.userId;\n    };\n    Msg.Elem.GroupTip.MemberInfo.prototype.getShutupTime = function () {\n        return this.shutupTime;\n    };\n\n    // 自定义消息类型 class Msg.Elem.Custom\n    Msg.Elem.Custom = function (data, desc, ext) {\n        this.data = data; //数据\n        this.desc = desc; //描述\n        this.ext = ext; //扩展字段\n    };\n    Msg.Elem.Custom.prototype.getData = function () {\n        return this.data;\n    };\n    Msg.Elem.Custom.prototype.getDesc = function () {\n        return this.desc;\n    };\n    Msg.Elem.Custom.prototype.getExt = function () {\n        return this.ext;\n    };\n    Msg.Elem.Custom.prototype.toHtml = function () {\n        return this.data;\n    };\n\n    // singleton object MsgStore\n    var MsgStore = new function () {\n        var sessMap = {}; //跟所有用户或群的聊天记录MAP\n        var sessTimeline = []; //按时间降序排列的会话列表\n        msgCache = {}; //消息缓存，用于判重\n        //C2C\n        this.cookie = \"\"; //上一次拉取新c2c消息的cookie\n        this.syncFlag = 0; //上一次拉取新c2c消息的是否继续拉取标记\n\n        var visitSess = function visitSess(visitor) {\n            for (var i in sessMap) {\n                visitor(sessMap[i]);\n            }\n        };\n        //消息查重\n        var checkDupMsg = function checkDupMsg(msg) {\n            var dup = false;\n            var first_key = msg.sess._impl.skey;\n            var second_key = msg.isSend + msg.seq + msg.random;\n            var tempMsg = msgCache[first_key] && msgCache[first_key][second_key];\n            if (tempMsg) {\n                dup = true;\n            }\n            if (msgCache[first_key]) {\n                msgCache[first_key][second_key] = {\n                    time: msg.time\n                };\n            } else {\n                msgCache[first_key] = {};\n                msgCache[first_key][second_key] = {\n                    time: msg.time\n                };\n            }\n            return dup;\n        };\n\n        this.sessMap = function () {\n            return sessMap;\n        };\n        this.sessCount = function () {\n            return sessTimeline.length;\n        };\n        this.sessByTypeId = function (type, id) {\n            var skey = Session.skey(type, id);\n            if (skey === undefined || skey == null) return null;\n            return sessMap[skey];\n        };\n        this.delSessByTypeId = function (type, id) {\n            var skey = Session.skey(type, id);\n            if (skey === undefined || skey == null) return false;\n            if (sessMap[skey]) {\n                delete sessMap[skey];\n                delete msgCache[skey];\n            }\n            return true;\n        };\n        this.resetCookieAndSyncFlag = function () {\n            this.cookie = \"\";\n            this.syncFlag = 0;\n        };\n\n        //切换将当前会话的自动读取消息标志为isOn,重置其他会话的自动读取消息标志为false\n        this.setAutoRead = function (selSess, isOn, isResetAll) {\n            if (isResetAll) visitSess(function (s) {\n                s._impl.isAutoRead = false;\n            });\n            if (selSess) {\n                selSess._impl.isAutoRead = isOn; //\n                if (isOn) {\n                    //是否调用已读上报接口\n                    selSess._impl.unread = 0;\n\n                    if (selSess._impl.type == SESSION_TYPE.C2C) {\n                        //私聊消息已读上报\n                        var tmpC2CMsgReadedItem = [];\n                        tmpC2CMsgReadedItem.push(new C2CMsgReadedItem(selSess._impl.id, selSess._impl.time));\n                        //调用C2C消息已读上报接口\n                        proto_c2CMsgReaded(MsgStore.cookie, tmpC2CMsgReadedItem, function (resp) {\n                            log.info(\"[setAutoRead]: c2CMsgReaded success\");\n                        }, function (err) {\n                            log.error(\"[setAutoRead}: c2CMsgReaded failed:\" + err.ErrorInfo);\n                        });\n                    } else if (selSess._impl.type == SESSION_TYPE.GROUP) {\n                        //群聊消息已读上报\n                        var tmpOpt = {\n                            'GroupId': selSess._impl.id,\n                            'MsgReadedSeq': selSess._impl.curMaxMsgSeq\n                        };\n                        //调用group消息已读上报接口\n                        proto_groupMsgReaded(tmpOpt, function (resp) {\n                            log.info(\"groupMsgReaded success\");\n                        }, function (err) {\n                            log.error(\"groupMsgReaded failed:\" + err.ErrorInfo);\n                        });\n                    }\n                }\n            }\n        };\n\n        this.c2CMsgReaded = function (opts, cbOk, cbErr) {\n            var tmpC2CMsgReadedItem = [];\n            tmpC2CMsgReadedItem.push(new C2CMsgReadedItem(opts.To_Account, opts.LastedMsgTime));\n            //调用C2C消息已读上报接口\n            proto_c2CMsgReaded(MsgStore.cookie, tmpC2CMsgReadedItem, function (resp) {\n                if (cbOk) {\n                    log.info(\"c2CMsgReaded success\");\n                    cbOk(resp);\n                }\n            }, function (err) {\n                if (cbErr) {\n                    log.error(\"c2CMsgReaded failed:\" + err.ErrorInfo);\n                    cbErr(err);\n                }\n            });\n        };\n\n        this.addSession = function (sess) {\n            sessMap[sess._impl.skey] = sess;\n        };\n        this.delSession = function (sess) {\n            delete sessMap[sess._impl.skey];\n        };\n        this.clear = function () {\n            sessMap = {}; //跟所有用户或群的聊天记录MAP\n            sessTimeline = []; //按时间降序排列的会话列表\n            msgCache = {}; //消息缓存，用于判重\n            this.cookie = \"\"; //上一次拉取新c2c消息的cookie\n            this.syncFlag = 0; //上一次拉取新c2c消息的是否继续拉取标记\n        };\n        this.addMsg = function (msg, unread) {\n            if (checkDupMsg(msg)) return false;\n            var sess = msg.sess;\n            if (!sessMap[sess._impl.skey]) this.addSession(sess);\n            sess._impl_addMsg(msg, unread);\n            return true;\n        };\n        this.updateTimeline = function () {\n            var arr = new Array();\n            visitSess(function (sess) {\n                arr.push(sess);\n            });\n            arr.sort(function (a, b) {\n                return b.time - a.time;\n            });\n            sessTimeline = arr;\n        };\n    }();\n    // singleton object MsgManager\n    var MsgManager = new function () {\n\n        var onMsgCallback = null; //新消息(c2c和group)回调\n\n        var onGroupInfoChangeCallback = null; //群资料变化回调\n        //收到新群系统消息回调列表\n        var onGroupSystemNotifyCallbacks = {\n            \"1\": null,\n            \"2\": null,\n            \"3\": null,\n            \"4\": null,\n            \"5\": null,\n            \"6\": null,\n            \"7\": null,\n            \"8\": null,\n            \"9\": null,\n            \"10\": null,\n            \"11\": null,\n            \"15\": null,\n            \"255\": null,\n            \"12\": null\n        };\n        //监听好友系统通知函数\n        var onFriendSystemNotifyCallbacks = {\n            \"1\": null,\n            \"2\": null,\n            \"3\": null,\n            \"4\": null,\n            \"5\": null,\n            \"6\": null,\n            \"7\": null,\n            \"8\": null\n        };\n\n        var onProfileSystemNotifyCallbacks = {\n            \"1\": null\n        };\n\n        var onKickedEventCall = null;\n\n        var onMsgReadCallback = null;\n\n        //普通长轮询\n        var longPollingOn = false; //是否开启普通长轮询\n        var isLongPollingRequesting = false; //是否在长轮询ing\n        var notifySeq = 0; //c2c通知seq\n        var noticeSeq = 0; //群消息seq\n\n        //大群长轮询\n        var onBigGroupMsgCallback = null; //大群消息回调\n        var bigGroupLongPollingOn = false; //是否开启长轮询\n        var bigGroupLongPollingStartSeqMap = {}; //请求拉消息的起始seq(大群长轮询)\n        var bigGroupLongPollingHoldTime = 90; //客户端长轮询的超时时间，单位是秒(大群长轮询)\n        var bigGroupLongPollingKeyMap = null; //客户端加入群组后收到的的Key(大群长轮询)\n        var bigGroupLongPollingMsgMap = {}; //记录收到的群消息数\n        var onC2cEventCallbacks = {\n            \"92\": null, //消息已读通知,\n            \"96\": null\n        };;\n        var onAppliedDownloadUrl = null;\n\n        var getLostGroupMsgCount = 0; //补拉丢失的群消息次数\n        //我的群当前最大的seq\n        var myGroupMaxSeqs = {}; //用于补拉丢失的群消息\n\n        var groupSystemMsgsCache = {}; //群组系统消息缓存,用于判重\n\n        //设置长轮询开关\n        //isOn=true 开启\n        //isOn=false 停止\n        this.setLongPollingOn = function (isOn) {\n            longPollingOn = isOn;\n        };\n        this.getLongPollingOn = function () {\n            return longPollingOn;\n        };\n\n        //重置长轮询变量\n        this.resetLongPollingInfo = function () {\n            longPollingOn = false;\n            notifySeq = 0;\n            noticeSeq = 0;\n        };\n\n        //设置大群长轮询开关\n        //isOn=true 开启\n        //isOn=false 停止\n        this.setBigGroupLongPollingOn = function (isOn) {\n            bigGroupLongPollingOn = isOn;\n        };\n\n        //查看是否存在该轮询，防止多次入群\n        this.checkBigGroupLongPollingOn = function (groupId) {\n            return !!bigGroupLongPollingKeyMap[groupId];\n        };\n        //设置大群长轮询key\n        this.setBigGroupLongPollingKey = function (GroupId, key) {\n            bigGroupLongPollingKeyMap[GroupId] = key;\n        };\n        //重置大群长轮询变量\n        this.resetBigGroupLongPollingInfo = function (groupId) {\n            bigGroupLongPollingOn = false;\n            bigGroupLongPollingStartSeqMap[groupId] = 0;\n            bigGroupLongPollingKeyMap[groupId] = null;\n            bigGroupLongPollingMsgMap[groupId] = {};\n        };\n\n        //设置群消息数据条数\n        this.setBigGroupLongPollingMsgMap = function (groupId, count) {\n            var bigGroupLongPollingMsgCount = bigGroupLongPollingMsgMap[groupId];\n            if (bigGroupLongPollingMsgCount) {\n                bigGroupLongPollingMsgCount = parseInt(bigGroupLongPollingMsgCount) + count;\n                bigGroupLongPollingMsgMap[groupId] = bigGroupLongPollingMsgCount;\n            } else {\n                bigGroupLongPollingMsgMap[groupId] = count;\n            }\n        };\n\n        //重置\n        this.clear = function () {\n\n            onGroupInfoChangeCallback = null;\n            onGroupSystemNotifyCallbacks = {\n                \"1\": null, //申请加群请求（只有管理员会收到）\n                \"2\": null, //申请加群被同意（只有申请人能够收到）\n                \"3\": null, //申请加群被拒绝（只有申请人能够收到）\n                \"4\": null, //被管理员踢出群(只有被踢者接收到)\n                \"5\": null, //群被解散(全员接收)\n                \"6\": null, //创建群(创建者接收)\n                \"7\": null, //邀请加群(被邀请者接收)\n                \"8\": null, //主动退群(主动退出者接收)\n                \"9\": null, //设置管理员(被设置者接收)\n                \"10\": null, //取消管理员(被取消者接收)\n                \"11\": null, //群已被回收(全员接收)\n                \"15\": null, //群已被回收(全员接收)\n                \"255\": null, //用户自定义通知(默认全员接收)\n                \"12\": null //邀请加群(被邀请者需要同意)\n            };\n            onFriendSystemNotifyCallbacks = {\n                \"1\": null, //好友表增加\n                \"2\": null, //好友表删除\n                \"3\": null, //未决增加\n                \"4\": null, //未决删除\n                \"5\": null, //黑名单增加\n                \"6\": null, //黑名单删除\n                \"7\": null, //未决已读上报\n                \"8\": null //好友信息(备注，分组)变更\n            };\n            onProfileSystemNotifyCallbacks = {\n                \"1\": null //资料修改\n            };\n            //重置普通长轮询参数\n            onMsgCallback = null;\n            longPollingOn = false;\n            notifySeq = 0; //c2c新消息通知seq\n            noticeSeq = 0; //group新消息seq\n\n            //重置大群长轮询参数\n            onBigGroupMsgCallback = null;\n            bigGroupLongPollingOn = false;\n            bigGroupLongPollingStartSeqMap = {};\n            bigGroupLongPollingKeyMap = {};\n            bigGroupLongPollingMsgMap = {};\n\n            groupSystemMsgsCache = {};\n\n            ipList = []; //文件下载地址\n            authkey = null; //文件下载票据\n            expireTime = null; //票据超时时间\n        };\n\n        //初始化文件下载ip和票据\n        var initIpAndAuthkey = function initIpAndAuthkey(cbOk, cbErr) {\n            proto_getIpAndAuthkey(function (resp) {\n                ipList = resp.IpList;\n                authkey = resp.AuthKey;\n                expireTime = resp.ExpireTime;\n                if (cbOk) cbOk(resp);\n            }, function (err) {\n                log.error(\"initIpAndAuthkey failed:\" + err.ErrorInfo);\n                if (cbErr) cbErr(err);\n            });\n        };\n\n        //初始化我的群当前最大的seq，用于补拉丢失的群消息\n        var initMyGroupMaxSeqs = function initMyGroupMaxSeqs(cbOk, cbErr) {\n            var opts = {\n                'Member_Account': ctx.identifier,\n                'Limit': 1000,\n                'Offset': 0,\n                'GroupBaseInfoFilter': ['NextMsgSeq']\n            };\n            proto_getJoinedGroupListHigh(opts, function (resp) {\n                if (!resp.GroupIdList || resp.GroupIdList.length == 0) {\n                    log.info(\"initMyGroupMaxSeqs: 目前还没有加入任何群组\");\n                    if (cbOk) cbOk(resp);\n                    return;\n                }\n                for (var i = 0; i < resp.GroupIdList.length; i++) {\n                    var group_id = resp.GroupIdList[i].GroupId;\n                    var curMaxSeq = resp.GroupIdList[i].NextMsgSeq - 1;\n                    myGroupMaxSeqs[group_id] = curMaxSeq;\n                }\n\n                if (cbOk) cbOk(resp);\n            }, function (err) {\n                log.error(\"initMyGroupMaxSeqs failed:\" + err.ErrorInfo);\n                if (cbErr) cbErr(err);\n            });\n        };\n\n        //补拉群消息\n        var getLostGroupMsgs = function getLostGroupMsgs(groupId, reqMsgSeq, reqMsgNumber) {\n            getLostGroupMsgCount++;\n            //发起一个拉群群消息请求\n            var tempOpts = {\n                'GroupId': groupId,\n                'ReqMsgSeq': reqMsgSeq,\n                'ReqMsgNumber': reqMsgNumber\n            };\n            //发起一个拉群群消息请求\n            log.warn(\"第\" + getLostGroupMsgCount + \"次补齐群消息,参数=\" + JSON.stringify(tempOpts));\n            MsgManager.syncGroupMsgs(tempOpts);\n        };\n\n        //更新群当前最大消息seq\n        var updateMyGroupCurMaxSeq = function updateMyGroupCurMaxSeq(groupId, msgSeq) {\n            //更新myGroupMaxSeqs中的群最大seq\n            var curMsgSeq = myGroupMaxSeqs[groupId];\n            if (curMsgSeq) {\n                //如果存在，比较大小\n                if (msgSeq > curMsgSeq) {\n                    myGroupMaxSeqs[groupId] = msgSeq;\n                }\n            } else {\n                //不存在，新增\n                myGroupMaxSeqs[groupId] = msgSeq;\n            }\n        };\n\n        //添加群消息列表\n        var addGroupMsgList = function addGroupMsgList(msgs, new_group_msgs) {\n            for (var p in msgs) {\n                var newGroupMsg = msgs[p];\n                //发群消息时，长轮询接口会返回用户自己发的群消息\n                //if(newGroupMsg.From_Account && newGroupMsg.From_Account!=ctx.identifier ){\n                if (newGroupMsg.From_Account) {\n                    //false-不是主动拉取的历史消息\n                    //true-需要保存到sdk本地session,并且需要判重\n                    var msg = handlerGroupMsg(newGroupMsg, false, true);\n                    if (msg) {\n                        //不为空，加到新消息里\n                        new_group_msgs.push(msg);\n                    }\n                    //更新myGroupMaxSeqs中的群最大seq\n                    updateMyGroupCurMaxSeq(newGroupMsg.ToGroupId, newGroupMsg.MsgSeq);\n                }\n            }\n            return new_group_msgs;\n        };\n\n        //处理收到的群普通和提示消息\n        var handlerOrdinaryAndTipC2cMsgs = function handlerOrdinaryAndTipC2cMsgs(eventType, groupMsgArray) {\n            var groupMsgMap = {}; //保存收到的C2c消息信息（群号，最小，最大消息seq，消息列表）\n            var new_group_msgs = [];\n            var minGroupMsgSeq = 99999999;\n            var maxGroupMsgSeq = -1;\n            for (var j in groupMsgArray) {\n\n                var groupMsgs = groupMsgMap[groupMsgArray[j].ToGroupId];\n                if (!groupMsgs) {\n                    groupMsgs = groupMsgMap[groupMsgArray[j].ToGroupId] = {\n                        \"min\": minGroupMsgSeq, //收到新消息最小seq\n                        \"max\": maxGroupMsgSeq, //收到新消息最大seq\n                        \"msgs\": [] //收到的新消息\n                    };\n                }\n                //更新长轮询的群NoticeSeq\n                if (groupMsgArray[j].NoticeSeq > noticeSeq) {\n                    log.warn(\"noticeSeq=\" + noticeSeq + \",msgNoticeSeq=\" + groupMsgArray[j].NoticeSeq);\n                    noticeSeq = groupMsgArray[j].NoticeSeq;\n                }\n                groupMsgArray[j].Event = eventType;\n                groupMsgMap[groupMsgArray[j].ToGroupId].msgs.push(groupMsgArray[j]); //新增一条消息\n                if (groupMsgArray[j].MsgSeq < groupMsgs.min) {\n                    //记录最小的消息seq\n                    groupMsgMap[groupMsgArray[j].ToGroupId].min = groupMsgArray[j].MsgSeq;\n                }\n                if (groupMsgArray[j].MsgSeq > groupMsgs.max) {\n                    //记录最大的消息seq\n                    groupMsgMap[groupMsgArray[j].ToGroupId].max = groupMsgArray[j].MsgSeq;\n                }\n            }\n\n            for (var groupId in groupMsgMap) {\n                new_group_msgs = addGroupMsgList(groupMsgMap[groupId].msgs, new_group_msgs);\n            }\n            if (new_group_msgs.length) {\n                MsgStore.updateTimeline();\n            }\n            if (onMsgCallback && new_group_msgs.length) onMsgCallback(new_group_msgs);\n        };\n\n        //处理收到的群普通和提示消息\n        var handlerOrdinaryAndTipGroupMsgs = function handlerOrdinaryAndTipGroupMsgs(eventType, groupMsgArray) {\n            var groupMsgMap = {}; //保存收到的群消息信息（群号，最小，最大消息seq，消息列表）\n            var new_group_msgs = [];\n            var minGroupMsgSeq = 99999999;\n            var maxGroupMsgSeq = -1;\n            for (var j in groupMsgArray) {\n\n                var groupMsgs = groupMsgMap[groupMsgArray[j].ToGroupId];\n                if (!groupMsgs) {\n                    groupMsgs = groupMsgMap[groupMsgArray[j].ToGroupId] = {\n                        \"min\": minGroupMsgSeq, //收到新消息最小seq\n                        \"max\": maxGroupMsgSeq, //收到新消息最大seq\n                        \"msgs\": [] //收到的新消息\n                    };\n                }\n                //更新长轮询的群NoticeSeq\n                if (groupMsgArray[j].NoticeSeq > noticeSeq) {\n                    log.warn(\"noticeSeq=\" + noticeSeq + \",msgNoticeSeq=\" + groupMsgArray[j].NoticeSeq);\n                    noticeSeq = groupMsgArray[j].NoticeSeq;\n                }\n                groupMsgArray[j].Event = eventType;\n                groupMsgMap[groupMsgArray[j].ToGroupId].msgs.push(groupMsgArray[j]); //新增一条消息\n                if (groupMsgArray[j].MsgSeq < groupMsgs.min) {\n                    //记录最小的消息seq\n                    groupMsgMap[groupMsgArray[j].ToGroupId].min = groupMsgArray[j].MsgSeq;\n                }\n                if (groupMsgArray[j].MsgSeq > groupMsgs.max) {\n                    //记录最大的消息seq\n                    groupMsgMap[groupMsgArray[j].ToGroupId].max = groupMsgArray[j].MsgSeq;\n                }\n            }\n\n            for (var groupId in groupMsgMap) {\n                new_group_msgs = addGroupMsgList(groupMsgMap[groupId].msgs, new_group_msgs);\n            }\n            if (new_group_msgs.length) {\n                MsgStore.updateTimeline();\n            }\n            if (onMsgCallback && new_group_msgs.length) onMsgCallback(new_group_msgs);\n        };\n\n        //处理新的群提示消息\n        var handlerGroupTips = function handlerGroupTips(groupTips) {\n            var new_group_msgs = [];\n            for (var o in groupTips) {\n                var groupTip = groupTips[o];\n                //添加event字段\n                groupTip.Event = LONG_POLLINNG_EVENT_TYPE.GROUP_TIP;\n                //更新群消息通知seq\n                if (groupTip.NoticeSeq > noticeSeq) {\n                    noticeSeq = groupTip.NoticeSeq;\n                }\n                var msg = handlerGroupMsg(groupTip, false, true);\n                if (msg) {\n                    new_group_msgs.push(msg);\n                }\n            }\n            if (new_group_msgs.length) {\n                MsgStore.updateTimeline();\n            }\n            if (onMsgCallback && new_group_msgs.length) onMsgCallback(new_group_msgs);\n        };\n\n        //处理新的群系统消息\n        //isNeedValidRepeatMsg 是否需要判重\n        var handlerGroupSystemMsgs = function handlerGroupSystemMsgs(groupSystemMsgs, isNeedValidRepeatMsg) {\n            for (var k in groupSystemMsgs) {\n                var groupTip = groupSystemMsgs[k];\n                var groupReportTypeMsg = groupTip.MsgBody;\n                var reportType = groupReportTypeMsg.ReportType;\n                //当长轮询返回的群系统消息，才需要更新群消息通知seq\n                if (isNeedValidRepeatMsg == false && groupTip.NoticeSeq && groupTip.NoticeSeq > noticeSeq) {\n                    noticeSeq = groupTip.NoticeSeq;\n                }\n                var toAccount = groupTip.GroupInfo.To_Account;\n                //过滤本不应该给自己的系统消息\n                /*if (!toAccount || toAccount != ctx.identifier) {\n                 log.error(\"收到本不应该给自己的系统消息: To_Account=\" + toAccount);\n                 continue;\n                 }*/\n                if (isNeedValidRepeatMsg) {\n                    //var key=groupTip.ToGroupId+\"_\"+reportType+\"_\"+groupTip.MsgTimeStamp+\"_\"+groupReportTypeMsg.Operator_Account;\n                    var key = groupTip.ToGroupId + \"_\" + reportType + \"_\" + groupReportTypeMsg.Operator_Account;\n                    var isExist = groupSystemMsgsCache[key];\n                    if (isExist) {\n                        log.warn(\"收到重复的群系统消息：key=\" + key);\n                        continue;\n                    }\n                    groupSystemMsgsCache[key] = true;\n                }\n\n                var notify = {\n                    \"SrcFlag\": 0,\n                    \"ReportType\": reportType,\n                    \"GroupId\": groupTip.ToGroupId,\n                    \"GroupName\": groupTip.GroupInfo.GroupName,\n                    \"Operator_Account\": groupReportTypeMsg.Operator_Account,\n                    \"MsgTime\": groupTip.MsgTimeStamp,\n                    \"groupReportTypeMsg\": groupReportTypeMsg\n                };\n                switch (reportType) {\n                    case GROUP_SYSTEM_TYPE.JOIN_GROUP_REQUEST:\n                        //申请加群(只有管理员会接收到)\n                        notify[\"RemarkInfo\"] = groupReportTypeMsg.RemarkInfo;\n                        notify[\"MsgKey\"] = groupReportTypeMsg.MsgKey;\n                        notify[\"Authentication\"] = groupReportTypeMsg.Authentication;\n                        notify[\"UserDefinedField\"] = groupTip.UserDefinedField;\n                        notify[\"From_Account\"] = groupTip.From_Account;\n                        notify[\"MsgSeq\"] = groupTip.ClientSeq;\n                        notify[\"MsgRandom\"] = groupTip.MsgRandom;\n                        break;\n                    case GROUP_SYSTEM_TYPE.JOIN_GROUP_ACCEPT: //申请加群被同意(只有申请人自己接收到)\n                    case GROUP_SYSTEM_TYPE.JOIN_GROUP_REFUSE:\n                        //申请加群被拒绝(只有申请人自己接收到)\n                        notify[\"RemarkInfo\"] = groupReportTypeMsg.RemarkInfo;\n                        break;\n                    case GROUP_SYSTEM_TYPE.KICK: //被管理员踢出群(只有被踢者接收到)\n                    case GROUP_SYSTEM_TYPE.DESTORY: //群被解散(全员接收)\n                    case GROUP_SYSTEM_TYPE.CREATE: //创建群(创建者接收, 不展示)\n                    case GROUP_SYSTEM_TYPE.INVITED_JOIN_GROUP_REQUEST: //邀请加群(被邀请者接收)\n                    case GROUP_SYSTEM_TYPE.INVITED_JOIN_GROUP_REQUEST_AGREE: //邀请加群(被邀请者需同意)\n                    case GROUP_SYSTEM_TYPE.QUIT: //主动退群(主动退出者接收, 不展示)\n                    case GROUP_SYSTEM_TYPE.SET_ADMIN: //群设置管理员(被设置者接收)\n                    case GROUP_SYSTEM_TYPE.CANCEL_ADMIN: //取消管理员(被取消者接收)\n                    case GROUP_SYSTEM_TYPE.REVOKE:\n                        //群已被回收(全员接收, 不展示)\n                        break;\n                    case GROUP_SYSTEM_TYPE.READED:\n                        //群消息已读同步\n                        break;\n                    case GROUP_SYSTEM_TYPE.CUSTOM:\n                        //用户自定义通知(默认全员接收)\n                        notify[\"MsgSeq\"] = groupTip.MsgSeq;\n                        notify[\"UserDefinedField\"] = groupReportTypeMsg.UserDefinedField;\n                        break;\n                    default:\n                        log.error(\"未知群系统消息类型：reportType=\" + reportType);\n                        break;\n                }\n\n                if (isNeedValidRepeatMsg) {\n                    //注释只收取一种通知\n                    // if (reportType == GROUP_SYSTEM_TYPE.JOIN_GROUP_REQUEST) {\n                    //回调\n                    if (onGroupSystemNotifyCallbacks[reportType]) {\n                        onGroupSystemNotifyCallbacks[reportType](notify);\n                    } else {\n                        log.error(\"未知群系统消息类型：reportType=\" + reportType);\n                    }\n                    //}\n                } else {\n                    //回调\n                    if (onGroupSystemNotifyCallbacks[reportType]) {\n                        if (reportType == GROUP_SYSTEM_TYPE.READED) {\n                            var arr = notify.groupReportTypeMsg.GroupReadInfoArray;\n                            for (var i = 0, l = arr.length; i < l; i++) {\n                                var item = arr[i];\n                                onGroupSystemNotifyCallbacks[reportType](item);\n                            }\n                        } else {\n                            onGroupSystemNotifyCallbacks[reportType](notify);\n                        }\n                    }\n                }\n            } //loop\n        };\n\n        //处理新的好友系统通知\n        //isNeedValidRepeatMsg 是否需要判重\n        var handlerFriendSystemNotices = function handlerFriendSystemNotices(friendSystemNotices, isNeedValidRepeatMsg) {\n            var friendNotice, type, notify;\n            for (var k in friendSystemNotices) {\n                friendNotice = friendSystemNotices[k];\n                type = friendNotice.PushType;\n                //当长轮询返回的群系统消息，才需要更新通知seq\n                if (isNeedValidRepeatMsg == false && friendNotice.NoticeSeq && friendNotice.NoticeSeq > noticeSeq) {\n                    noticeSeq = friendNotice.NoticeSeq;\n                }\n                notify = {\n                    'Type': type\n                };\n                switch (type) {\n                    case FRIEND_NOTICE_TYPE.FRIEND_ADD:\n                        //好友表增加\n                        notify[\"Accounts\"] = friendNotice.FriendAdd_Account;\n                        break;\n                    case FRIEND_NOTICE_TYPE.FRIEND_DELETE:\n                        //好友表删除\n                        notify[\"Accounts\"] = friendNotice.FriendDel_Account;\n                        break;\n                    case FRIEND_NOTICE_TYPE.PENDENCY_ADD:\n                        //未决增加\n                        notify[\"PendencyList\"] = friendNotice.PendencyAdd;\n                        break;\n                    case FRIEND_NOTICE_TYPE.PENDENCY_DELETE:\n                        //未决删除\n                        notify[\"Accounts\"] = friendNotice.FrienPencydDel_Account;\n                        break;\n                    case FRIEND_NOTICE_TYPE.BLACK_LIST_ADD:\n                        //黑名单增加\n                        notify[\"Accounts\"] = friendNotice.BlackListAdd_Account;\n                        break;\n                    case FRIEND_NOTICE_TYPE.BLACK_LIST_DELETE:\n                        //黑名单删除\n                        notify[\"Accounts\"] = friendNotice.BlackListDel_Account;\n                        break;\n                    /*case FRIEND_NOTICE_TYPE.PENDENCY_REPORT://未决已读上报\n                    break;\n                    case FRIEND_NOTICE_TYPE.FRIEND_UPDATE://好友数据更新\n                    break;\n                    */\n                    default:\n                        log.error(\"未知好友系统通知类型：friendNotice=\" + JSON.stringify(friendNotice));\n                        break;\n                }\n\n                if (isNeedValidRepeatMsg) {\n                    if (type == FRIEND_NOTICE_TYPE.PENDENCY_ADD) {\n                        //回调\n                        if (onFriendSystemNotifyCallbacks[type]) onFriendSystemNotifyCallbacks[type](notify);\n                    }\n                } else {\n                    //回调\n                    if (onFriendSystemNotifyCallbacks[type]) onFriendSystemNotifyCallbacks[type](notify);\n                }\n            } //loop\n        };\n\n        //处理新的资料系统通知\n        //isNeedValidRepeatMsg 是否需要判重\n        var handlerProfileSystemNotices = function handlerProfileSystemNotices(profileSystemNotices, isNeedValidRepeatMsg) {\n            var profileNotice, type, notify;\n            for (var k in profileSystemNotices) {\n                profileNotice = profileSystemNotices[k];\n                type = profileNotice.PushType;\n                //当长轮询返回的群系统消息，才需要更新通知seq\n                if (isNeedValidRepeatMsg == false && profileNotice.NoticeSeq && profileNotice.NoticeSeq > noticeSeq) {\n                    noticeSeq = profileNotice.NoticeSeq;\n                }\n                notify = {\n                    'Type': type\n                };\n                switch (type) {\n                    case PROFILE_NOTICE_TYPE.PROFILE_MODIFY:\n                        //资料修改\n                        notify[\"Profile_Account\"] = profileNotice.Profile_Account;\n                        notify[\"ProfileList\"] = profileNotice.ProfileList;\n                        break;\n                    default:\n                        log.error(\"未知资料系统通知类型：profileNotice=\" + JSON.stringify(profileNotice));\n                        break;\n                }\n\n                if (isNeedValidRepeatMsg) {\n                    if (type == PROFILE_NOTICE_TYPE.PROFILE_MODIFY) {\n                        //回调\n                        if (onProfileSystemNotifyCallbacks[type]) onProfileSystemNotifyCallbacks[type](notify);\n                    }\n                } else {\n                    //回调\n                    if (onProfileSystemNotifyCallbacks[type]) onProfileSystemNotifyCallbacks[type](notify);\n                }\n            } //loop\n        };\n\n        //处理新的群系统消息(用于直播大群长轮询)\n        var handlerGroupSystemMsg = function handlerGroupSystemMsg(groupTip) {\n            var groupReportTypeMsg = groupTip.MsgBody;\n            var reportType = groupReportTypeMsg.ReportType;\n            var toAccount = groupTip.GroupInfo.To_Account;\n            //过滤本不应该给自己的系统消息\n            //if(!toAccount || toAccount!=ctx.identifier){\n            //    log.error(\"收到本不应该给自己的系统消息: To_Account=\"+toAccount);\n            //    continue;\n            //}\n            var notify = {\n                \"SrcFlag\": 1,\n                \"ReportType\": reportType,\n                \"GroupId\": groupTip.ToGroupId,\n                \"GroupName\": groupTip.GroupInfo.GroupName,\n                \"Operator_Account\": groupReportTypeMsg.Operator_Account,\n                \"MsgTime\": groupTip.MsgTimeStamp\n            };\n            switch (reportType) {\n                case GROUP_SYSTEM_TYPE.JOIN_GROUP_REQUEST:\n                    //申请加群(只有管理员会接收到)\n                    notify[\"RemarkInfo\"] = groupReportTypeMsg.RemarkInfo;\n                    notify[\"MsgKey\"] = groupReportTypeMsg.MsgKey;\n                    notify[\"Authentication\"] = groupReportTypeMsg.Authentication;\n                    notify[\"UserDefinedField\"] = groupTip.UserDefinedField;\n                    notify[\"From_Account\"] = groupTip.From_Account;\n                    notify[\"MsgSeq\"] = groupTip.ClientSeq;\n                    notify[\"MsgRandom\"] = groupTip.MsgRandom;\n                    break;\n                case GROUP_SYSTEM_TYPE.JOIN_GROUP_ACCEPT: //申请加群被同意(只有申请人自己接收到)\n                case GROUP_SYSTEM_TYPE.JOIN_GROUP_REFUSE:\n                    //申请加群被拒绝(只有申请人自己接收到)\n                    notify[\"RemarkInfo\"] = groupReportTypeMsg.RemarkInfo;\n                    break;\n                case GROUP_SYSTEM_TYPE.KICK: //被管理员踢出群(只有被踢者接收到)\n                case GROUP_SYSTEM_TYPE.DESTORY: //群被解散(全员接收)\n                case GROUP_SYSTEM_TYPE.CREATE: //创建群(创建者接收, 不展示)\n                case GROUP_SYSTEM_TYPE.INVITED_JOIN_GROUP_REQUEST: //邀请加群(被邀请者接收)\n                case GROUP_SYSTEM_TYPE.INVITED_JOIN_GROUP_REQUEST_AGREE: //邀请加群(被邀请者需要同意)\n                case GROUP_SYSTEM_TYPE.QUIT: //主动退群(主动退出者接收, 不展示)\n                case GROUP_SYSTEM_TYPE.SET_ADMIN: //群设置管理员(被设置者接收)\n                case GROUP_SYSTEM_TYPE.CANCEL_ADMIN: //取消管理员(被取消者接收)\n                case GROUP_SYSTEM_TYPE.REVOKE:\n                    //群已被回收(全员接收, 不展示)\n                    break;\n                case GROUP_SYSTEM_TYPE.CUSTOM:\n                    //用户自定义通知(默认全员接收)\n                    notify[\"MsgSeq\"] = groupTip.MsgSeq;\n                    notify[\"UserDefinedField\"] = groupReportTypeMsg.UserDefinedField;\n                    break;\n                default:\n                    log.error(\"未知群系统消息类型：reportType=\" + reportType);\n                    break;\n            }\n            //回调\n            if (onGroupSystemNotifyCallbacks[reportType]) onGroupSystemNotifyCallbacks[reportType](notify);\n        };\n\n        //处理C2C EVENT 消息通道Array\n        var handlerC2cNotifyMsgArray = function handlerC2cNotifyMsgArray(arr) {\n            for (var i = 0, l = arr.length; i < l; i++) {\n                handlerC2cEventMsg(arr[i]);\n            }\n        };\n\n        //处理C2C EVENT 消息通道Item\n        /*\n            {\n                \"ActionStatus\": \"OK\",\n                \"ErrorInfo\": \"\",\n                \"ErrorCode\": 0,\n                \"EventArray\": [{\n                    \"Event\": 10,\n                    \"C2cNotifyMsgArray\": [{\n                        \"SubMsgType\": 96,\n                        \"NoticeSeq\": 2,\n                        \"KickoutMsgNotify\": {\n                            \"To_Account\": \"22\",\n                            \"SdkAppid\": 1400111560,\n                            \"Instid\": 537042377\n                        }\n                    }]\n                }],\n                \"NextTimeOut\": 5\n            }\n        */\n        var handlerC2cEventMsg = function handlerC2cEventMsg(notify) {\n            var subType = notify.SubMsgType;\n            switch (subType) {\n                case C2C_EVENT_SUB_TYPE.READED:\n                    log.warn(\"C2C已读消息通知\");\n                    if (notify.ReadC2cMsgNotify && notify.ReadC2cMsgNotify.UinPairReadArray && onC2cEventCallbacks[subType]) {\n                        for (var i = 0, l = notify.ReadC2cMsgNotify.UinPairReadArray.length; i < l; i++) {\n                            var item = notify.ReadC2cMsgNotify.UinPairReadArray[i];\n                            onC2cEventCallbacks[subType](item);\n                        }\n                    }\n                    break;\n                case C2C_EVENT_SUB_TYPE.KICKEDOUT:\n                    log.warn(\"多终端互踢通知\");\n                    proto_logout('instance');\n                    if (onC2cEventCallbacks[subType]) {\n                        onC2cEventCallbacks[subType]();\n                    }\n                    break;\n                default:\n                    log.error(\"未知C2c系统消息：subType=\" + subType);\n                    break;\n            }\n        };\n\n        //长轮询\n        this.longPolling = function (cbOk, cbErr) {\n\n            var opts = {\n                'Timeout': longPollingDefaultTimeOut / 1000,\n                'Cookie': {\n                    'NotifySeq': notifySeq,\n                    'NoticeSeq': noticeSeq\n                }\n            };\n            if (LongPollingId) {\n                opts.Cookie.LongPollingId = LongPollingId;\n                doPolling();\n            } else {\n                proto_getLongPollingId({}, function (resp) {\n                    LongPollingId = opts.Cookie.LongPollingId = resp.LongPollingId;\n                    //根据回包设置超时时间，超时时长不能>60秒，因为webkit手机端的最长超时时间不能大于60s\n                    longPollingDefaultTimeOut = resp.Timeout > 60 ? longPollingDefaultTimeOut : resp.Timeout * 1000;\n                    doPolling();\n                });\n            }\n\n            function doPolling() {\n                proto_longPolling(opts, function (resp) {\n\n                    for (var i in resp.EventArray) {\n                        var e = resp.EventArray[i];\n                        switch (e.Event) {\n                            case LONG_POLLINNG_EVENT_TYPE.C2C:\n                                //c2c消息通知\n                                //更新C2C消息通知seq\n                                notifySeq = e.NotifySeq;\n                                log.warn(\"longpolling: received new c2c msg\");\n                                //获取新消息\n                                MsgManager.syncMsgs();\n                                break;\n                            case LONG_POLLINNG_EVENT_TYPE.GROUP_COMMON:\n                                //普通群消息通知\n                                log.warn(\"longpolling: received new group msgs\");\n                                handlerOrdinaryAndTipGroupMsgs(e.Event, e.GroupMsgArray);\n                                break;\n                            case LONG_POLLINNG_EVENT_TYPE.GROUP_TIP:\n                                //（全员广播）群提示消息\n                                log.warn(\"longpolling: received new group tips\");\n                                handlerOrdinaryAndTipGroupMsgs(e.Event, e.GroupTips);\n                                break;\n                            case LONG_POLLINNG_EVENT_TYPE.GROUP_TIP2:\n                                //群提示消息\n                                log.warn(\"longpolling: received new group tips\");\n                                handlerOrdinaryAndTipGroupMsgs(e.Event, e.GroupTips);\n                                break;\n                            case LONG_POLLINNG_EVENT_TYPE.GROUP_SYSTEM:\n                                //（多终端同步）群系统消息\n                                log.warn(\"longpolling: received new group system msgs\");\n                                //false 表示 通过长轮询收到的群系统消息，可以不判重\n                                handlerGroupSystemMsgs(e.GroupTips, false);\n                                break;\n                            case LONG_POLLINNG_EVENT_TYPE.FRIEND_NOTICE:\n                                //好友系统通知\n                                log.warn(\"longpolling: received new friend system notice\");\n                                //false 表示 通过长轮询收到的好友系统通知，可以不判重\n                                handlerFriendSystemNotices(e.FriendListMod, false);\n                                break;\n                            case LONG_POLLINNG_EVENT_TYPE.PROFILE_NOTICE:\n                                //资料系统通知\n                                log.warn(\"longpolling: received new profile system notice\");\n                                //false 表示 通过长轮询收到的资料系统通知，可以不判重\n                                handlerProfileSystemNotices(e.ProfileDataMod, false);\n                                break;\n                            case LONG_POLLINNG_EVENT_TYPE.C2C_COMMON:\n                                //c2c消息通知\n                                noticeSeq = e.C2cMsgArray[0].NoticeSeq;\n                                //更新C2C消息通知seq\n                                log.warn(\"longpolling: received new c2c_common msg\", noticeSeq);\n                                handlerOrdinaryAndTipC2cMsgs(e.Event, e.C2cMsgArray);\n                                break;\n                            case LONG_POLLINNG_EVENT_TYPE.C2C_EVENT:\n                                //c2c已读消息通知\n                                noticeSeq = e.C2cNotifyMsgArray[0].NoticeSeq;\n                                log.warn(\"longpolling: received new c2c_event msg\");\n                                handlerC2cNotifyMsgArray(e.C2cNotifyMsgArray);\n                                break;\n                            default:\n                                log.error(\"longpolling收到未知新消息类型: Event=\" + e.Event);\n                                break;\n                        }\n                    }\n                    var successInfo = {\n                        'ActionStatus': ACTION_STATUS.OK,\n                        'ErrorCode': 0\n                    };\n                    updatecLongPollingStatus(successInfo);\n                }, function (err) {\n                    //log.error(err);\n                    updatecLongPollingStatus(err);\n                    if (cbErr) cbErr(err);\n                });\n            }\n        };\n\n        //大群 长轮询\n        this.bigGroupLongPolling = function (GroupId, cbOk, cbErr) {\n            // if( !GroupId ){\n            //     for(var a in bigGroupLongPollingMsgMap){\n            //         this.bigGroupLongPolling( a )\n            //     }\n            //     return;\n            // }\n            // var GroupId = BigGroupId;\n            var opts = {\n                'USP': 1,\n                'StartSeq': bigGroupLongPollingStartSeqMap[GroupId], //请求拉消息的起始seq\n                'HoldTime': bigGroupLongPollingHoldTime, //客户端长轮询的超时时间，单位是秒\n                'Key': bigGroupLongPollingKeyMap[GroupId] //客户端加入群组后收到的的Key\n            };\n\n            proto_bigGroupLongPolling(opts, function (resp) {\n                // if (GroupId != BigGroupId) return;\n\n                var msgObjList = [];\n                bigGroupLongPollingStartSeqMap[GroupId] = resp.NextSeq;\n                bigGroupLongPollingHoldTime = resp.HoldTime;\n                bigGroupLongPollingKeyMap[GroupId] = resp.Key;\n\n                if (resp.RspMsgList && resp.RspMsgList.length > 0) {\n                    var msgCount = 0,\n                        msgInfo,\n                        event,\n                        msg;\n                    for (var i = resp.RspMsgList.length - 1; i >= 0; i--) {\n                        msgInfo = resp.RspMsgList[i];\n                        //后台这里做了调整，缩短字段名，以下是兼容代码\n                        var keyMap = {\n                            \"F_Account\": \"From_Account\",\n                            \"T_Account\": \"To_Account\",\n                            \"FAType\": \"EnumFrom_AccountType\",\n                            \"TAType\": \"EnumTo_AccountType\",\n                            \"GCode\": \"GroupCode\",\n                            \"GName\": \"GroupName\",\n                            \"GId\": \"GroupId\",\n                            \"MFlg\": \"MsgFlag\",\n                            \"FAEInfo\": \"MsgFrom_AccountExtraInfo\",\n                            \"Evt\": \"Event\",\n                            \"GInfo\": \"GroupInfo\",\n                            \"BPlc\": \"IsPlaceMsg\",\n                            \"MBody\": \"MsgBody\",\n                            \"Pri\": \"MsgPriority\",\n                            \"Rdm\": \"MsgRandom\",\n                            \"MSeq\": \"MsgSeq\",\n                            \"TStp\": \"MsgTimeStamp\",\n                            \"TGId\": \"ToGroupId\",\n                            \"UEInfo\": \"UinExtInfo\",\n                            \"UId\": \"UserId\",\n                            \"BSys\": \"IsSystemMsg\",\n                            \"FAHUrl\": \"From_AccountHeadurl\",\n                            \"FANick\": \"From_AccountNick\"\n                        };\n                        msgInfo = tool.replaceObject(keyMap, msgInfo);\n                        //如果是已经删除的消息或者发送者帐号为空或者消息内容为空\n                        //IsPlaceMsg=1\n                        if (msgInfo.IsPlaceMsg || !msgInfo.From_Account || !msgInfo.MsgBody || msgInfo.MsgBody.length == 0) {\n                            continue;\n                        }\n\n                        event = msgInfo.Event; //群消息类型\n                        switch (event) {\n                            case LONG_POLLINNG_EVENT_TYPE.GROUP_COMMON:\n                                //群普通消息\n                                log.info(\"bigGroupLongPolling: return new group msg\");\n                                msg = handlerGroupMsg(msgInfo, false, false);\n                                msg && msgObjList.push(msg);\n                                msgCount = msgCount + 1;\n                                break;\n                            case LONG_POLLINNG_EVENT_TYPE.GROUP_TIP: //群提示消息\n                            case LONG_POLLINNG_EVENT_TYPE.GROUP_TIP2:\n                                //群提示消息\n                                log.info(\"bigGroupLongPolling: return new group tip\");\n                                msg = handlerGroupMsg(msgInfo, false, false);\n                                msg && msgObjList.push(msg);\n                                //msgCount=msgCount+1;\n                                break;\n                            case LONG_POLLINNG_EVENT_TYPE.GROUP_SYSTEM:\n                                //群系统消息\n                                log.info(\"bigGroupLongPolling: new group system msg\");\n                                handlerGroupSystemMsg(msgInfo);\n                                break;\n                            default:\n                                log.error(\"bigGroupLongPolling收到未知新消息类型: Event=\" + event);\n                                break;\n                        }\n                    } // for loop\n                    if (msgCount > 0) {\n                        MsgManager.setBigGroupLongPollingMsgMap(msgInfo.ToGroupId, msgCount); //\n                        log.warn(\"current bigGroupLongPollingMsgMap: \" + JSON.stringify(bigGroupLongPollingMsgMap));\n                    }\n                }\n                curBigGroupLongPollingRetErrorCount = 0;\n                //返回连接状态\n                var successInfo = {\n                    'ActionStatus': ACTION_STATUS.OK,\n                    'ErrorCode': CONNECTION_STATUS.ON,\n                    'ErrorInfo': 'connection is ok...'\n                };\n                ConnManager.callBack(successInfo);\n\n                if (cbOk) cbOk(msgObjList);else if (onBigGroupMsgCallback) onBigGroupMsgCallback(msgObjList); //返回新消息\n\n                //重新启动长轮询\n                bigGroupLongPollingOn && MsgManager.bigGroupLongPolling(GroupId);\n            }, function (err) {\n                if (err.ErrorCode == longPollingPackageTooLargeErrorCode) {\n                    bigGroupLongPollingStartSeqMap[GroupId] = 0;\n                } else if (err.ErrorCode != longPollingTimeOutErrorCode) {\n                    log.error(err.ErrorInfo);\n                    //记录长轮询返回错误次数\n                    curBigGroupLongPollingRetErrorCount++;\n                }\n                if (err.ErrorCode == longPollingKickedErrorCode) {\n                    //登出\n                    log.error(\"多实例登录，被kick\");\n                    if (onKickedEventCall) {\n                        onKickedEventCall();\n                    }\n                }\n                //累计超过一定次数，不再发起长轮询请求\n                if (curBigGroupLongPollingRetErrorCount < LONG_POLLING_MAX_RET_ERROR_COUNT) {\n                    bigGroupLongPollingOn && MsgManager.bigGroupLongPolling(GroupId);\n                } else {\n                    var errInfo = {\n                        'ActionStatus': ACTION_STATUS.FAIL,\n                        'ErrorCode': CONNECTION_STATUS.OFF,\n                        'ErrorInfo': 'connection is off'\n                    };\n                    ConnManager.callBack(errInfo);\n                }\n                if (cbErr) cbErr(err);\n            }, bigGroupLongPollingHoldTime * 1000);\n        };\n\n        //更新连接状态\n        var updatecLongPollingStatus = function updatecLongPollingStatus(errObj) {\n            if (errObj.ErrorCode == 0 || errObj.ErrorCode == longPollingTimeOutErrorCode) {\n                curLongPollingRetErrorCount = 0;\n                longPollingOffCallbackFlag = false;\n                var errorInfo;\n                var isNeedCallback = false;\n                switch (curLongPollingStatus) {\n                    case CONNECTION_STATUS.INIT:\n                        isNeedCallback = true;\n                        curLongPollingStatus = CONNECTION_STATUS.ON;\n                        errorInfo = \"create connection successfully(INIT->ON)\";\n                        break;\n                    case CONNECTION_STATUS.ON:\n                        errorInfo = \"connection is on...(ON->ON)\";\n                        break;\n                    case CONNECTION_STATUS.RECONNECT:\n                        curLongPollingStatus = CONNECTION_STATUS.ON;\n                        errorInfo = \"connection is on...(RECONNECT->ON)\";\n                        break;\n                    case CONNECTION_STATUS.OFF:\n                        isNeedCallback = true;\n                        curLongPollingStatus = CONNECTION_STATUS.RECONNECT;\n                        errorInfo = \"reconnect successfully(OFF->RECONNECT)\";\n                        break;\n                }\n                var successInfo = {\n                    'ActionStatus': ACTION_STATUS.OK,\n                    'ErrorCode': curLongPollingStatus,\n                    'ErrorInfo': errorInfo\n                };\n                isNeedCallback && ConnManager.callBack(successInfo);\n                longPollingOn && MsgManager.longPolling();\n            } else if (errObj.ErrorCode == longPollingKickedErrorCode) {\n                //登出\n                log.error(\"多实例登录，被kick\");\n                if (onKickedEventCall) {\n                    onKickedEventCall();\n                }\n            } else {\n                //记录长轮询返回解析json错误次数\n                curLongPollingRetErrorCount++;\n                log.warn(\"longPolling接口第\" + curLongPollingRetErrorCount + \"次报错: \" + errObj.ErrorInfo);\n                //累计超过一定次数\n                if (curLongPollingRetErrorCount <= LONG_POLLING_MAX_RET_ERROR_COUNT) {\n                    setTimeout(startNextLongPolling, 100); //\n                } else {\n                    curLongPollingStatus = CONNECTION_STATUS.OFF;\n                    var errInfo = {\n                        'ActionStatus': ACTION_STATUS.FAIL,\n                        'ErrorCode': CONNECTION_STATUS.OFF,\n                        'ErrorInfo': 'connection is off'\n                    };\n                    longPollingOffCallbackFlag == false && ConnManager.callBack(errInfo);\n                    longPollingOffCallbackFlag = true;\n                    log.warn(longPollingIntervalTime + \"毫秒之后,SDK会发起新的longPolling请求...\");\n                    setTimeout(startNextLongPolling, longPollingIntervalTime); //长轮询接口报错次数达到一定值，每间隔5s发起新的长轮询\n                }\n            }\n        };\n\n        //处理收到的普通C2C消息\n        var handlerOrdinaryAndTipC2cMsgs = function handlerOrdinaryAndTipC2cMsgs(eventType, C2cMsgArray) {\n            //处理c2c消息\n            var notifyInfo = [];\n            var msgInfos = [];\n            msgInfos = C2cMsgArray; //返回的消息列表\n            // MsgStore.cookie = resp.Cookie;//cookies，记录当前读到的最新消息位置\n\n            for (var i in msgInfos) {\n                var msgInfo = msgInfos[i];\n                var isSendMsg, id;\n                var headUrl = msgInfo.From_AccountHeadurl || '';\n                if (msgInfo.From_Account == ctx.identifier) {\n                    //当前用户发送的消息\n                    isSendMsg = true;\n                    id = msgInfo.To_Account; //读取接收者信息\n                } else {\n                    //当前用户收到的消息\n                    isSendMsg = false;\n                    id = msgInfo.From_Account; //读取发送者信息\n                }\n                var sess = MsgStore.sessByTypeId(SESSION_TYPE.C2C, id);\n                if (!sess) {\n                    sess = new Session(SESSION_TYPE.C2C, id, id, headUrl, 0, 0);\n                }\n                var msg = new Msg(sess, isSendMsg, msgInfo.MsgSeq, msgInfo.MsgRandom, msgInfo.MsgTimeStamp, msgInfo.From_Account, C2C_MSG_SUB_TYPE.COMMON, msgInfo.From_AccountNick, headUrl);\n                var msgBody = null;\n                var msgContent = null;\n                var msgType = null;\n                for (var mi in msgInfo.MsgBody) {\n                    msgBody = msgInfo.MsgBody[mi];\n                    msgType = msgBody.MsgType;\n                    switch (msgType) {\n                        case MSG_ELEMENT_TYPE.TEXT:\n                            msgContent = new Msg.Elem.Text(msgBody.MsgContent.Text);\n                            break;\n                        case MSG_ELEMENT_TYPE.FACE:\n                            msgContent = new Msg.Elem.Face(msgBody.MsgContent.Index, msgBody.MsgContent.Data);\n                            break;\n                        case MSG_ELEMENT_TYPE.IMAGE:\n                            msgContent = new Msg.Elem.Images(msgBody.MsgContent.UUID, msgBody.MsgContent.ImageFormat || \"\");\n                            for (var j in msgBody.MsgContent.ImageInfoArray) {\n                                var tempImg = msgBody.MsgContent.ImageInfoArray[j];\n                                msgContent.addImage(new Msg.Elem.Images.Image(tempImg.Type, tempImg.Size, tempImg.Width, tempImg.Height, tempImg.URL));\n                            }\n                            break;\n                        case MSG_ELEMENT_TYPE.SOUND:\n                            if (msgBody.MsgContent) {\n                                msgContent = new Msg.Elem.Sound(msgBody.MsgContent.UUID, msgBody.MsgContent.Second, msgBody.MsgContent.Size, msgInfo.From_Account, msgInfo.To_Account, msgBody.MsgContent.Download_Flag, SESSION_TYPE.C2C);\n                            } else {\n                                msgType = MSG_ELEMENT_TYPE.TEXT;\n                                msgContent = new Msg.Elem.Text('[语音消息]下载地址解析出错');\n                            }\n                            break;\n                        case MSG_ELEMENT_TYPE.LOCATION:\n                            msgContent = new Msg.Elem.Location(msgBody.MsgContent.Longitude, msgBody.MsgContent.Latitude, msgBody.MsgContent.Desc);\n                            break;\n                        case MSG_ELEMENT_TYPE.FILE:\n                        case MSG_ELEMENT_TYPE.FILE + \" \":\n                            msgType = MSG_ELEMENT_TYPE.FILE;\n                            if (msgBody.MsgContent) {\n                                msgContent = new Msg.Elem.File(msgBody.MsgContent.UUID, msgBody.MsgContent.FileName, msgBody.MsgContent.FileSize, msgInfo.From_Account, msgInfo.To_Account, msgBody.MsgContent.Download_Flag, SESSION_TYPE.C2C);\n                            } else {\n                                msgType = MSG_ELEMENT_TYPE.TEXT;\n                                msgContent = new Msg.Elem.Text('[文件消息下载地址解析出错]');\n                            }\n                            break;\n                        case MSG_ELEMENT_TYPE.CUSTOM:\n                            try {\n                                var data = JSON.parse(msgBody.MsgContent.Data);\n                                if (data && data.userAction && data.userAction == FRIEND_WRITE_MSG_ACTION.ING) {\n                                    //过滤安卓或ios的正在输入自定义消息\n                                    continue;\n                                }\n                            } catch (e) {}\n\n                            msgType = MSG_ELEMENT_TYPE.CUSTOM;\n                            msgContent = new Msg.Elem.Custom(msgBody.MsgContent.Data, msgBody.MsgContent.Desc, msgBody.MsgContent.Ext);\n                            break;\n                        default:\n                            msgType = MSG_ELEMENT_TYPE.TEXT;\n                            msgContent = new Msg.Elem.Text('web端暂不支持' + msgBody.MsgType + '消息');\n                            break;\n                    }\n                    msg.elems.push(new Msg.Elem(msgType, msgContent));\n                }\n\n                if (msg.elems.length > 0 && MsgStore.addMsg(msg, true)) {\n                    notifyInfo.push(msg);\n                }\n            } // for loop\n            if (notifyInfo.length > 0) MsgStore.updateTimeline();\n            if (notifyInfo.length > 0) {\n                if (onMsgCallback) onMsgCallback(notifyInfo);\n            }\n        };\n\n        //发起新的长轮询请求\n        var startNextLongPolling = function startNextLongPolling() {\n            longPollingOn && MsgManager.longPolling();\n        };\n\n        //处理未决的加群申请消息列表\n        var handlerApplyJoinGroupSystemMsgs = function handlerApplyJoinGroupSystemMsgs(eventArray) {\n            for (var i in eventArray) {\n                var e = eventArray[i];\n                handlerGroupSystemMsgs(e.GroupTips, true);\n                switch (e.Event) {\n                    case LONG_POLLINNG_EVENT_TYPE.GROUP_SYSTEM:\n                        //（多终端同步）群系统消息\n                        log.warn(\"handlerApplyJoinGroupSystemMsgs： handler new group system msg\");\n                        //true 表示 解决加群申请通知存在重复的问题（已处理的通知，下次登录还会拉到），需要判重\n                        handlerGroupSystemMsgs(e.GroupTips, true);\n                        break;\n                    default:\n                        log.error(\"syncMsgs收到未知的群系统消息类型: Event=\" + e.Event);\n                        break;\n                }\n            }\n        };\n\n        //拉取c2c消息(包含加群未决消息，需要处理)\n        this.syncMsgs = function (cbOk, cbErr) {\n            var notifyInfo = [];\n            var msgInfos = [];\n            //读取C2C消息\n            proto_getMsgs(MsgStore.cookie, MsgStore.syncFlag, function (resp) {\n                //拉取完毕\n                if (resp.SyncFlag == 2) {\n                    MsgStore.syncFlag = 0;\n                }\n                //处理c2c消息\n                msgInfos = resp.MsgList; //返回的消息列表\n                MsgStore.cookie = resp.Cookie; //cookies，记录当前读到的最新消息位置\n\n                for (var i in msgInfos) {\n                    var msgInfo = msgInfos[i];\n                    var isSendMsg, id, headUrl;\n                    if (msgInfo.From_Account == ctx.identifier) {\n                        //当前用户发送的消息\n                        isSendMsg = true;\n                        id = msgInfo.To_Account; //读取接收者信息\n                        headUrl = '';\n                    } else {\n                        //当前用户收到的消息\n                        isSendMsg = false;\n                        id = msgInfo.From_Account; //读取发送者信息\n                        headUrl = '';\n                    }\n                    var sess = MsgStore.sessByTypeId(SESSION_TYPE.C2C, id);\n                    if (!sess) {\n                        sess = new Session(SESSION_TYPE.C2C, id, id, headUrl, 0, 0);\n                    }\n                    var msg = new Msg(sess, isSendMsg, msgInfo.MsgSeq, msgInfo.MsgRandom, msgInfo.MsgTimeStamp, msgInfo.From_Account, C2C_MSG_SUB_TYPE.COMMON, msgInfo.From_AccountNick, msgInfo.From_AccountHeadurl);\n                    var msgBody = null;\n                    var msgContent = null;\n                    var msgType = null;\n                    for (var mi in msgInfo.MsgBody) {\n                        msgBody = msgInfo.MsgBody[mi];\n                        msgType = msgBody.MsgType;\n                        switch (msgType) {\n                            case MSG_ELEMENT_TYPE.TEXT:\n                                msgContent = new Msg.Elem.Text(msgBody.MsgContent.Text);\n                                break;\n                            case MSG_ELEMENT_TYPE.FACE:\n                                msgContent = new Msg.Elem.Face(msgBody.MsgContent.Index, msgBody.MsgContent.Data);\n                                break;\n                            case MSG_ELEMENT_TYPE.IMAGE:\n                                msgContent = new Msg.Elem.Images(msgBody.MsgContent.UUID, msgBody.MsgContent.ImageFormat);\n                                for (var j in msgBody.MsgContent.ImageInfoArray) {\n                                    var tempImg = msgBody.MsgContent.ImageInfoArray[j];\n                                    msgContent.addImage(new Msg.Elem.Images.Image(tempImg.Type, tempImg.Size, tempImg.Width, tempImg.Height, tempImg.URL));\n                                }\n                                break;\n                            case MSG_ELEMENT_TYPE.SOUND:\n                                // var soundUrl = getSoundDownUrl(msgBody.MsgContent.UUID, msgInfo.From_Account);\n                                if (msgBody.MsgContent) {\n                                    msgContent = new Msg.Elem.Sound(msgBody.MsgContent.UUID, msgBody.MsgContent.Second, msgBody.MsgContent.Size, msgInfo.From_Account, msgInfo.To_Account, msgBody.MsgContent.Download_Flag, SESSION_TYPE.C2C);\n                                } else {\n                                    msgType = MSG_ELEMENT_TYPE.TEXT;\n                                    msgContent = new Msg.Elem.Text('[语音消息]下载地址解析出错');\n                                }\n                                break;\n                            case MSG_ELEMENT_TYPE.LOCATION:\n                                msgContent = new Msg.Elem.Location(msgBody.MsgContent.Longitude, msgBody.MsgContent.Latitude, msgBody.MsgContent.Desc);\n                                break;\n                            case MSG_ELEMENT_TYPE.FILE:\n                            case MSG_ELEMENT_TYPE.FILE + \" \":\n                                msgType = MSG_ELEMENT_TYPE.FILE;\n                                // var fileUrl = getFileDownUrl(msgBody.MsgContent.UUID, msgInfo.From_Account, msgBody.MsgContent.FileName);\n                                if (msgBody.MsgContent) {\n                                    msgContent = new Msg.Elem.File(msgBody.MsgContent.UUID, msgBody.MsgContent.FileName, msgBody.MsgContent.FileSize, msgInfo.From_Account, msgInfo.To_Account, msgBody.MsgContent.Download_Flag, SESSION_TYPE.C2C);\n                                } else {\n                                    msgType = MSG_ELEMENT_TYPE.TEXT;\n                                    msgContent = new Msg.Elem.Text('[文件消息下载地址解析出错]');\n                                }\n                                break;\n                            case MSG_ELEMENT_TYPE.CUSTOM:\n                                try {\n                                    var data = JSON.parse(msgBody.MsgContent.Data);\n                                    if (data && data.userAction && data.userAction == FRIEND_WRITE_MSG_ACTION.ING) {\n                                        //过滤安卓或ios的正在输入自定义消息\n                                        continue;\n                                    }\n                                } catch (e) {}\n\n                                msgType = MSG_ELEMENT_TYPE.CUSTOM;\n                                msgContent = new Msg.Elem.Custom(msgBody.MsgContent.Data, msgBody.MsgContent.Desc, msgBody.MsgContent.Ext);\n                                break;\n                            default:\n                                msgType = MSG_ELEMENT_TYPE.TEXT;\n                                msgContent = new Msg.Elem.Text('web端暂不支持' + msgBody.MsgType + '消息');\n                                break;\n                        }\n                        msg.elems.push(new Msg.Elem(msgType, msgContent));\n                    }\n\n                    if (msg.elems.length > 0 && MsgStore.addMsg(msg, true)) {\n                        notifyInfo.push(msg);\n                    }\n                } // for loop\n\n                //处理加群未决申请消息\n                handlerApplyJoinGroupSystemMsgs(resp.EventArray);\n\n                if (notifyInfo.length > 0) MsgStore.updateTimeline();\n                if (cbOk) cbOk(notifyInfo);else if (notifyInfo.length > 0) {\n                    if (onMsgCallback) onMsgCallback(notifyInfo);\n                }\n            }, function (err) {\n                log.error(\"getMsgs failed:\" + err.ErrorInfo);\n                if (cbErr) cbErr(err);\n            });\n        };\n\n        //拉取C2C漫游消息\n        this.getC2CHistoryMsgs = function (options, cbOk, cbErr) {\n\n            if (!options.Peer_Account) {\n                if (cbErr) {\n                    cbErr(tool.getReturnError(\"Peer_Account is empty\", -13));\n                    return;\n                }\n            }\n            if (!options.MaxCnt) {\n                options.MaxCnt = 15;\n            }\n            if (options.MaxCnt <= 0) {\n                if (cbErr) {\n                    cbErr(tool.getReturnError(\"MaxCnt should be greater than 0\", -14));\n                    return;\n                }\n            }\n            if (options.MaxCnt > 15) {\n                if (cbErr) {\n                    cbErr(tool.getReturnError(\"MaxCnt can not be greater than 15\", -15));\n                    return;\n                }\n                return;\n            }\n            if (options.MsgKey == null || options.MsgKey === undefined) {\n                options.MsgKey = '';\n            }\n            var opts = {\n                'Peer_Account': options.Peer_Account,\n                'MaxCnt': options.MaxCnt,\n                'LastMsgTime': options.LastMsgTime,\n                'MsgKey': options.MsgKey\n            };\n            //读取c2c漫游消息\n            proto_getC2CHistoryMsgs(opts, function (resp) {\n                var msgObjList = [];\n                var msgInfos = [];\n                //处理c2c消息\n                msgInfos = resp.MsgList; //返回的消息列表\n                var sess = MsgStore.sessByTypeId(SESSION_TYPE.C2C, options.Peer_Account);\n                if (!sess) {\n                    sess = new Session(SESSION_TYPE.C2C, options.Peer_Account, options.Peer_Account, '', 0, 0);\n                }\n                for (var i in msgInfos) {\n                    var msgInfo = msgInfos[i];\n                    var isSendMsg, id;\n                    var headUrl = msgInfo.From_AccountHeadurl || '';\n                    if (msgInfo.From_Account == ctx.identifier) {\n                        //当前用户发送的消息\n                        isSendMsg = true;\n                        id = msgInfo.To_Account; //读取接收者信息\n                    } else {\n                        //当前用户收到的消息\n                        isSendMsg = false;\n                        id = msgInfo.From_Account; //读取发送者信息\n                    }\n                    var msg = new Msg(sess, isSendMsg, msgInfo.MsgSeq, msgInfo.MsgRandom, msgInfo.MsgTimeStamp, msgInfo.From_Account, C2C_MSG_SUB_TYPE.COMMON, msgInfo.From_AccountNick, headUrl);\n                    var msgBody = null;\n                    var msgContent = null;\n                    var msgType = null;\n                    for (var mi in msgInfo.MsgBody) {\n                        msgBody = msgInfo.MsgBody[mi];\n                        msgType = msgBody.MsgType;\n                        switch (msgType) {\n                            case MSG_ELEMENT_TYPE.TEXT:\n                                msgContent = new Msg.Elem.Text(msgBody.MsgContent.Text);\n                                break;\n                            case MSG_ELEMENT_TYPE.FACE:\n                                msgContent = new Msg.Elem.Face(msgBody.MsgContent.Index, msgBody.MsgContent.Data);\n                                break;\n                            case MSG_ELEMENT_TYPE.IMAGE:\n                                msgContent = new Msg.Elem.Images(msgBody.MsgContent.UUID, msgBody.MsgContent.ImageFormat);\n                                for (var j in msgBody.MsgContent.ImageInfoArray) {\n                                    var tempImg = msgBody.MsgContent.ImageInfoArray[j];\n                                    msgContent.addImage(new Msg.Elem.Images.Image(tempImg.Type, tempImg.Size, tempImg.Width, tempImg.Height, tempImg.URL));\n                                }\n                                break;\n                            case MSG_ELEMENT_TYPE.SOUND:\n\n                                // var soundUrl = getSoundDownUrl(msgBody.MsgContent.UUID, msgInfo.From_Account);\n\n                                if (msgBody.MsgContent) {\n                                    msgContent = new Msg.Elem.Sound(msgBody.MsgContent.UUID, msgBody.MsgContent.Second, msgBody.MsgContent.Size, msgInfo.From_Account, msgInfo.To_Account, msgBody.MsgContent.Download_Flag, SESSION_TYPE.C2C);\n                                } else {\n                                    msgType = MSG_ELEMENT_TYPE.TEXT;\n                                    msgContent = new Msg.Elem.Text('[语音消息]下载地址解析出错');\n                                }\n                                break;\n                            case MSG_ELEMENT_TYPE.LOCATION:\n                                msgContent = new Msg.Elem.Location(msgBody.MsgContent.Longitude, msgBody.MsgContent.Latitude, msgBody.MsgContent.Desc);\n                                break;\n                            case MSG_ELEMENT_TYPE.FILE:\n                            case MSG_ELEMENT_TYPE.FILE + \" \":\n                                msgType = MSG_ELEMENT_TYPE.FILE;\n                                // var fileUrl = getFileDownUrl(msgBody.MsgContent.UUID, msgInfo.From_Account, msgBody.MsgContent.FileName);\n\n                                if (msgBody.MsgContent) {\n                                    msgContent = new Msg.Elem.File(msgBody.MsgContent.UUID, msgBody.MsgContent.FileName, msgBody.MsgContent.FileSize, msgInfo.From_Account, msgInfo.To_Account, msgBody.MsgContent.Download_Flag, SESSION_TYPE.C2C);\n                                } else {\n                                    msgType = MSG_ELEMENT_TYPE.TEXT;\n                                    msgContent = new Msg.Elem.Text('[文件消息下载地址解析出错]');\n                                }\n                                break;\n                            case MSG_ELEMENT_TYPE.CUSTOM:\n                                msgType = MSG_ELEMENT_TYPE.CUSTOM;\n                                msgContent = new Msg.Elem.Custom(msgBody.MsgContent.Data, msgBody.MsgContent.Desc, msgBody.MsgContent.Ext);\n\n                                break;\n                            default:\n                                msgType = MSG_ELEMENT_TYPE.TEXT;\n                                msgContent = new Msg.Elem.Text('web端暂不支持' + msgBody.MsgType + '消息');\n                                break;\n                        }\n                        msg.elems.push(new Msg.Elem(msgType, msgContent));\n                    }\n                    MsgStore.addMsg(msg);\n                    msgObjList.push(msg);\n                } // for loop\n\n                MsgStore.updateTimeline();\n                if (cbOk) {\n\n                    var newResp = {\n                        'Complete': resp.Complete,\n                        'MsgCount': msgObjList.length,\n                        'LastMsgTime': resp.LastMsgTime,\n                        'MsgKey': resp.MsgKey,\n                        'MsgList': msgObjList\n                    };\n                    sess.isFinished(resp.Complete);\n                    cbOk(newResp);\n                }\n            }, function (err) {\n                log.error(\"getC2CHistoryMsgs failed:\" + err.ErrorInfo);\n                if (cbErr) cbErr(err);\n            });\n        };\n\n        //拉群历史消息\n        //不传cbOk 和 cbErr，则会调用新消息回调函数\n        this.syncGroupMsgs = function (options, cbOk, cbErr) {\n            if (options.ReqMsgSeq <= 0) {\n                if (cbErr) {\n                    var errInfo = \"ReqMsgSeq must be greater than 0\";\n                    var error = tool.getReturnError(errInfo, -16);\n                    cbErr(error);\n                }\n                return;\n            }\n            var opts = {\n                'GroupId': options.GroupId,\n                'ReqMsgSeq': options.ReqMsgSeq,\n                'ReqMsgNumber': options.ReqMsgNumber\n            };\n            //读群漫游消息\n            proto_getGroupMsgs(opts, function (resp) {\n                var notifyInfo = [];\n                var group_id = resp.GroupId; //返回的群id\n                var msgInfos = resp.RspMsgList; //返回的消息列表\n                var isFinished = resp.IsFinished;\n\n                if (msgInfos == null || msgInfos === undefined) {\n                    if (cbOk) {\n                        cbOk([]);\n                    }\n                    return;\n                }\n                for (var i = msgInfos.length - 1; i >= 0; i--) {\n                    var msgInfo = msgInfos[i];\n                    //如果是已经删除的消息或者发送者帐号为空或者消息内容为空\n                    //IsPlaceMsg=1\n                    if (msgInfo.IsPlaceMsg || !msgInfo.From_Account || !msgInfo.MsgBody || msgInfo.MsgBody.length == 0) {\n                        continue;\n                    }\n                    var msg = handlerGroupMsg(msgInfo, true, true, isFinished);\n                    if (msg) {\n                        notifyInfo.push(msg);\n                    }\n                } // for loop\n                if (notifyInfo.length > 0) MsgStore.updateTimeline();\n                if (cbOk) cbOk(notifyInfo);else if (notifyInfo.length > 0) {\n                    if (onMsgCallback) onMsgCallback(notifyInfo);\n                }\n            }, function (err) {\n                log.error(\"getGroupMsgs failed:\" + err.ErrorInfo);\n                if (cbErr) cbErr(err);\n            });\n        };\n\n        //处理群消息(普通消息+提示消息)\n        //isSyncGroupMsgs 是否主动拉取群消息标志\n        //isAddMsgFlag 是否需要保存到MsgStore，如果需要，这里会存在判重逻辑\n        var handlerGroupMsg = function handlerGroupMsg(msgInfo, isSyncGroupMsgs, isAddMsgFlag, isFinished) {\n            if (msgInfo.IsPlaceMsg || !msgInfo.From_Account || !msgInfo.MsgBody || msgInfo.MsgBody.length == 0) {\n                return null;\n            }\n            var isSendMsg, id, headUrl, fromAccountNick, fromAccountHeadurl;\n            var group_id = msgInfo.ToGroupId;\n            var group_name = group_id;\n            if (msgInfo.GroupInfo) {\n                //取出群名称\n                if (msgInfo.GroupInfo.GroupName) {\n                    group_name = msgInfo.GroupInfo.GroupName;\n                }\n            }\n            //取出成员昵称\n            fromAccountNick = msgInfo.From_Account;\n            //fromAccountHeadurl = msgInfo.GroupInfo.From_AccountHeadurl;\n            if (msgInfo.GroupInfo) {\n                if (msgInfo.GroupInfo.From_AccountNick) {\n                    fromAccountNick = msgInfo.GroupInfo.From_AccountNick;\n                }\n                if (msgInfo.GroupInfo.From_AccountHeadurl) {\n                    fromAccountHeadurl = msgInfo.GroupInfo.From_AccountHeadurl;\n                } else {\n                    fromAccountHeadurl = null;\n                }\n            }\n            if (msgInfo.From_Account == ctx.identifier) {\n                //当前用户发送的消息\n                isSendMsg = true;\n                id = msgInfo.From_Account; //读取接收者信息\n                headUrl = '';\n            } else {\n                //当前用户收到的消息\n                isSendMsg = false;\n                id = msgInfo.From_Account; //读取发送者信息\n                headUrl = '';\n            }\n            var sess = MsgStore.sessByTypeId(SESSION_TYPE.GROUP, group_id);\n            if (!sess) {\n                sess = new Session(SESSION_TYPE.GROUP, group_id, group_name, headUrl, 0, 0);\n            }\n            if (typeof isFinished !== \"undefined\") {\n                sess.isFinished(isFinished || 0);\n            }\n            var subType = GROUP_MSG_SUB_TYPE.COMMON; //消息类型\n            //群提示消息,重新封装下\n            if (LONG_POLLINNG_EVENT_TYPE.GROUP_TIP == msgInfo.Event || LONG_POLLINNG_EVENT_TYPE.GROUP_TIP2 == msgInfo.Event) {\n                subType = GROUP_MSG_SUB_TYPE.TIP;\n                var groupTip = msgInfo.MsgBody;\n                msgInfo.MsgBody = [];\n                msgInfo.MsgBody.push({\n                    \"MsgType\": MSG_ELEMENT_TYPE.GROUP_TIP,\n                    \"MsgContent\": groupTip\n                });\n            } else if (msgInfo.MsgPriority) {\n                //群点赞消息\n                if (msgInfo.MsgPriority == GROUP_MSG_PRIORITY_TYPE.REDPACKET) {\n                    subType = GROUP_MSG_SUB_TYPE.REDPACKET;\n                } else if (msgInfo.MsgPriority == GROUP_MSG_PRIORITY_TYPE.LOVEMSG) {\n                    subType = GROUP_MSG_SUB_TYPE.LOVEMSG;\n                }\n            }\n            var msg = new Msg(sess, isSendMsg, msgInfo.MsgSeq, msgInfo.MsgRandom, msgInfo.MsgTimeStamp, msgInfo.From_Account, subType, fromAccountNick, fromAccountHeadurl);\n            var msgBody = null;\n            var msgContent = null;\n            var msgType = null;\n            for (var mi in msgInfo.MsgBody) {\n                msgBody = msgInfo.MsgBody[mi];\n                msgType = msgBody.MsgType;\n                switch (msgType) {\n                    case MSG_ELEMENT_TYPE.TEXT:\n                        msgContent = new Msg.Elem.Text(msgBody.MsgContent.Text);\n                        break;\n                    case MSG_ELEMENT_TYPE.FACE:\n                        msgContent = new Msg.Elem.Face(msgBody.MsgContent.Index, msgBody.MsgContent.Data);\n                        break;\n                    case MSG_ELEMENT_TYPE.IMAGE:\n                        msgContent = new Msg.Elem.Images(msgBody.MsgContent.UUID, msgBody.MsgContent.ImageFormat || \"\");\n                        for (var j in msgBody.MsgContent.ImageInfoArray) {\n                            msgContent.addImage(new Msg.Elem.Images.Image(msgBody.MsgContent.ImageInfoArray[j].Type, msgBody.MsgContent.ImageInfoArray[j].Size, msgBody.MsgContent.ImageInfoArray[j].Width, msgBody.MsgContent.ImageInfoArray[j].Height, msgBody.MsgContent.ImageInfoArray[j].URL));\n                        }\n                        break;\n                    case MSG_ELEMENT_TYPE.SOUND:\n                        if (msgBody.MsgContent) {\n                            msgContent = new Msg.Elem.Sound(msgBody.MsgContent.UUID, msgBody.MsgContent.Second, msgBody.MsgContent.Size, msgInfo.From_Account, msgInfo.To_Account, msgBody.MsgContent.Download_Flag, SESSION_TYPE.GROUP);\n                        } else {\n                            msgType = MSG_ELEMENT_TYPE.TEXT;\n                            msgContent = new Msg.Elem.Text('[语音消息]下载地址解析出错');\n                        }\n                        break;\n                    case MSG_ELEMENT_TYPE.LOCATION:\n                        msgContent = new Msg.Elem.Location(msgBody.MsgContent.Longitude, msgBody.MsgContent.Latitude, msgBody.MsgContent.Desc);\n                        break;\n                    case MSG_ELEMENT_TYPE.FILE:\n                    case MSG_ELEMENT_TYPE.FILE + \" \":\n                        msgType = MSG_ELEMENT_TYPE.FILE;\n                        var fileUrl = getFileDownUrl(msgBody.MsgContent.UUID, msgInfo.From_Account, msgBody.MsgContent.FileName);\n\n                        if (msgBody.MsgContent) {\n                            msgContent = new Msg.Elem.File(msgBody.MsgContent.UUID, msgBody.MsgContent.FileName, msgBody.MsgContent.FileSize, msgInfo.From_Account, msgInfo.To_Account, msgBody.MsgContent.Download_Flag, SESSION_TYPE.GROUP);\n                        } else {\n                            msgType = MSG_ELEMENT_TYPE.TEXT;\n                            msgContent = new Msg.Elem.Text('[文件消息]地址解析出错');\n                        }\n                        break;\n                    case MSG_ELEMENT_TYPE.GROUP_TIP:\n                        var opType = msgBody.MsgContent.OpType;\n                        msgContent = new Msg.Elem.GroupTip(opType, msgBody.MsgContent.Operator_Account, group_id, msgInfo.GroupInfo.GroupName, msgBody.MsgContent.List_Account, msgBody.MsgContent.MsgMemberExtraInfo);\n                        if (GROUP_TIP_TYPE.JOIN == opType || GROUP_TIP_TYPE.QUIT == opType) {\n                            //加群或退群时，设置最新群成员数\n                            msgContent.setGroupMemberNum(msgBody.MsgContent.MemberNum);\n                        } else if (GROUP_TIP_TYPE.MODIFY_GROUP_INFO == opType) {\n                            //群资料变更\n                            var tempIsCallbackFlag = false;\n                            var tempNewGroupInfo = {\n                                \"GroupId\": group_id,\n                                \"GroupFaceUrl\": null,\n                                \"GroupName\": null,\n                                \"OwnerAccount\": null,\n                                \"GroupNotification\": null,\n                                \"GroupIntroduction\": null\n                            };\n                            var msgGroupNewInfo = msgBody.MsgContent.MsgGroupNewInfo;\n                            if (msgGroupNewInfo.GroupFaceUrl) {\n                                var tmpNGIFaceUrl = new Msg.Elem.GroupTip.GroupInfo(GROUP_TIP_MODIFY_GROUP_INFO_TYPE.FACE_URL, msgGroupNewInfo.GroupFaceUrl);\n                                msgContent.addGroupInfo(tmpNGIFaceUrl);\n                                tempIsCallbackFlag = true;\n                                tempNewGroupInfo.GroupFaceUrl = msgGroupNewInfo.GroupFaceUrl;\n                            }\n                            if (msgGroupNewInfo.GroupName) {\n                                var tmpNGIName = new Msg.Elem.GroupTip.GroupInfo(GROUP_TIP_MODIFY_GROUP_INFO_TYPE.NAME, msgGroupNewInfo.GroupName);\n                                msgContent.addGroupInfo(tmpNGIName);\n                                tempIsCallbackFlag = true;\n                                tempNewGroupInfo.GroupName = msgGroupNewInfo.GroupName;\n                            }\n                            if (msgGroupNewInfo.Owner_Account) {\n                                var tmpNGIOwner = new Msg.Elem.GroupTip.GroupInfo(GROUP_TIP_MODIFY_GROUP_INFO_TYPE.OWNER, msgGroupNewInfo.Owner_Account);\n                                msgContent.addGroupInfo(tmpNGIOwner);\n                                tempIsCallbackFlag = true;\n                                tempNewGroupInfo.OwnerAccount = msgGroupNewInfo.Owner_Account;\n                            }\n                            if (msgGroupNewInfo.GroupNotification) {\n                                var tmpNGINotification = new Msg.Elem.GroupTip.GroupInfo(GROUP_TIP_MODIFY_GROUP_INFO_TYPE.NOTIFICATION, msgGroupNewInfo.GroupNotification);\n                                msgContent.addGroupInfo(tmpNGINotification);\n                                tempIsCallbackFlag = true;\n                                tempNewGroupInfo.GroupNotification = msgGroupNewInfo.GroupNotification;\n                            }\n                            if (msgGroupNewInfo.GroupIntroduction) {\n                                var tmpNGIIntroduction = new Msg.Elem.GroupTip.GroupInfo(GROUP_TIP_MODIFY_GROUP_INFO_TYPE.INTRODUCTION, msgGroupNewInfo.GroupIntroduction);\n                                msgContent.addGroupInfo(tmpNGIIntroduction);\n                                tempIsCallbackFlag = true;\n                                tempNewGroupInfo.GroupIntroduction = msgGroupNewInfo.GroupIntroduction;\n                            }\n\n                            //回调群资料变化通知方法\n                            if (isSyncGroupMsgs == false && tempIsCallbackFlag && onGroupInfoChangeCallback) {\n                                onGroupInfoChangeCallback(tempNewGroupInfo);\n                            }\n                        } else if (GROUP_TIP_TYPE.MODIFY_MEMBER_INFO == opType) {\n                            //群成员变更\n                            var memberInfos = msgBody.MsgContent.MsgMemberInfo;\n                            for (var n in memberInfos) {\n                                var memberInfo = memberInfos[n];\n                                msgContent.addMemberInfo(new Msg.Elem.GroupTip.MemberInfo(memberInfo.User_Account, memberInfo.ShutupTime));\n                            }\n                        }\n                        break;\n                    case MSG_ELEMENT_TYPE.CUSTOM:\n                        msgType = MSG_ELEMENT_TYPE.CUSTOM;\n                        msgContent = new Msg.Elem.Custom(msgBody.MsgContent.Data, msgBody.MsgContent.Desc, msgBody.MsgContent.Ext);\n                        break;\n                    default:\n                        msgType = MSG_ELEMENT_TYPE.TEXT;\n                        msgContent = new Msg.Elem.Text('web端暂不支持' + msgBody.MsgType + '消息');\n                        break;\n                }\n                msg.elems.push(new Msg.Elem(msgType, msgContent));\n            }\n\n            if (isAddMsgFlag == false) {\n                //不需要保存消息\n                return msg;\n            }\n\n            if (MsgStore.addMsg(msg, true)) {\n                msg.extraInfo = msgInfo.GroupInfo.MsgFrom_AccountExtraInfo;\n                return msg;\n            } else {\n                return null;\n            }\n        };\n\n        //初始化\n        this.init = function (listeners, cbOk, cbErr) {\n            if (!listeners.onMsgNotify) {\n                log.warn('listeners.onMsgNotify is empty');\n            }\n            onMsgCallback = listeners.onMsgNotify;\n\n            if (listeners.onBigGroupMsgNotify) {\n                onBigGroupMsgCallback = listeners.onBigGroupMsgNotify;\n            } else {\n                log.warn('listeners.onBigGroupMsgNotify is empty');\n            }\n\n            if (listeners.onC2cEventNotifys) {\n                onC2cEventCallbacks = listeners.onC2cEventNotifys;\n            } else {\n                log.warn('listeners.onC2cEventNotifys is empty');\n            }\n            if (listeners.onGroupSystemNotifys) {\n                onGroupSystemNotifyCallbacks = listeners.onGroupSystemNotifys;\n            } else {\n                log.warn('listeners.onGroupSystemNotifys is empty');\n            }\n            if (listeners.onGroupInfoChangeNotify) {\n                onGroupInfoChangeCallback = listeners.onGroupInfoChangeNotify;\n            } else {\n                log.warn('listeners.onGroupInfoChangeNotify is empty');\n            }\n            if (listeners.onFriendSystemNotifys) {\n                onFriendSystemNotifyCallbacks = listeners.onFriendSystemNotifys;\n            } else {\n                log.warn('listeners.onFriendSystemNotifys is empty');\n            }\n            if (listeners.onProfileSystemNotifys) {\n                onProfileSystemNotifyCallbacks = listeners.onProfileSystemNotifys;\n            } else {\n                log.warn('listeners.onProfileSystemNotifys is empty');\n            }\n            if (listeners.onKickedEventCall) {\n                onKickedEventCall = listeners.onKickedEventCall;\n            } else {\n                log.warn('listeners.onKickedEventCall is empty');\n            }\n            if (listeners.onLongPullingNotify) {\n                onLongPullingNotify = listeners.onLongPullingNotify;\n            } else {\n                log.warn('listeners.onKickedEventCall is empty');\n            }\n\n            if (listeners.onAppliedDownloadUrl) {\n                onAppliedDownloadUrl = listeners.onAppliedDownloadUrl;\n            } else {\n                log.warn('listeners.onAppliedDownloadUrl is empty');\n            }\n\n            if (!ctx.identifier || !ctx.userSig) {\n                if (cbOk) {\n                    var success = {\n                        'ActionStatus': ACTION_STATUS.OK,\n                        'ErrorCode': 0,\n                        'ErrorInfo': \"login success(no login state)\"\n                    };\n                    cbOk(success);\n                }\n                return;\n            }\n\n            //初始化\n            initMyGroupMaxSeqs(function (resp) {\n                log.info('initMyGroupMaxSeqs success');\n                //初始化文件\n                initIpAndAuthkey(function (initIpAndAuthkeyResp) {\n                    log.info('initIpAndAuthkey success');\n                    if (cbOk) {\n                        log.info('login success(have login state))');\n                        var success = {\n                            'ActionStatus': ACTION_STATUS.OK,\n                            'ErrorCode': 0,\n                            'ErrorInfo': \"login success\"\n                        };\n                        cbOk(success);\n                    }\n                    MsgManager.setLongPollingOn(true); //开启长轮询\n                    longPollingOn && MsgManager.longPolling(cbOk);\n                }, cbErr);\n            }, cbErr);\n        };\n\n        //发消息（私聊或群聊）\n        this.sendMsg = function (msg, cbOk, cbErr) {\n            proto_sendMsg(msg, function (resp) {\n                //私聊时，加入自己的发的消息，群聊时，由于seq和服务器的seq不一样，所以不作处理\n                if (msg.sess.type() == SESSION_TYPE.C2C) {\n                    if (!MsgStore.addMsg(msg)) {\n                        var errInfo = \"sendMsg: addMsg failed!\";\n                        var error = tool.getReturnError(errInfo, -17);\n                        log.error(errInfo);\n                        if (cbErr) cbErr(error);\n                        return;\n                    }\n                    //更新信息流时间\n                    MsgStore.updateTimeline();\n                }\n                if (cbOk) cbOk(resp);\n            }, function (err) {\n                if (cbErr) cbErr(err);\n            });\n        };\n    }();\n\n    //上传文件\n    var FileUploader = new function () {\n        this.fileMd5 = null;\n        //获取文件MD5\n        var getFileMD5 = function getFileMD5(file, cbOk, cbErr) {\n\n            //FileReader pc浏览器兼容性\n            //Feature   Firefox (Gecko) Chrome  Internet Explorer   Opera   Safari\n            //Basic support 3.6 7   10                      12.02   6.0.2\n            var fileReader = null;\n            try {\n                fileReader = new FileReader(); //分块读取文件对象\n            } catch (e) {\n                if (cbErr) {\n                    cbErr(tool.getReturnError('当前浏览器不支持FileReader', -18));\n                    return;\n                }\n            }\n            //file的slice方法，注意它的兼容性，在不同浏览器的写法不同\n            var blobSlice = File.prototype.mozSlice || File.prototype.webkitSlice || File.prototype.slice;\n            if (!blobSlice) {\n                if (cbErr) {\n                    cbErr(tool.getReturnError('当前浏览器不支持FileAPI', -19));\n                    return;\n                }\n            }\n\n            var chunkSize = 2 * 1024 * 1024; //分块大小，2M\n            var chunks = Math.ceil(file.size / chunkSize); //总块数\n            var currentChunk = 0; //当前块数\n            var spark = new SparkMD5(); //获取MD5对象\n\n            fileReader.onload = function (e) {\n                //数据加载完毕事件\n\n                var binaryStr = \"\";\n                var bytes = new Uint8Array(e.target.result);\n                var length = bytes.byteLength;\n                for (var i = 0; i < length; i++) {\n                    binaryStr += String.fromCharCode(bytes[i]); //二进制转换字符串\n                }\n                spark.appendBinary(binaryStr);\n                currentChunk++;\n                if (currentChunk < chunks) {\n                    loadNext(); //读取下一块数据\n                } else {\n                    this.fileMd5 = spark.end(); //得到文件MD5值\n                    if (cbOk) {\n                        cbOk(this.fileMd5);\n                    }\n                }\n            };\n            //分片读取文件\n\n            function loadNext() {\n                var start = currentChunk * chunkSize,\n                    end = start + chunkSize >= file.size ? file.size : start + chunkSize;\n                //根据开始和结束位置，切割文件\n                var b = blobSlice.call(file, start, end);\n                //readAsBinaryString ie浏览器不兼容此方法\n                //fileReader.readAsBinaryString(blobSlice.call(file, start, end));\n                fileReader.readAsArrayBuffer(b); //ie，chrome，firefox等主流浏览器兼容此方法\n            }\n\n            loadNext(); //开始读取\n        };\n        //提交上传图片表单(用于低版本IE9以下)\n        this.submitUploadFileForm = function (options, cbOk, cbErr) {\n            var errInfo;\n            var error;\n            var formId = options.formId;\n            var fileId = options.fileId;\n            var iframeNum = uploadResultIframeId++;\n            var iframeName = \"uploadResultIframe_\" + iframeNum;\n            var toAccount = options.To_Account;\n            var businessType = options.businessType;\n\n            var form = document.getElementById(formId);\n            if (!form) {\n                errInfo = \"获取表单对象为空: formId=\" + formId + \"(formId非法)\";\n                error = tool.getReturnError(errInfo, -20);\n                if (cbErr) cbErr(error);\n                return;\n            }\n\n            var fileObj = document.getElementById(fileId);\n            if (!fileObj) {\n                errInfo = \"获取文件对象为空: fileId=\" + fileId + \"(没有选择文件或者fileId非法)\";\n                error = tool.getReturnError(errInfo, -21);\n                if (cbErr) cbErr(error);\n                return;\n            }\n            //fileObj.type=\"file\";//ie8下不起作用，必须由业务自己设置\n            fileObj.name = \"file\";\n\n            var iframe = document.createElement(\"iframe\");\n            iframe.name = iframeName;\n            iframe.id = iframeName;\n            iframe.style.display = \"none\";\n            document.body.appendChild(iframe);\n\n            var cmdName;\n            if (isAccessFormalEnv()) {\n                cmdName = 'pic_up';\n            } else {\n                cmdName = 'pic_up_test';\n            }\n            var uploadApiUrl = \"https://pic.tim.qq.com/v4/openpic/\" + cmdName + \"?tinyid=\" + ctx.tinyid + \"&a2=\" + ctx.a2 + \"&sdkappid=\" + ctx.sdkAppID + \"&accounttype=\" + ctx.accountType + \"&contenttype=http\";\n            form.action = uploadApiUrl;\n            form.method = 'post';\n            //form.enctype='multipart/form-data';//ie8下不起作用，必须由业务自己设置\n            form.target = iframeName;\n\n            function createFormInput(name, value) {\n                var tempInput = document.createElement(\"input\");\n                tempInput.type = \"hidden\";\n                tempInput.name = name;\n                tempInput.value = value;\n                form.appendChild(tempInput);\n            }\n\n            createFormInput(\"App_Version\", VERSION_INFO.APP_VERSION);\n            createFormInput(\"From_Account\", ctx.identifier);\n            createFormInput(\"To_Account\", toAccount);\n            createFormInput(\"Seq\", nextSeq().toString());\n            createFormInput(\"Timestamp\", unixtime().toString());\n            createFormInput(\"Random\", createRandom().toString());\n            createFormInput(\"Busi_Id\", businessType);\n            createFormInput(\"PkgFlag\", UPLOAD_RES_PKG_FLAG.RAW_DATA.toString());\n            createFormInput(\"Auth_Key\", authkey);\n            createFormInput(\"Server_Ver\", VERSION_INFO.SERVER_VERSION.toString());\n            createFormInput(\"File_Type\", options.fileType);\n\n            //检测iframe.contentWindow.name是否有值\n\n            function checkFrameName() {\n                var resp;\n                try {\n                    resp = JSON.parse(iframe.contentWindow.name) || {};\n                } catch (e) {\n                    resp = {};\n                }\n                if (resp.ActionStatus) {\n                    //上传接口返回\n                    // We've got what we need. Stop the iframe from loading further content.\n                    iframe.src = \"about:blank\";\n                    iframe.parentNode.removeChild(iframe);\n                    iframe = null;\n\n                    if (resp.ActionStatus == ACTION_STATUS.OK) {\n                        cbOk && cbOk(resp);\n                    } else {\n                        cbErr && cbErr(resp);\n                    }\n                } else {\n                    setTimeout(checkFrameName, 100);\n                }\n            }\n\n            setTimeout(checkFrameName, 500);\n\n            form.submit(); //提交上传图片表单\n        };\n        //上传图片或文件(用于高版本浏览器，支持FileAPI)\n        this.uploadFile = function (options, cbOk, cbErr) {\n\n            var file_upload = {\n                //初始化\n                init: function init(options, cbOk, cbErr) {\n                    var me = this;\n                    me.file = options.file;\n                    //分片上传进度回调事件\n                    me.onProgressCallBack = options.onProgressCallBack;\n                    //停止上传图片按钮\n                    if (options.abortButton) {\n                        options.abortButton.onclick = me.abortHandler;\n                    }\n                    me.total = me.file.size; //文件总大小\n                    me.loaded = 0; //已读取字节数\n                    me.step = 1080 * 1024; //分块大小，1080K\n                    me.sliceSize = 0; //分片大小\n                    me.sliceOffset = 0; //当前分片位置\n                    me.timestamp = unixtime(); //当前时间戳\n                    me.seq = nextSeq(); //请求seq\n                    me.random = createRandom(); //请求随机数\n                    me.fromAccount = ctx.identifier; //发送者\n                    me.toAccount = options.To_Account; //接收者\n                    me.fileMd5 = options.fileMd5; //文件MD5\n                    me.businessType = options.businessType; //图片或文件的业务类型，群消息:1; c2c消息:2; 个人头像：3; 群头像：4;\n                    me.fileType = options.fileType; //文件类型，不填为默认认为上传的是图片；1：图片；2：文件；3：短视频；4：PTT\n\n                    me.cbOk = cbOk; //上传成功回调事件\n                    me.cbErr = cbErr; //上传失败回调事件\n\n                    me.reader = new FileReader(); //读取文件对象\n                    me.blobSlice = File.prototype.mozSlice || File.prototype.webkitSlice || File.prototype.slice; //file的slice方法,不同浏览器不一样\n\n                    me.reader.onloadstart = me.onLoadStart; //开始读取回调事件\n                    me.reader.onprogress = me.onProgress; //读取文件进度回调事件\n                    me.reader.onabort = me.onAbort; //停止读取回调事件\n                    me.reader.onerror = me.onerror; //读取发生错误回调事件\n                    me.reader.onload = me.onLoad; //分片加载完毕回调事件\n                    me.reader.onloadend = me.onLoadEnd; //读取文件完毕回调事件\n                },\n                //上传方法\n                upload: function upload() {\n                    var me = file_upload;\n                    //读取第一块\n                    me.readBlob(0);\n                },\n                onLoadStart: function onLoadStart() {\n                    var me = file_upload;\n                },\n                onProgress: function onProgress(e) {\n                    var me = file_upload;\n                    me.loaded += e.loaded;\n                    if (me.onProgressCallBack) {\n                        me.onProgressCallBack(me.loaded, me.total);\n                    }\n                },\n                onAbort: function onAbort() {\n                    var me = file_upload;\n                },\n                onError: function onError() {\n                    var me = file_upload;\n                },\n                onLoad: function onLoad(e) {\n                    var me = file_upload;\n                    if (e.target.readyState == FileReader.DONE) {\n                        var slice_data_base64 = e.target.result;\n                        //注意，一定要去除base64编码头部\n                        var pos = slice_data_base64.indexOf(\",\");\n                        if (pos != -1) {\n                            slice_data_base64 = slice_data_base64.substr(pos + 1);\n                        }\n                        //封装上传图片接口的请求参数\n                        var opt = {\n                            'From_Account': me.fromAccount,\n                            'To_Account': me.toAccount,\n                            'Busi_Id': me.businessType,\n                            'File_Type': me.fileType,\n                            'File_Str_Md5': me.fileMd5,\n                            'PkgFlag': UPLOAD_RES_PKG_FLAG.BASE64_DATA,\n                            'File_Size': me.total,\n                            'Slice_Offset': me.sliceOffset,\n                            'Slice_Size': me.sliceSize,\n                            'Slice_Data': slice_data_base64,\n                            'Seq': me.seq,\n                            'Timestamp': me.timestamp,\n                            'Random': me.random\n                        };\n\n                        //上传成功的成功回调\n                        var succCallback = function succCallback(resp) {\n                            if (resp.IsFinish == 0) {\n                                me.loaded = resp.Next_Offset;\n                                if (me.loaded < me.total) {\n                                    me.readBlob(me.loaded);\n                                } else {\n                                    me.loaded = me.total;\n                                }\n                            } else {\n\n                                if (me.cbOk) {\n                                    var tempResp = {\n                                        'ActionStatus': resp.ActionStatus,\n                                        'ErrorCode': resp.ErrorCode,\n                                        'ErrorInfo': resp.ErrorInfo,\n                                        'File_UUID': resp.File_UUID,\n                                        'File_Size': resp.Next_Offset,\n                                        'URL_INFO': resp.URL_INFO,\n                                        'Download_Flag': resp.Download_Flag\n                                    };\n                                    if (me.fileType == UPLOAD_RES_TYPE.FILE) {\n                                        //如果上传的是文件，下载地址需要sdk内部拼接\n                                        tempResp.URL_INFO = getFileDownUrl(resp.File_UUID, ctx.identifier, me.file.name);\n                                    }\n                                    me.cbOk(tempResp);\n                                }\n                            }\n                            Upload_Retry_Times = 0;\n                        };\n                        //上传失败的回调\n                        var errorCallback = function errorCallback(resp) {\n                            if (Upload_Retry_Times < Upload_Retry_Max_Times) {\n                                Upload_Retry_Times++;\n                                setTimeout(function () {\n                                    proto_uploadPic(opt, succCallback, errorCallback);\n                                }, 1000);\n                            } else {\n                                me.cbErr(resp);\n                            }\n                            //me.cbErr\n                        };\n                        //分片上传图片接口\n                        proto_uploadPic(opt, succCallback, errorCallback);\n                    }\n                },\n                onLoadEnd: function onLoadEnd() {\n                    var me = file_upload;\n                },\n                //分片读取文件方法\n                readBlob: function readBlob(start) {\n                    var me = file_upload;\n                    var blob,\n                        file = me.file;\n                    var end = start + me.step;\n                    if (end > me.total) {\n                        end = me.total;\n                        me.sliceSize = end - start;\n                    } else {\n                        me.sliceSize = me.step;\n                    }\n                    me.sliceOffset = start;\n                    //根据起始和结束位置，分片读取文件\n                    blob = me.blobSlice.call(file, start, end);\n                    //将分片的二进制数据转换为base64编码\n                    me.reader.readAsDataURL(blob);\n                },\n                abortHandler: function abortHandler() {\n                    var me = file_upload;\n                    if (me.reader) {\n                        me.reader.abort();\n                    }\n                }\n            };\n\n            //读取文件MD5\n            getFileMD5(options.file, function (fileMd5) {\n                log.info('fileMd5: ' + fileMd5);\n                options.fileMd5 = fileMd5;\n                //初始化上传参数\n                file_upload.init(options, cbOk, cbErr);\n                //开始上传文件\n                file_upload.upload();\n            }, cbErr);\n        };\n    }();\n\n    //web im 基础对象\n\n    //常量对象\n\n    //会话类型\n    webim.SESSION_TYPE = SESSION_TYPE;\n\n    webim.MSG_MAX_LENGTH = MSG_MAX_LENGTH;\n\n    //c2c消息子类型\n    webim.C2C_MSG_SUB_TYPE = C2C_MSG_SUB_TYPE;\n\n    //群消息子类型\n    webim.GROUP_MSG_SUB_TYPE = GROUP_MSG_SUB_TYPE;\n\n    //消息元素类型\n    webim.MSG_ELEMENT_TYPE = MSG_ELEMENT_TYPE;\n\n    //群提示消息类型\n    webim.GROUP_TIP_TYPE = GROUP_TIP_TYPE;\n\n    //图片类型\n    webim.IMAGE_TYPE = IMAGE_TYPE;\n\n    //群系统消息类型\n    webim.GROUP_SYSTEM_TYPE = GROUP_SYSTEM_TYPE;\n\n    //好友系统通知子类型\n    webim.FRIEND_NOTICE_TYPE = FRIEND_NOTICE_TYPE;\n\n    //群提示消息-群资料变更类型\n    webim.GROUP_TIP_MODIFY_GROUP_INFO_TYPE = GROUP_TIP_MODIFY_GROUP_INFO_TYPE;\n\n    //浏览器信息\n    webim.BROWSER_INFO = BROWSER_INFO;\n\n    //表情对象\n    webim.Emotions = webim.EmotionPicData = emotions;\n    //表情标识符和index Map\n    webim.EmotionDataIndexs = webim.EmotionPicDataIndex = emotionDataIndexs;\n\n    //腾讯登录服务错误码(托管模式)\n    webim.TLS_ERROR_CODE = TLS_ERROR_CODE;\n\n    //连接状态\n    webim.CONNECTION_STATUS = CONNECTION_STATUS;\n\n    //上传图片业务类型\n    webim.UPLOAD_PIC_BUSSINESS_TYPE = UPLOAD_PIC_BUSSINESS_TYPE;\n\n    //最近联系人类型\n    webim.RECENT_CONTACT_TYPE = RECENT_CONTACT_TYPE;\n\n    //上传资源类型\n    webim.UPLOAD_RES_TYPE = UPLOAD_RES_TYPE;\n\n    /**************************************/\n\n    //类对象\n    //\n    //工具对象\n    webim.Tool = tool;\n    //控制台打印日志对象\n    webim.Log = log;\n\n    //消息对象\n    webim.Msg = Msg;\n    //会话对象\n    webim.Session = Session;\n    //会话存储对象\n    webim.MsgStore = {\n        sessMap: function sessMap() {\n            return MsgStore.sessMap();\n        },\n        sessCount: function sessCount() {\n            return MsgStore.sessCount();\n        },\n        sessByTypeId: function sessByTypeId(type, id) {\n            return MsgStore.sessByTypeId(type, id);\n        },\n        delSessByTypeId: function delSessByTypeId(type, id) {\n            return MsgStore.delSessByTypeId(type, id);\n        },\n        resetCookieAndSyncFlag: function resetCookieAndSyncFlag() {\n            return MsgStore.resetCookieAndSyncFlag();\n        }\n    };\n\n    webim.Resources = Resources;\n\n    /**************************************/\n\n    // webim API impl\n    //\n    //基本接口\n    //登录\n    webim.login = webim.init = function (loginInfo, listeners, opts, cbOk, cbErr) {\n\n        //初始化连接状态回调函数\n        ConnManager.init(listeners.onConnNotify, cbOk, cbErr);\n\n        //设置ie9以下浏览器jsonp回调\n        if (listeners.jsonpCallback) jsonpCallback = listeners.jsonpCallback;\n        //登录\n        _login(loginInfo, listeners, opts, cbOk, cbErr);\n    };\n    //登出\n    //需要传长轮询id\n    //这样登出之后其他的登录实例还可以继续收取消息\n    webim.logout = webim.offline = function (cbOk, cbErr) {\n        return proto_logout('instance', cbOk, cbErr);\n    };\n\n    //登出\n    //这种登出方式，所有的实例都将不会收到消息推送，直到重新登录\n    webim.logoutAll = function (cbOk, cbErr) {\n        return proto_logout('all', cbOk, cbErr);\n    };\n\n    //消息管理接口\n    //发消息接口（私聊和群聊）\n    webim.sendMsg = function (msg, cbOk, cbErr) {\n        return MsgManager.sendMsg(msg, cbOk, cbErr);\n    };\n    //拉取未读c2c消息\n    webim.syncMsgs = function (cbOk, cbErr) {\n        return MsgManager.syncMsgs(cbOk, cbErr);\n    };\n    //拉取C2C漫游消息\n    webim.getC2CHistoryMsgs = function (options, cbOk, cbErr) {\n        return MsgManager.getC2CHistoryMsgs(options, cbOk, cbErr);\n    };\n    //拉取群漫游消息\n    webim.syncGroupMsgs = function (options, cbOk, cbErr) {\n        return MsgManager.syncGroupMsgs(options, cbOk, cbErr);\n    };\n\n    //上报c2c消息已读\n    webim.c2CMsgReaded = function (options, cbOk, cbErr) {\n        return MsgStore.c2CMsgReaded(options, cbOk, cbErr);\n    };\n\n    //上报群消息已读\n    webim.groupMsgReaded = function (options, cbOk, cbErr) {\n        return proto_groupMsgReaded(options, cbOk, cbErr);\n    };\n\n    //设置聊天会话自动标记已读\n    webim.setAutoRead = function (selSess, isOn, isResetAll) {\n        return MsgStore.setAutoRead(selSess, isOn, isResetAll);\n    };\n\n    //群组管理接口\n    //\n    //创建群\n    webim.createGroup = function (options, cbOk, cbErr) {\n        return proto_createGroup(options, cbOk, cbErr);\n    };\n    //创建群-高级接口\n    webim.createGroupHigh = function (options, cbOk, cbErr) {\n        return proto_createGroupHigh(options, cbOk, cbErr);\n    };\n    //申请加群\n    webim.applyJoinGroup = function (options, cbOk, cbErr) {\n        return proto_applyJoinGroup(options, cbOk, cbErr);\n    };\n    //处理加群申请(同意或拒绝)\n    webim.handleApplyJoinGroupPendency = function (options, cbOk, cbErr) {\n        return proto_handleApplyJoinGroupPendency(options, cbOk, cbErr);\n    };\n\n    //获取群组未决列表\n    webim.getPendencyGroup = function (options, cbOk, cbErr) {\n        return proto_getPendencyGroup(options, cbOk, cbErr);\n    };\n\n    //群未决已读上报\n    webim.getPendencyGroupRead = function (options, cbOk, cbErr) {\n        return proto_getPendencyGroupRead(options, cbOk, cbErr);\n    };\n\n    //处理邀请进群申请(同意或拒绝)\n    webim.handleInviteJoinGroupRequest = function (options, cbOk, cbErr) {\n        return proto_handleInviteJoinGroupRequest(options, cbOk, cbErr);\n    };\n\n    //删除加群申请\n    webim.deleteApplyJoinGroupPendency = function (options, cbOk, cbErr) {\n        return proto_deleteC2CMsg(options, cbOk, cbErr);\n    };\n\n    //主动退群\n    webim.quitGroup = function (options, cbOk, cbErr) {\n        return proto_quitGroup(options, cbOk, cbErr);\n    };\n    //搜索群组(根据名称)\n    webim.searchGroupByName = function (options, cbOk, cbErr) {\n        return proto_searchGroupByName(options, cbOk, cbErr);\n    };\n    //获取群组公开资料(根据群id搜索)\n    webim.getGroupPublicInfo = function (options, cbOk, cbErr) {\n        return proto_getGroupPublicInfo(options, cbOk, cbErr);\n    };\n    //获取群组详细资料-高级接口\n    webim.getGroupInfo = function (options, cbOk, cbErr) {\n        return proto_getGroupInfo(options, cbOk, cbErr);\n    };\n    //修改群基本资料\n    webim.modifyGroupBaseInfo = function (options, cbOk, cbErr) {\n        return proto_modifyGroupBaseInfo(options, cbOk, cbErr);\n    };\n    //获取群成员列表\n    webim.getGroupMemberInfo = function (options, cbOk, cbErr) {\n        return proto_getGroupMemberInfo(options, cbOk, cbErr);\n    };\n    //邀请好友加群\n    webim.addGroupMember = function (options, cbOk, cbErr) {\n        return proto_addGroupMember(options, cbOk, cbErr);\n    };\n    //修改群成员资料\n    webim.modifyGroupMember = function (options, cbOk, cbErr) {\n        return proto_modifyGroupMember(options, cbOk, cbErr);\n    };\n    //删除群成员\n    webim.deleteGroupMember = function (options, cbOk, cbErr) {\n        return proto_deleteGroupMember(options, cbOk, cbErr);\n    };\n    //解散群\n    webim.destroyGroup = function (options, cbOk, cbErr) {\n        return proto_destroyGroup(options, cbOk, cbErr);\n    };\n    //转让群组\n    webim.changeGroupOwner = function (options, cbOk, cbErr) {\n        return proto_changeGroupOwner(options, cbOk, cbErr);\n    };\n\n    //获取我的群组列表-高级接口\n    webim.getJoinedGroupListHigh = function (options, cbOk, cbErr) {\n        return proto_getJoinedGroupListHigh(options, cbOk, cbErr);\n    };\n    //获取群成员角色\n    webim.getRoleInGroup = function (options, cbOk, cbErr) {\n        return proto_getRoleInGroup(options, cbOk, cbErr);\n    };\n    //设置群成员禁言时间\n    webim.forbidSendMsg = function (options, cbOk, cbErr) {\n        return proto_forbidSendMsg(options, cbOk, cbErr);\n    };\n    //发送自定义群系统通知\n    webim.sendCustomGroupNotify = function (options, cbOk, cbErr) {\n        return proto_sendCustomGroupNotify(options, cbOk, cbErr);\n    };\n\n    //进入大群\n    webim.applyJoinBigGroup = function (options, cbOk, cbErr) {\n        return proto_applyJoinBigGroup(options, cbOk, cbErr);\n    };\n    //退出大群\n    webim.quitBigGroup = function (options, cbOk, cbErr) {\n        return proto_quitBigGroup(options, cbOk, cbErr);\n    };\n\n    //资料关系链管理接口\n    //\n    //获取个人资料接口，可用于搜索用户\n    webim.getProfilePortrait = function (options, cbOk, cbErr) {\n        return proto_getProfilePortrait(options, cbOk, cbErr);\n    };\n    //设置个人资料\n    webim.setProfilePortrait = function (options, cbOk, cbErr) {\n        return proto_setProfilePortrait(options, cbOk, cbErr);\n    };\n    //申请加好友\n    webim.applyAddFriend = function (options, cbOk, cbErr) {\n        return proto_applyAddFriend(options, cbOk, cbErr);\n    };\n    //获取好友申请列表\n    webim.getPendency = function (options, cbOk, cbErr) {\n        return proto_getPendency(options, cbOk, cbErr);\n    };\n    //好友申请列表已读上报\n    webim.getPendencyReport = function (options, cbOk, cbErr) {\n        return proto_getPendencyReport(options, cbOk, cbErr);\n    };\n    //删除好友申请\n    webim.deletePendency = function (options, cbOk, cbErr) {\n        return proto_deletePendency(options, cbOk, cbErr);\n    };\n    //处理好友申请\n    webim.responseFriend = function (options, cbOk, cbErr) {\n        return proto_responseFriend(options, cbOk, cbErr);\n    };\n    //获取我的好友\n    webim.getAllFriend = function (options, cbOk, cbErr) {\n        return proto_getAllFriend(options, cbOk, cbErr);\n    };\n    //删除会话\n    webim.deleteChat = function (options, cbOk, cbErr) {\n        return proto_deleteChat(options, cbOk, cbErr);\n    };\n    //删除好友\n    webim.deleteFriend = function (options, cbOk, cbErr) {\n        return proto_deleteFriend(options, cbOk, cbErr);\n    };\n    //拉黑\n    webim.addBlackList = function (options, cbOk, cbErr) {\n        return proto_addBlackList(options, cbOk, cbErr);\n    };\n    //删除黑名单\n    webim.deleteBlackList = function (options, cbOk, cbErr) {\n        return proto_deleteBlackList(options, cbOk, cbErr);\n    };\n    //获取我的黑名单\n    webim.getBlackList = function (options, cbOk, cbErr) {\n        return proto_getBlackList(options, cbOk, cbErr);\n    };\n\n    //获取最近会话\n    webim.getRecentContactList = function (options, cbOk, cbErr) {\n        return proto_getRecentContactList(options, cbOk, cbErr);\n    };\n\n    //图片或文件服务接口\n    //\n    //上传文件接口（高版本浏览器）\n    webim.uploadFile = webim.uploadPic = function (options, cbOk, cbErr) {\n        return FileUploader.uploadFile(options, cbOk, cbErr);\n    };\n    //提交上传图片表单接口（用于低版本ie）\n    webim.submitUploadFileForm = function (options, cbOk, cbErr) {\n        return FileUploader.submitUploadFileForm(options, cbOk, cbErr);\n    };\n    //上传图片或文件(Base64)接口\n    webim.uploadFileByBase64 = webim.uploadPicByBase64 = function (options, cbOk, cbErr) {\n        //请求参数\n        var opt = {\n            'To_Account': options.toAccount,\n            'Busi_Id': options.businessType,\n            'File_Type': options.File_Type,\n            'File_Str_Md5': options.fileMd5,\n            'PkgFlag': UPLOAD_RES_PKG_FLAG.BASE64_DATA,\n            'File_Size': options.totalSize,\n            'Slice_Offset': 0,\n            'Slice_Size': options.totalSize,\n            'Slice_Data': options.base64Str,\n            'Seq': nextSeq(),\n            'Timestamp': unixtime(),\n            'Random': createRandom()\n        };\n        return proto_uploadPic(opt, cbOk, cbErr);\n    };\n\n    //设置jsonp返回的值\n    webim.setJsonpLastRspData = function (rspData) {\n        jsonpLastRspData = typeof rspData == \"string\" ? JSON.parse(rspData) : rspData;\n    };\n\n    //获取长轮询ID\n    webim.getLongPollingId = function (options, cbOk, cbErr) {\n        return proto_getLongPollingId(options, cbOk, cbErr);\n    };\n\n    //获取下载地址\n    webim.applyDownload = function (options, cbOk, cbErr) {\n        return proto_applyDownload(options, cbOk, cbErr);\n    };\n\n    //获取下载地址\n    webim.onDownFile = function (uuid) {\n        window.open(Resources.downloadMap[\"uuid_\" + uuid]);\n    };\n\n    //检查是否登录\n    webim.checkLogin = function (cbErr, isNeedCallBack) {\n        return checkLogin(cbErr, isNeedCallBack);\n    };\n})(webim);\n\n/***/ }),\n\n/***/ 584:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_ConversationItem_vue__ = __webpack_require__(409);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_1ca45723_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_ConversationItem_vue__ = __webpack_require__(587);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(585)\n}\nvar normalizeComponent = __webpack_require__(44)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-1ca45723\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_ConversationItem_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_1ca45723_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_ConversationItem_vue__[\"a\" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 585:\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(586);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(1)(\"58fec587\", content, true, {});\n\n/***/ }),\n\n/***/ 586:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(0)(false);\n// imports\n\n\n// module\nexports.push([module.i, \".item[data-v-1ca45723]{background:#fff;padding:10px 16px;position:relative}.middle[data-v-1ca45723]{width:100%;display:inline-block;position:absolute;top:50%;transform:translateY(-50%);margin:auto 10px}.right[data-v-1ca45723]{float:right;font-size:12px;margin-top:6px;color:#666}\", \"\"]);\n\n// exports\n\n\n/***/ }),\n\n/***/ 587:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:\"item\"},[_c('img',{attrs:{\"src\":_vm.img,\"alt\":\"\",\"width\":\"52px\",\"height\":\"52px\"}}),_vm._v(\" \"),_c('span',{staticClass:\"right\"},[_vm._v(_vm._s(_vm.sendTime))]),_vm._v(\" \"),_c('div',{staticClass:\"middle\"},[_c('div',{staticStyle:{\"font-size\":\"15px\",\"font-weight\":\"bold\",\"color\":\"#222222\"}},[_vm._v(_vm._s(_vm.conversationItem.nick))]),_vm._v(\" \"),_c('div',{staticStyle:{\"font-size\":\"12px\",\"margin-top\":\"6px\",\"color\":\"#666666\"}},[_vm._v(\" \"+_vm._s(_vm.showText))])])]),_vm._v(\" \"),_c('hr',{staticClass:\"line\"})])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\n\n/***/ }),\n\n/***/ 588:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[(_vm.conversationList.length > 0)?_c('div',_vm._l((_vm.conversationList),function(conversationItem){return _c('conversation-item',{key:conversationItem.account,attrs:{\"conversationItem\":conversationItem},nativeOn:{\"click\":function($event){_vm.toChat(conversationItem)}}})})):_vm._e(),_vm._v(\" \"),(_vm.conversationList.length == 0)?_c('div',{staticClass:\"empty\"},[_c('img',{attrs:{\"src\":_vm.consultationEmpty,\"width\":\"144px\",\"height\":\"136px\"}}),_vm._v(\" \"),_c('div',{staticStyle:{\"font-size\":\"15px\",\"margin-top\":\"10px\",\"color\":\"#b3b3b3\"}},[_vm._v(\"暂无相关记录\")])]):_vm._e()])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 17.build.js","function injectStyle (ssrContext) {\n  require(\"!!vue-style-loader!css-loader?minimize!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-f977e012\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./ConversationList.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./ConversationList.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./ConversationList.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-f977e012\\\",\\\"hasScoped\\\":true,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./ConversationList.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-f977e012\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/chat/ConversationList.vue\n// module id = 198\n// module chunks = 17","export default {\n  packPerson: \"./static/img/ic_pack_personal.png\",\n  packTeam: \"./static/img/ic_pack_team.png\",\n  packDept: \"./static/img/ic_pack_org.png\",\n  orgPubImg: \"./static/img/ic_org_bg.png\",\n  orgImg: \"./static/img/ic_org_logo.png\",\n  appIconDoctor: \"./static/img/app_icon_doctor.png\",\n  appIconUser: \"./static/img/app_icon.png\",\n  topBg: \"./static/img/topbg.png\",\n  payWx: \"./static/img/ic_pay_wechat.png\",\n  docMale: \"./static/img/ic_doc_male.png\",\n  docFeMale: \"./static/img/ic_doc_female.png\",\n  focusImg: \"./static/img/ic_focused.png\",\n  unfocusImg: \"./static/img/ic_unfocus.png\",\n  yuyueImg: \"./static/img/ic_yuyue.png\",\n  reportImg: \"./static/img/ic_report.png\",\n  askImg: \"./static/img/ic_ask.png\",\n  serviceImg: \"./static/img/ic_services.png\",\n  yuyueGrayImg: \"./static/img/ic_yuyue_gray.png\",\n  askGrayImg: \"./static/img/ic_ask_grey.png\",\n  serviceGrayImg: \"./static/img/ic_services_grey.png\",\n  starImg: \"./static/img/ic_rating_all.png\",\n  docRectMale: \"./static/img/ic_rect_male.png\",\n  docRectFeMale: \"./static/img/ic_rect_female.png\",\n  defaultAva: \"./static/img/ic_default_ava.png\",\n  appointBg: \"./static/img/ic_appoint_bg.png\",\n  rulePhoto: \"./static/img/ic_rule.png\",\n  arrowDown: \"./static/img/ic_arrow_down.png\",\n  arrowRight: \"./static/img/arrow_right.png\",\n  arrowR: \"./static/img/ic_arrow_right.png\",\n\n  home: \"./static/img/home.png\",\n  news: \"./static/img/news.png\",\n  service: \"./static/img/service.png\",\n  mine: \"./static/img/mine.png\",\n  doctor: \"./static/img/doctor.png\",\n\n  mineBg: \"./static/img/mine_bg.png\",\n\n  homeAppoint: \"./static/img/home_appoint.png\",\n  homeDoctor: \"./static/img/home_doctor.png\",\n  homeOnline: \"./static/img/home_online.png\",\n  homeOrder: \"./static/img/home_order.png\",\n\n  notice: \"./static/img/notice.png\",\n\n  groupUser: './static/img/ic_group_user.png',\n  groupDoc: './static/img/ic_group_doc.png',\n  groupDocPatient: './static/img/ic_group_doc_patient.png',\n\n  shareImg: \"./static/img/share.png\",\n\n\n  consultationHomeDefault: \"./static/img/ic_consulation_home_default.png\",\n  consultationHomeSelected: \"./static/img/ic_consulation_home_selected.png\",\n  consultationMineDefault: \"./static/img/ic_consulation_mine_default.png\",\n  consultationMineSelected: \"./static/img/ic_consulation_mine_selected.png\",\n  consultationSmallImg: \"./static/img/ic_consultation_small_default.png\",\n  consultationBigImg: \"./static/img/ic_consultation_big_default.png\",\n  consultationWant: './static/img/ic_want.png',\n  consultationWanted: './static/img/ic_wanted.png',\n  consultationPaySuccess: './static/img/ic_sign_success.png',\n  choose: './static/img/choose.png',\n  chosen: './static/img/choosen.png',\n  arrowWhiteRight: './static/img/ic_arrow_right_white.png',\n  consultationMineBg: './static/img/ic_mine_bg.png',\n  consultationEmpty: './static/img/ic_empty.png',\n\n  /**  新版  ***/\n\n  //首页\n  house_n: './static/img/house_n.png',\n  house_s: './static/img/house_s.png',\n  //商城\n  shopping_n: './static/img/shopping_n.png',\n  shopping_s: './static/img/shopping_s.png',\n  //小组\n  group_n: './static/img/group_n.png',\n  group_s: './static/img/group_s.png',\n  //消息\n  msg_n: './static/img/msg_n.png',\n  msg_s: './static/img/msg_s.png',\n  //我的\n  my_n: './static/img/my_n.png',\n  my_s: './static/img/my_s.png',\n\n  //关注/取消\n  focusLookImg: \"./static/img/look@2.png\",\n  unfocusLookImg: \"./static/img/no_look@2.png\",\n  //医生助理头像\n  assistantHeadImg: \"./static/img/assistant_head_img.png\",\n  //无标记消息\n  msgTip: \"./static/img/msg_tip.png\",\n  //有标记消息\n  msgDot: \"./static/img/msg_dot.png\",\n  //系统消息\n  systemMsg: \"./static/img/system_msg.png\",\n  //通知消息\n  noticeMsg: \"./static/img/notice_msg.png\",\n  //家庭医生\n  familyDoc: \"./static/img/family_doc.png\",\n}\n\n\n\n// WEBPACK FOOTER //\n// ./static/js/imgmap.js","<template>\n    <div>\n        <div v-if=\"conversationList.length > 0\">\n          <conversation-item v-for=\"conversationItem in conversationList\" :key=\"conversationItem.account\" :conversationItem=\"conversationItem\" @click.native=\"toChat(conversationItem)\"></conversation-item>\n        </div>\n        <div class=\"empty\" v-if=\"conversationList.length == 0\">\n          <img :src=\"consultationEmpty\" width=\"144px\" height=\"136px\">\n          <div style=\"font-size: 15px;margin-top: 10px;color:#b3b3b3\">暂无相关记录</div>\n        </div>\n    </div>\n</template>\n\n<script>\n  import { mapGetters} from 'vuex';\n  import { webim } from '../../assets/im/webim.js'\n  import ConversationItem from './ConversationItem.vue';\n  import imgMap from '../../../static/js/imgmap.js';\n    export default {\n        data() {\n          return {\n            loginInfo: {},\n            conversationList: [],\n            orgId: this.$route.query.orgId,\n          }\n        },\n\n      components: {\n        conversationItem: ConversationItem,\n      },\n      computed: {\n        ...mapGetters(['loginData']),\n          consultationEmpty() {\n            return imgMap.consultationEmpty;\n          },\n      },\n\n      methods: {\n          imLogin() {\n            this.loginInfo = {\n              'sdkAppID': 1400034465, //用户所属应用id,必填\n              'identifier': this.$store.getters.loginData.userObj.userId.value, //当前用户ID,必须是否字符串类型，必填\n              'accountType': 12230, //用户所属应用帐号类型，必填\n              'userSig': this.$store.getters.loginData.imUserSign\n            };\n            let onConnNotify = function (resp) {\n              let info;\n              switch (resp.ErrorCode) {\n                case webim.CONNECTION_STATUS.ON:\n                  webim.Log.warn('建立连接成功: ' + resp.ErrorInfo);\n                  break;\n                case webim.CONNECTION_STATUS.OFF:\n                  info = '连接已断开，无法收到新消息，请检查下你的网络是否正常: ' + resp.ErrorInfo;\n                  // alert(info);\n                  webim.Log.warn(info);\n                  break;\n                case webim.CONNECTION_STATUS.RECONNECT:\n                  info = '连接状态恢复正常: ' + resp.ErrorInfo;\n                  // alert(info);\n                  webim.Log.warn(info);\n                  break;\n                default:\n                  webim.Log.error('未知连接状态: =' + resp.ErrorInfo);\n                  break;\n              }\n            };\n\n            //监听事件\n            let listeners = {\n              \"onConnNotify\": onConnNotify, //监听连接状态回调变化事件,必填\n              \"jsonpCallback\": this.jsonpCallback, //IE9(含)以下浏览器用到的jsonp回调函数，\n              \"onMsgNotify\": this.onMsgNotify, //监听新消息(私聊，普通群(非直播聊天室)消息，全员推送消息)事件，必填\n              \"onLongPullingNotify\": function (data) {\n                console.debug('onLongPullingNotify', data)\n              }\n            };\n\n            //初始化时，其他对象，选填\n            let options = {\n              'isAccessFormalEnv': true, //是否访问正式环境，默认访问正式，选填\n              'isLogOn': false //是否开启控制台打印日志,默认开启，选填\n            };\n\n            let vm = this;\n            webim.login(\n              this.loginInfo, listeners, options,\n              function(resp) {\n                vm.loginInfo.identifierNick = resp.identifierNick; //设置当前用户昵称\n                vm.loginInfo.headurl = resp.headurl; //设置当前用户头像\n\n                vm.getRecentContact();\n              },\n              function(err) {\n                alert(err.ErrorInfo);\n              }\n            );\n          },\n          onMsgNotify(newMsgList) {\n            this.getRecentContact();\n          },\n\n          //IE9(含)以下浏览器用到的jsonp回调函数\n          jsonpCallback(rspData) {\n            webim.setJsonpLastRspData(rspData);\n          },\n\n          getRecentContact() {\n            let vm = this;\n            let options = {\n              'Count': 100 //要拉取的最近会话条数\n            };\n            // var sessMap = webim.MsgStore.sessMap();\n            // console.log(sessMap);\n\n            webim.getRecentContactList(\n              options,\n              function (resp) {\n                // console.log(resp);\n                let firstSessType; //保存第一个会话类型\n                let firstSessId; //保存第一个会话id\n                let ids = [];\n                let imConversationList = [];\n                if (resp.SessionItem && resp.SessionItem.length > 0) { //如果存在最近会话记录\n\n                  for (let i in resp.SessionItem) {\n                    let item = resp.SessionItem[i];\n                    let type = item.Type; //接口返回的会话类型\n                    let sessType, typeZh, sessionId, sessionNick = '',\n                      sessionImage = '',\n                      senderId = '';\n                    if (type == webim.RECENT_CONTACT_TYPE.C2C) { //私聊\n                      typeZh = '私聊';\n                      sessType = webim.SESSION_TYPE.C2C; //设置会话类型\n                      sessionId = item.To_Account; //会话id，私聊时为好友ID或者系统账号（值为@TIM#SYSTEM，业务可以自己决定是否需要展示），注意：从To_Account获取,\n                      if (sessionId == '@TIM#SYSTEM') { //先过滤系统消息，，\n                        webim.Log.warn('过滤好友系统消息,sessionId=' + sessionId);\n                        continue;\n                      }\n                      sessionNick = item.C2cNick; //会话昵称，如果昵称为空，默认将其设成会话id\n                      sessionImage = item.C2cImage;\n                      senderId = item.To_Account;\n                    } else if (type == webim.RECENT_CONTACT_TYPE.GROUP) { //群聊\n                      continue;  //TODO  暂时屏蔽群消息\n\n                      typeZh = '群聊';\n                      sessType = webim.SESSION_TYPE.GROUP; //设置会话类型\n                      sessionId = item.ToAccount; //会话id，群聊时为群ID，注意：从ToAccount获取\n                      sessionNick = item.GroupNick; //会话昵称，群聊时，为群名称，接口一定会返回\n                      sessionImage = item.GroupImage;\n                      senderId = item.MsgGroupFrom_Account; //群消息的发送者id\n                      if (!senderId) { //发送者id为空\n                        webim.Log.warn('群消息发送者id为空,senderId=' + senderId + \",groupid=\" + sessionId);\n                        continue;\n                      }\n                      if (senderId == '@TIM#SYSTEM') { //先过滤群系统消息，因为接口暂时区分不了是进群还是退群等提示消息，\n                        webim.Log.warn('过滤群系统消息,senderId=' + senderId + \",groupid=\" + sessionId);\n                        continue;\n                      }\n                    } else {\n                      typeZh = '未知类型';\n                      sessionId = item.ToAccount; //\n                    }\n                    if (!sessionId) { //会话id为空\n                      webim.Log.warn('会话id为空,sessionId=' + sessionId);\n                      continue;\n                    }\n\n                    if (sessionId == '@TLS#NOT_FOUND') { //会话id不存在，可能是已经被删除了\n                      webim.Log.warn('会话id不存在,sessionId=' + sessionId);\n                      continue;\n                    }\n\n\n                    if (!firstSessId) {\n                      firstSessType = sessType; //记录第一个会话类型\n                      firstSessId = sessionId; //记录第一个会话id\n                    }\n                    imConversationList.push({\n                      SessionType: sessType, //会话类型\n                      SessionId: sessionId, //会话对象id，好友id或者群id\n                      SessionNick: sessionNick, //会话昵称，好友昵称或群名称\n                      SessionImage: sessionImage, //会话头像，好友头像或者群头像\n                      C2cAccount: senderId, //发送者id，群聊时，才有用\n                      UnreadMsgCount: item.UnreadMsgCount, //未读消息数,私聊时需要通过webim.syncMsgs(initUnreadMsgCount)获取,参考后面的demo，群聊时不需要。\n                      MsgSeq: item.MsgSeq, //消息seq\n                      MsgRandom: item.MsgRandom, //消息随机数\n                      MsgTimeStamp: webim.Tool.formatTimeStamp(item.MsgTimeStamp), //消息时间戳\n                      MsgGroupReadedSeq: item.MsgGroupReadedSeq || 0,\n                      MsgShow: item.MsgShow //消息内容,文本消息为原内容，表情消息为[表情],其他类型消息以此类推\n                    });\n                    ids.push(sessionId);\n                  }\n                }\n                if(ids.length > 0) {\n                    vm.netConversationGet(ids, imConversationList);\n                }\n              },\n            );\n          },\n\n          netConversationGet(ids, imConversationList) {\n            let request = {\n              accounts: ids,\n              orgId: this.orgId\n            };\n            let vm = this;\n            this.$store.dispatch(\"imConversationList\", request).then((dataList) => {\n              if(dataList && dataList.length > 0) {\n                vm.conversationList = dataList;\n                if(imConversationList && imConversationList.length > 0) {\n                  for (let i = 0; i < dataList.length; i++) {\n                      let netData = dataList[i];\n                      for (let j = 0; j < imConversationList.length; j++) {\n                        let imData = imConversationList[j];\n                        if(netData.account == imData.SessionId) {\n                          netData.conversation = imData;\n                          break;\n                        }\n                      }\n                  }\n                }\n              }\n            }).catch(error => {\n              this.$toast(error.message);\n            });\n          },\n\n        toChat(conversationItem) {\n          this.$router.push({\n            path: \"chat\",\n            query: {userId: conversationItem.account, drName: conversationItem.nick, friendHeadUrl: conversationItem.faceUrl, gender: conversationItem.gender.value}\n          })\n        },\n        //获取聊天记录\n        getImChatData() {\n            let request = {\n              chatuser: '1098738383691227100', //this.$store.getters.loginData.userObj.userId.value\n            };\n            let vm = this;\n            this.$store.dispatch(\"imChatData\", request).then((dataList) => {\n              // if(dataList && dataList.length > 0) {\n              //   vm.conversationList = dataList;\n              //   if(imConversationList && imConversationList.length > 0) {\n              //     for (let i = 0; i < dataList.length; i++) {\n              //         let netData = dataList[i];\n              //         for (let j = 0; j < imConversationList.length; j++) {\n              //           let imData = imConversationList[j];\n              //           if(netData.account == imData.SessionId) {\n              //             netData.conversation = imData;\n              //             break;\n              //           }\n              //         }\n              //     }\n              //   }\n              // }\n            }).catch(error => {\n              this.$toast(error.message);\n            });\n          },\n\n      },\n\n      created() {\n        // this.getImChatData();\n        // this.imLogin();\n        // console.log('localStorage.getItem(\"imMsgList\")==',localStorage.getItem(\"imMsgList\"));\n      }\n    }\n</script>\n\n<style scoped>\n.empty {\n  padding: 50px 40px;\n  text-align: center;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/chat/ConversationList.vue","<template>\n  <div>\n    <div class=\"item\">\n      <img :src=\"img\" alt=\"\" width=\"52px\" height=\"52px\">\n      <span class=\"right\">{{ sendTime }}</span>\n      <div class=\"middle\">\n        <div style=\"font-size: 15px; font-weight: bold; color: #222222;\">{{ conversationItem.nick}}</div>\n        <div style=\"font-size: 12px; margin-top: 6px; color: #666666;\"> {{ showText }}</div>\n      </div>\n    </div>\n\n    <hr class=\"line\">\n\n  </div>\n\n</template>\n\n<script>\n  import imgMap from '../../../static/js/imgmap.js'\n    export default {\n        props: ['conversationItem'],\n\n        computed: {\n          img() {\n            if(this.conversationItem.faceUrl) return this.conversationItem.faceUrl;\n\n            if(this.conversationItem.groupType.value != '0') {\n              let img = imgMap.groupUser;\n              if(this.conversationItem.groupType.value == \"2\") {\n                img = imgMap.groupDoc;\n              } else if(this.conversationItem.groupType.value == \"3\") {\n                img = imgMap.groupDocPatient;\n              }\n              return img;\n            } else {\n              if(this.conversationItem.sysType.value == '1003104') {  //对方是用户\n                return imgMap.defaultAva;\n              } else {\n                let img = imgMap.docMale;\n                if(this.conversationItem.gender && this.conversationItem.gender.value == \"0\") {\n                  img = imgMap.docFeMale;\n                }\n                return img;\n              }\n            }\n          },\n\n          showText() {\n            if(this.conversationItem.conversation) {\n              return this.conversationItem.conversation.MsgShow;\n            }\n          },\n\n          sendTime() {\n            if(this.conversationItem.conversation) {\n              let time = this.conversationItem.conversation.MsgTimeStamp;\n              if(time) {\n                let date = new Date(Date.parse(time.replace(/-/g,\"/\"))).format('MM-dd hh:mm');\n                return date;\n              }\n            }\n          }\n        }\n    }\n</script>\n\n<style scoped>\n    .item {\n      background: white;\n      padding: 10px 16px;\n      position: relative;\n    }\n\n    .middle {\n      width: 100%;\n      display: inline-block;\n      position: absolute;\n      top: 50%;\n      transform: translate(0, -50%);\n      margin: auto 10px;\n    }\n\n  .right {\n    float: right;\n    font-size: 12px;\n    margin-top: 6px;\n    color: #666666;\n  }\n\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/chat/ConversationItem.vue","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/index.js?minimize!../../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-f977e012\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./ConversationList.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"f4fd4304\", content, true, {});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-style-loader!./node_modules/css-loader?minimize!./node_modules/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-f977e012\",\"scoped\":true,\"hasInlineConfig\":false}!./node_modules/vue-loader/lib/selector.js?type=styles&index=0!./src/components/chat/ConversationList.vue\n// module id = 581\n// module chunks = 17","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".empty[data-v-f977e012]{padding:50px 40px;text-align:center}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader?minimize!./node_modules/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-f977e012\",\"scoped\":true,\"hasInlineConfig\":false}!./node_modules/vue-loader/lib/selector.js?type=styles&index=0!./src/components/chat/ConversationList.vue\n// module id = 582\n// module chunks = 17","\n/* webim javascript SDK\n * VER 1.7.2\n */\n (function (global, factory) {\n\n    global[\"Long\"] = factory();\n\n})(window, function () {\n    \"use strict\";\n\n    function Long(low, high, unsigned) {\n        this.low = low | 0;\n        this.high = high | 0;\n        this.unsigned = !!unsigned;\n    }\n    Long.prototype.__isLong__;\n\n    Object.defineProperty(Long.prototype, \"__isLong__\", {\n        value: true,\n        enumerable: false,\n        configurable: false\n    });\n\n    function isLong(obj) {\n        return (obj && obj[\"__isLong__\"]) === true;\n    }\n    Long.isLong = isLong;\n    var INT_CACHE = {};\n    var UINT_CACHE = {};\n\n    function fromInt(value, unsigned) {\n        var obj, cachedObj, cache;\n        if (unsigned) {\n            value >>>= 0;\n            if (cache = (0 <= value && value < 256)) {\n                cachedObj = UINT_CACHE[value];\n                if (cachedObj)\n                    return cachedObj;\n            }\n            obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n            if (cache)\n                UINT_CACHE[value] = obj;\n            return obj;\n        } else {\n            value |= 0;\n            if (cache = (-128 <= value && value < 128)) {\n                cachedObj = INT_CACHE[value];\n                if (cachedObj)\n                    return cachedObj;\n            }\n            obj = fromBits(value, value < 0 ? -1 : 0, false);\n            if (cache)\n                INT_CACHE[value] = obj;\n            return obj;\n        }\n    }\n    Long.fromInt = fromInt;\n\n    function fromNumber(value, unsigned) {\n        if (isNaN(value) || !isFinite(value))\n            return unsigned ? UZERO : ZERO;\n        if (unsigned) {\n            if (value < 0)\n                return UZERO;\n            if (value >= TWO_PWR_64_DBL)\n                return MAX_UNSIGNED_VALUE;\n        } else {\n            if (value <= -TWO_PWR_63_DBL)\n                return MIN_VALUE;\n            if (value + 1 >= TWO_PWR_63_DBL)\n                return MAX_VALUE;\n        }\n        if (value < 0)\n            return fromNumber(-value, unsigned).neg();\n        return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n    }\n    Long.fromNumber = fromNumber;\n\n    function fromBits(lowBits, highBits, unsigned) {\n        return new Long(lowBits, highBits, unsigned);\n    }\n    Long.fromBits = fromBits;\n    var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n\n    function fromString(str, unsigned, radix) {\n        if (str.length === 0)\n            throw Error('empty string');\n        if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n            return ZERO;\n        if (typeof unsigned === 'number') {\n            // For goog.math.long compatibility\n            radix = unsigned,\n                unsigned = false;\n        } else {\n            unsigned = !!unsigned;\n        }\n        radix = radix || 10;\n        if (radix < 2 || 36 < radix)\n            throw RangeError('radix');\n\n        var p;\n        if ((p = str.indexOf('-')) > 0)\n            throw Error('interior hyphen');\n        else if (p === 0) {\n            return fromString(str.substring(1), unsigned, radix).neg();\n        }\n        var radixToPower = fromNumber(pow_dbl(radix, 8));\n\n        var result = ZERO;\n        for (var i = 0; i < str.length; i += 8) {\n            var size = Math.min(8, str.length - i),\n                value = parseInt(str.substring(i, i + size), radix);\n            if (size < 8) {\n                var power = fromNumber(pow_dbl(radix, size));\n                result = result.mul(power).add(fromNumber(value));\n            } else {\n                result = result.mul(radixToPower);\n                result = result.add(fromNumber(value));\n            }\n        }\n        result.unsigned = unsigned;\n        return result;\n    }\n    Long.fromString = fromString;\n\n    function fromValue(val) {\n        if (val /* is compatible */ instanceof Long)\n            return val;\n        if (typeof val === 'number')\n            return fromNumber(val);\n        if (typeof val === 'string')\n            return fromString(val);\n        // Throws for non-objects, converts non-instanceof Long:\n        return fromBits(val.low, val.high, val.unsigned);\n    }\n    Long.fromValue = fromValue;\n    var TWO_PWR_16_DBL = 1 << 16;\n    var TWO_PWR_24_DBL = 1 << 24;\n    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n    var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n    var ZERO = fromInt(0);\n    Long.ZERO = ZERO;\n    var UZERO = fromInt(0, true);\n    Long.UZERO = UZERO;\n    var ONE = fromInt(1);\n    Long.ONE = ONE;\n    var UONE = fromInt(1, true);\n    Long.UONE = UONE;\n    var NEG_ONE = fromInt(-1);\n    Long.NEG_ONE = NEG_ONE;\n    var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n    Long.MAX_VALUE = MAX_VALUE;\n    var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n    Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n    var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n    Long.MIN_VALUE = MIN_VALUE;\n    var LongPrototype = Long.prototype;\n    LongPrototype.toInt = function toInt() {\n        return this.unsigned ? this.low >>> 0 : this.low;\n    };\n    LongPrototype.toNumber = function toNumber() {\n        if (this.unsigned)\n            return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\n        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n    };\n\n    LongPrototype.toString = function toString(radix) {\n        radix = radix || 10;\n        if (radix < 2 || 36 < radix)\n            throw RangeError('radix');\n        if (this.isZero())\n            return '0';\n        if (this.isNegative()) { // Unsigned Longs are never negative\n            if (this.eq(MIN_VALUE)) {\n                // We need to change the Long value before it can be negated, so we remove\n                // the bottom-most digit in this base and then recurse to do the rest.\n                var radixLong = fromNumber(radix),\n                    div = this.div(radixLong),\n                    rem1 = div.mul(radixLong).sub(this);\n                return div.toString(radix) + rem1.toInt().toString(radix);\n            } else\n                return '-' + this.neg().toString(radix);\n        }\n        var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n            rem = this;\n        var result = '';\n        while (true) {\n            var remDiv = rem.div(radixToPower),\n                intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n                digits = intval.toString(radix);\n            rem = remDiv;\n            if (rem.isZero())\n                return digits + result;\n            else {\n                while (digits.length < 6)\n                    digits = '0' + digits;\n                result = '' + digits + result;\n            }\n        }\n    };\n    LongPrototype.getHighBits = function getHighBits() {\n        return this.high;\n    };\n    LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n        return this.high >>> 0;\n    };\n    LongPrototype.getLowBits = function getLowBits() {\n        return this.low;\n    };\n    LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n        return this.low >>> 0;\n    };\n    LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n        if (this.isNegative()) // Unsigned Longs are never negative\n            return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n        var val = this.high != 0 ? this.high : this.low;\n        for (var bit = 31; bit > 0; bit--)\n            if ((val & (1 << bit)) != 0)\n                break;\n        return this.high != 0 ? bit + 33 : bit + 1;\n    };\n    LongPrototype.isZero = function isZero() {\n        return this.high === 0 && this.low === 0;\n    };\n    LongPrototype.isNegative = function isNegative() {\n        return !this.unsigned && this.high < 0;\n    };\n    LongPrototype.isPositive = function isPositive() {\n        return this.unsigned || this.high >= 0;\n    };\n    LongPrototype.isOdd = function isOdd() {\n        return (this.low & 1) === 1;\n    };\n    LongPrototype.isEven = function isEven() {\n        return (this.low & 1) === 0;\n    };\n    LongPrototype.equals = function equals(other) {\n        if (!isLong(other))\n            other = fromValue(other);\n        if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n            return false;\n        return this.high === other.high && this.low === other.low;\n    };\n    LongPrototype.eq = LongPrototype.equals;\n    LongPrototype.notEquals = function notEquals(other) {\n        return !this.eq( /* validates */ other);\n    };\n    LongPrototype.neq = LongPrototype.notEquals;\n\n    /**\n     * Tests if this Long's value is less than the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.lessThan = function lessThan(other) {\n        return this.comp( /* validates */ other) < 0;\n    };\n\n    /**\n     * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.lt = LongPrototype.lessThan;\n\n    /**\n     * Tests if this Long's value is less than or equal the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n        return this.comp( /* validates */ other) <= 0;\n    };\n\n    /**\n     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.lte = LongPrototype.lessThanOrEqual;\n\n    /**\n     * Tests if this Long's value is greater than the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.greaterThan = function greaterThan(other) {\n        return this.comp( /* validates */ other) > 0;\n    };\n\n    /**\n     * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.gt = LongPrototype.greaterThan;\n\n    /**\n     * Tests if this Long's value is greater than or equal the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n        return this.comp( /* validates */ other) >= 0;\n    };\n\n    /**\n     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n\n    /**\n     * Compares this Long's value with the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n     *  if the given one is greater\n     */\n    LongPrototype.compare = function compare(other) {\n        if (!isLong(other))\n            other = fromValue(other);\n        if (this.eq(other))\n            return 0;\n        var thisNeg = this.isNegative(),\n            otherNeg = other.isNegative();\n        if (thisNeg && !otherNeg)\n            return -1;\n        if (!thisNeg && otherNeg)\n            return 1;\n        // At this point the sign bits are the same\n        if (!this.unsigned)\n            return this.sub(other).isNegative() ? -1 : 1;\n        // Both are positive if at least one is unsigned\n        return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\n    };\n\n    /**\n     * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n     *  if the given one is greater\n     */\n    LongPrototype.comp = LongPrototype.compare;\n\n    /**\n     * Negates this Long's value.\n     * @returns {!Long} Negated Long\n     */\n    LongPrototype.negate = function negate() {\n        if (!this.unsigned && this.eq(MIN_VALUE))\n            return MIN_VALUE;\n        return this.not().add(ONE);\n    };\n\n    /**\n     * Negates this Long's value. This is an alias of {@link Long#negate}.\n     * @function\n     * @returns {!Long} Negated Long\n     */\n    LongPrototype.neg = LongPrototype.negate;\n\n    /**\n     * Returns the sum of this and the specified Long.\n     * @param {!Long|number|string} addend Addend\n     * @returns {!Long} Sum\n     */\n    LongPrototype.add = function add(addend) {\n        if (!isLong(addend))\n            addend = fromValue(addend);\n\n        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n        var a48 = this.high >>> 16;\n        var a32 = this.high & 0xFFFF;\n        var a16 = this.low >>> 16;\n        var a00 = this.low & 0xFFFF;\n\n        var b48 = addend.high >>> 16;\n        var b32 = addend.high & 0xFFFF;\n        var b16 = addend.low >>> 16;\n        var b00 = addend.low & 0xFFFF;\n\n        var c48 = 0,\n            c32 = 0,\n            c16 = 0,\n            c00 = 0;\n        c00 += a00 + b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xFFFF;\n        c16 += a16 + b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xFFFF;\n        c32 += a32 + b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c48 += a48 + b48;\n        c48 &= 0xFFFF;\n        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n    };\n\n    /**\n     * Returns the difference of this and the specified Long.\n     * @param {!Long|number|string} subtrahend Subtrahend\n     * @returns {!Long} Difference\n     */\n    LongPrototype.subtract = function subtract(subtrahend) {\n        if (!isLong(subtrahend))\n            subtrahend = fromValue(subtrahend);\n        return this.add(subtrahend.neg());\n    };\n\n    /**\n     * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n     * @function\n     * @param {!Long|number|string} subtrahend Subtrahend\n     * @returns {!Long} Difference\n     */\n    LongPrototype.sub = LongPrototype.subtract;\n\n    /**\n     * Returns the product of this and the specified Long.\n     * @param {!Long|number|string} multiplier Multiplier\n     * @returns {!Long} Product\n     */\n    LongPrototype.multiply = function multiply(multiplier) {\n        if (this.isZero())\n            return ZERO;\n        if (!isLong(multiplier))\n            multiplier = fromValue(multiplier);\n        if (multiplier.isZero())\n            return ZERO;\n        if (this.eq(MIN_VALUE))\n            return multiplier.isOdd() ? MIN_VALUE : ZERO;\n        if (multiplier.eq(MIN_VALUE))\n            return this.isOdd() ? MIN_VALUE : ZERO;\n\n        if (this.isNegative()) {\n            if (multiplier.isNegative())\n                return this.neg().mul(multiplier.neg());\n            else\n                return this.neg().mul(multiplier).neg();\n        } else if (multiplier.isNegative())\n            return this.mul(multiplier.neg()).neg();\n\n        // If both longs are small, use float multiplication\n        if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\n            return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n\n        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n        // We can skip products that would overflow.\n\n        var a48 = this.high >>> 16;\n        var a32 = this.high & 0xFFFF;\n        var a16 = this.low >>> 16;\n        var a00 = this.low & 0xFFFF;\n\n        var b48 = multiplier.high >>> 16;\n        var b32 = multiplier.high & 0xFFFF;\n        var b16 = multiplier.low >>> 16;\n        var b00 = multiplier.low & 0xFFFF;\n\n        var c48 = 0,\n            c32 = 0,\n            c16 = 0,\n            c00 = 0;\n        c00 += a00 * b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xFFFF;\n        c16 += a16 * b00;\n        c32 += c16 >>> 16;\n        c16 &= 0xFFFF;\n        c16 += a00 * b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xFFFF;\n        c32 += a32 * b00;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c32 += a16 * b16;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c32 += a00 * b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n        c48 &= 0xFFFF;\n        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n    };\n\n    /**\n     * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n     * @function\n     * @param {!Long|number|string} multiplier Multiplier\n     * @returns {!Long} Product\n     */\n    LongPrototype.mul = LongPrototype.multiply;\n\n    /**\n     * Returns this Long divided by the specified. The result is signed if this Long is signed or\n     *  unsigned if this Long is unsigned.\n     * @param {!Long|number|string} divisor Divisor\n     * @returns {!Long} Quotient\n     */\n    LongPrototype.divide = function divide(divisor) {\n        if (!isLong(divisor))\n            divisor = fromValue(divisor);\n        if (divisor.isZero())\n            throw Error('division by zero');\n        if (this.isZero())\n            return this.unsigned ? UZERO : ZERO;\n        var approx, rem, res;\n        if (!this.unsigned) {\n            // This section is only relevant for signed longs and is derived from the\n            // closure library as a whole.\n            if (this.eq(MIN_VALUE)) {\n                if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\n                    return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n                else if (divisor.eq(MIN_VALUE))\n                    return ONE;\n                else {\n                    // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                    var halfThis = this.shr(1);\n                    approx = halfThis.div(divisor).shl(1);\n                    if (approx.eq(ZERO)) {\n                        return divisor.isNegative() ? ONE : NEG_ONE;\n                    } else {\n                        rem = this.sub(divisor.mul(approx));\n                        res = approx.add(rem.div(divisor));\n                        return res;\n                    }\n                }\n            } else if (divisor.eq(MIN_VALUE))\n                return this.unsigned ? UZERO : ZERO;\n            if (this.isNegative()) {\n                if (divisor.isNegative())\n                    return this.neg().div(divisor.neg());\n                return this.neg().div(divisor).neg();\n            } else if (divisor.isNegative())\n                return this.div(divisor.neg()).neg();\n            res = ZERO;\n        } else {\n            // The algorithm below has not been made for unsigned longs. It's therefore\n            // required to take special care of the MSB prior to running it.\n            if (!divisor.unsigned)\n                divisor = divisor.toUnsigned();\n            if (divisor.gt(this))\n                return UZERO;\n            if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n                return UONE;\n            res = UZERO;\n        }\n\n        // Repeat the following until the remainder is less than other:  find a\n        // floating-point that approximates remainder / other *from below*, add this\n        // into the result, and subtract it from the remainder.  It is critical that\n        // the approximate value is less than or equal to the real value so that the\n        // remainder never becomes negative.\n        rem = this;\n        while (rem.gte(divisor)) {\n            // Approximate the result of division. This may be a little greater or\n            // smaller than the actual value.\n            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n\n            // We will tweak the approximate result by changing it in the 48-th digit or\n            // the smallest non-fractional digit, whichever is larger.\n            var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n                delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\n\n                // Decrease the approximation until it is smaller than the remainder.  Note\n                // that if it is too large, the product overflows and is negative.\n                approxRes = fromNumber(approx),\n                approxRem = approxRes.mul(divisor);\n            while (approxRem.isNegative() || approxRem.gt(rem)) {\n                approx -= delta;\n                approxRes = fromNumber(approx, this.unsigned);\n                approxRem = approxRes.mul(divisor);\n            }\n\n            // We know the answer can't be zero... and actually, zero would cause\n            // infinite recursion since we would make no progress.\n            if (approxRes.isZero())\n                approxRes = ONE;\n\n            res = res.add(approxRes);\n            rem = rem.sub(approxRem);\n        }\n        return res;\n    };\n\n    /**\n     * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n     * @function\n     * @param {!Long|number|string} divisor Divisor\n     * @returns {!Long} Quotient\n     */\n    LongPrototype.div = LongPrototype.divide;\n\n    /**\n     * Returns this Long modulo the specified.\n     * @param {!Long|number|string} divisor Divisor\n     * @returns {!Long} Remainder\n     */\n    LongPrototype.modulo = function modulo(divisor) {\n        if (!isLong(divisor))\n            divisor = fromValue(divisor);\n        return this.sub(this.div(divisor).mul(divisor));\n    };\n\n    /**\n     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n     * @function\n     * @param {!Long|number|string} divisor Divisor\n     * @returns {!Long} Remainder\n     */\n    LongPrototype.mod = LongPrototype.modulo;\n\n    /**\n     * Returns the bitwise NOT of this Long.\n     * @returns {!Long}\n     */\n    LongPrototype.not = function not() {\n        return fromBits(~this.low, ~this.high, this.unsigned);\n    };\n\n    /**\n     * Returns the bitwise AND of this Long and the specified.\n     * @param {!Long|number|string} other Other Long\n     * @returns {!Long}\n     */\n    LongPrototype.and = function and(other) {\n        if (!isLong(other))\n            other = fromValue(other);\n        return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n    };\n\n    /**\n     * Returns the bitwise OR of this Long and the specified.\n     * @param {!Long|number|string} other Other Long\n     * @returns {!Long}\n     */\n    LongPrototype.or = function or(other) {\n        if (!isLong(other))\n            other = fromValue(other);\n        return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n    };\n\n    /**\n     * Returns the bitwise XOR of this Long and the given one.\n     * @param {!Long|number|string} other Other Long\n     * @returns {!Long}\n     */\n    LongPrototype.xor = function xor(other) {\n        if (!isLong(other))\n            other = fromValue(other);\n        return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n    };\n\n    /**\n     * Returns this Long with bits shifted to the left by the given amount.\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shiftLeft = function shiftLeft(numBits) {\n        if (isLong(numBits))\n            numBits = numBits.toInt();\n        if ((numBits &= 63) === 0)\n            return this;\n        else if (numBits < 32)\n            return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\n        else\n            return fromBits(0, this.low << (numBits - 32), this.unsigned);\n    };\n\n    /**\n     * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shl = LongPrototype.shiftLeft;\n\n    /**\n     * Returns this Long with bits arithmetically shifted to the right by the given amount.\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shiftRight = function shiftRight(numBits) {\n        if (isLong(numBits))\n            numBits = numBits.toInt();\n        if ((numBits &= 63) === 0)\n            return this;\n        else if (numBits < 32)\n            return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\n        else\n            return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\n    };\n\n    /**\n     * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shr = LongPrototype.shiftRight;\n\n    /**\n     * Returns this Long with bits logically shifted to the right by the given amount.\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n        if (isLong(numBits))\n            numBits = numBits.toInt();\n        numBits &= 63;\n        if (numBits === 0)\n            return this;\n        else {\n            var high = this.high;\n            if (numBits < 32) {\n                var low = this.low;\n                return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\n            } else if (numBits === 32)\n                return fromBits(high, 0, this.unsigned);\n            else\n                return fromBits(high >>> (numBits - 32), 0, this.unsigned);\n        }\n    };\n\n    /**\n     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n\n    /**\n     * Converts this Long to signed.\n     * @returns {!Long} Signed long\n     */\n    LongPrototype.toSigned = function toSigned() {\n        if (!this.unsigned)\n            return this;\n        return fromBits(this.low, this.high, false);\n    };\n\n    /**\n     * Converts this Long to unsigned.\n     * @returns {!Long} Unsigned long\n     */\n    LongPrototype.toUnsigned = function toUnsigned() {\n        if (this.unsigned)\n            return this;\n        return fromBits(this.low, this.high, true);\n    };\n\n    /**\n     * Converts this Long to its byte representation.\n     * @param {boolean=} le Whether little or big endian, defaults to big endian\n     * @returns {!Array.<number>} Byte representation\n     */\n    LongPrototype.toBytes = function (le) {\n        return le ? this.toBytesLE() : this.toBytesBE();\n    }\n\n    /**\n     * Converts this Long to its little endian byte representation.\n     * @returns {!Array.<number>} Little endian byte representation\n     */\n    LongPrototype.toBytesLE = function () {\n        var hi = this.high,\n            lo = this.low;\n        return [\n            lo & 0xff, (lo >>> 8) & 0xff, (lo >>> 16) & 0xff, (lo >>> 24) & 0xff,\n            hi & 0xff, (hi >>> 8) & 0xff, (hi >>> 16) & 0xff, (hi >>> 24) & 0xff\n        ];\n    }\n\n    /**\n     * Converts this Long to its big endian byte representation.\n     * @returns {!Array.<number>} Big endian byte representation\n     */\n    LongPrototype.toBytesBE = function () {\n        var hi = this.high,\n            lo = this.low;\n        return [\n            (hi >>> 24) & 0xff, (hi >>> 16) & 0xff, (hi >>> 8) & 0xff,\n            hi & 0xff, (lo >>> 24) & 0xff, (lo >>> 16) & 0xff, (lo >>> 8) & 0xff,\n            lo & 0xff\n        ];\n    }\n\n    return Long;\n});\n\n\nif (typeof Array.prototype.forEach != 'function') {\n    Array.prototype.forEach = function (callback) {\n        for (var i = 0; i < this.length; i++) {\n            callback.apply(this, [this[i], i, this]);\n        }\n    };\n}\n\n/* webim API definitions\n */\nvar msgCache = {};\nexport var webim = { // namespace object webim\n\n    /* function init\n     *   sdk登录\n     * params:\n     *   loginInfo      - Object, 登录身份相关参数集合，详见下面\n     *   {\n     *     sdkAppID     - String, 用户标识接入SDK的应用ID，必填\n     *     accountType  - int, 账号类型，必填\n     *     identifier   - String, 用户帐号,必须是字符串类型，必填\n     *     identifierNick   - String, 用户昵称，选填\n     *     userSig      - String, 鉴权Token，必须是字符串类型，必填\n     *   }\n     *   listeners      - Object, 事件回调函数集合, 详见下面\n     *   {\n     *     onConnNotify - function(connInfo), 用于收到连接状态相关通知的回调函数,目前未使用\n     *     jsonpCallback -function(rspData),//IE9(含)以下浏览器用到的jsonp回调函数\n     *     onMsgNotify  - function(newMsgList), 用于收到消息通知的回调函数,\n     *      newMsgList为新消息数组，格式为[Msg对象]\n     *      使用方有两种处理回调: 1)处理newMsgList中的增量消息,2)直接访问webim.MsgStore获取最新的消息\n     *     onGroupInfoChangeNotify  - function(groupInfo), 用于监听群组资料变更的回调函数,\n     *          groupInfo为新的群组资料信息\n     *     onGroupSystemNotifys - Object, 用于监听（多终端同步）群系统消息的回调函数对象\n     *\n     *   }\n     *   options        - Object, 其它选项, 目前未使用\n     * return:\n     *   (无)\n     */\n    login: function (loginInfo, listeners, options) {},\n\n    /* function syncMsgs\n     *   拉取最新C2C消息\n     *   一般不需要使用方直接调用, SDK底层会自动同步最新消息并通知使用方, 一种有用的调用场景是用户手动触发刷新消息\n     * params:\n     *   cbOk   - function(msgList)类型, 当同步消息成功时的回调函数, msgList为新消息数组，格式为[Msg对象],\n     *            如果此参数为null或undefined则同步消息成功后会像自动同步那样回调cbNotify\n     *   cbErr  - function(err)类型, 当同步消息失败时的回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    syncMsgs: function (cbOk, cbErr) {},\n\n\n    /* function getC2CHistoryMsgs\n     * 拉取C2C漫游消息\n     * params:\n     *   options    - 请求参数\n     *   cbOk   - function(msgList)类型, 成功时的回调函数, msgList为消息数组，格式为[Msg对象],\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    getC2CHistoryMsgs: function (options, cbOk, cbErr) {},\n\n    /* function syncGroupMsgs\n     * 拉取群漫游消息\n     * params:\n     *   options    - 请求参数\n     *   cbOk   - function(msgList)类型, 成功时的回调函数, msgList为消息数组，格式为[Msg对象],\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    syncGroupMsgs: function (options, cbOk, cbErr) {},\n\n    /* function sendMsg\n     *   发送一条消息\n     * params:\n     *   msg    - webim.Msg类型, 要发送的消息对象\n     *   cbOk   - function()类型, 当发送消息成功时的回调函数\n     *   cbErr  - function(err)类型, 当发送消息失败时的回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    sendMsg: function (msg, cbOk, cbErr) {},\n\n    /* function logout\n     *   sdk登出\n     * params:\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    logout: function (cbOk, cbErr) {},\n\n    /* function setAutoRead\n     * 设置会话自动已读上报标志\n     * params:\n     *   selSess    - webim.Session类型, 当前会话\n     *   isOn   - boolean, 将selSess的自动已读消息标志改为isOn，同时是否上报当前会话已读消息\n     *   isResetAll - boolean，是否重置所有会话的自动已读标志\n     * return:\n     *   (无)\n     */\n    setAutoRead: function (selSess, isOn, isResetAll) {},\n\n    /* function getProfilePortrait\n     *   拉取资料（搜索用户）\n     * params:\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    getProfilePortrait: function (options, cbOk, cbErr) {},\n\n    /* function setProfilePortrait\n     *   设置个人资料\n     * params:\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    setProfilePortrait: function (options, cbOk, cbErr) {},\n\n    /* function applyAddFriend\n     *   申请添加好友\n     * params:\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    applyAddFriend: function (options, cbOk, cbErr) {},\n\n    /* function getPendency\n     *   拉取好友申请\n     * params:\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    getPendency: function (options, cbOk, cbErr) {},\n\n    /* function deletePendency\n     *   删除好友申请\n     * params:\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    deletePendency: function (options, cbOk, cbErr) {},\n\n    /* function responseFriend\n     *   响应好友申请\n     * params:\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    responseFriend: function (options, cbOk, cbErr) {},\n\n    /* function getAllFriend\n     *   拉取我的好友\n     * params:\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    getAllFriend: function (options, cbOk, cbErr) {},\n\n    /* function deleteFriend\n     *   删除好友\n     * params:\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    deleteFriend: function (options, cbOk, cbErr) {},\n\n    /* function addBlackList\n     *   增加黑名单\n     * params:\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    addBlackList: function (options, cbOk, cbErr) {},\n\n    /* function getBlackList\n     *   删除黑名单\n     * params:\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    getBlackList: function (options, cbOk, cbErr) {},\n\n    /* function deleteBlackList\n     *   我的黑名单\n     * params:\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    deleteBlackList: function (options, cbOk, cbErr) {},\n\n    /* function uploadPic\n     *   上传图片\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    uploadPic: function (options, cbOk, cbErr) {},\n\n    /* function createGroup\n     *   创建群\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    createGroup: function (options, cbOk, cbErr) {},\n\n    /* function applyJoinGroup\n     *   申请加群\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    applyJoinGroup: function (options, cbOk, cbErr) {},\n\n    /* function handleApplyJoinGroup\n     *   处理申请加群(同意或拒绝)\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    handleApplyJoinGroup: function (options, cbOk, cbErr) {},\n\n    /* function deleteApplyJoinGroupPendency\n     *   删除加群申请\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    deleteApplyJoinGroupPendency: function (options, cbOk, cbErr) {},\n\n\n    /* function quitGroup\n     *  主动退群\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    quitGroup: function (options, cbOk, cbErr) {},\n\n    /* function getGroupPublicInfo\n     *   读取群公开资料-高级接口\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    getGroupPublicInfo: function (options, cbOk, cbErr) {},\n\n    /* function getGroupInfo\n     *   读取群详细资料-高级接口\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    getGroupInfo: function (options, cbOk, cbErr) {},\n\n    /* function modifyGroupBaseInfo\n     *   修改群基本资料\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    modifyGroupBaseInfo: function (options, cbOk, cbErr) {},\n\n    /* function destroyGroup\n     *  解散群\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    destroyGroup: function (options, cbOk, cbErr) {},\n\n    /* function getJoinedGroupListHigh\n     *   获取我的群组-高级接口\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    getJoinedGroupListHigh: function (options, cbOk, cbErr) {},\n\n    /* function getGroupMemberInfo\n     *   获取群组成员列表\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    getGroupMemberInfo: function (options, cbOk, cbErr) {},\n\n    /* function addGroupMember\n     *   邀请好友加群\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    addGroupMember: function (options, cbOk, cbErr) {},\n\n    /* function modifyGroupMember\n     *   修改群成员资料（角色或者群消息提类型示）\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    modifyGroupMember: function (options, cbOk, cbErr) {},\n\n    /* function forbidSendMsg\n     *   设置群成员禁言时间\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    forbidSendMsg: function (options, cbOk, cbErr) {},\n\n    /* function deleteGroupMember\n     *   删除群成员\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    deleteGroupMember: function (options, cbOk, cbErr) {},\n\n    /* function getPendencyGroup\n     *   获取群组未决列表\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    getPendencyGroup: function (options, cbOk, cbErr) {},\n\n    /* function getPendencyReport\n     *   好友未决已读上报\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    getPendencyReport: function (options, cbOk, cbErr) {},\n\n    /* function getPendencyGroupRead\n     *   群组未决已读上报\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    getPendencyGroupRead: function (options, cbOk, cbErr) {},\n\n    /* function sendCustomGroupNotify\n     *   发送自定义群通知\n     * params:\n     *   options    - 请求参数，详见api文档\n     *   cbOk   - function()类型, 成功时回调函数\n     *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n     * return:\n     *   (无)\n     */\n    sendCustomGroupNotify: function (options, cbOk, cbErr) {},\n\n    /* class webim.Msg\n     *   一条消息的描述类, 消息发送、接收的API中都会涉及此类型的对象\n     * properties:\n     *   sess   - Session object-ref, 消息所属的会话(e.g:我与好友A的C2C会话，我与群组G的GROUP会话)\n     *   isSend - Boolean, true表示是我发出消息, false表示是发给我的消息)\n     *   seq    - Integer, 消息序列号, 用于判断消息是否同一条\n     *   random - Integer, 消息随机数,用于判断消息是否同一条\n     *   time   - Integer, 消息时间戳, 为unix timestamp\n     *   fromAccount -String,  消息发送者帐号\n     *   subType -Integer,  消息子类型，c2c消息时，0-表示普通消息；群消息时，0-普通消息，1-点赞消息，2-提示消息\n     *   fromAccountNick -String,  消息发送者昵称\n     *   elems  - Array of webim.Msg.Elem, 描述消息内容的元素列表\n     * constructor:\n     *   Msg(sess, isSend, seq,random time,fromAccount) - 构造函数, 参数定义同上面properties中定义\n     * methods:\n     *   addText(text)  - 向elems中添加一个TEXT元素\n     *   addFace(face)  - 向elems中添加一个FACE元素\n     *   toHtml()       - 转成可展示的html String\n     *addFace\n     * sub-class webim.Msg.Elem\n     *   消息中一个组成元素的描述类, 一条消息的内容被抽象描述为N个元素的有序列表\n     * properties:\n     *   type   - 元素类型, 目前有TEXT(文本)、FACE(表情)、IMAGE(图片)等\n     *   content- 元素内容体, 当TEXT时为String, 当PIC时为UrlString\n     * constructor:\n     *   Elem(type, content) - 构造函数, 参数定义同上面properties中定义\n     *\n     * sub-class webim.Msg.Elem.TextElem\n     *   文本\n     * properties:\n     *   text  - String 内容\n     * constructor:\n     *   TextElem(text) - 构造函数, 参数定义同上面properties中定义\n     *\n     * sub-class webim.Msg.Elem.FaceElem\n     *   表情\n     * properties:\n     *   index  - Integer 表情索引, 用户自定义\n     *   data   - String 额外数据，用户自定义\n     * constructor:\n     *   FaceElem(index,data) - 构造函数, 参数定义同上面properties中定义\n     *\n     *\n     */\n    Msg: function (sess, isSend, seq, random, time, fromAccount, subType, fromAccountNick, fromAccountHeadurl) { /*Class constructor*/ },\n\n    /* singleton object MsgStore\n     * webim.MsgStore是消息数据的Model对象(参考MVC概念), 它提供接口访问当前存储的会话和消息数据\n     * 下面说明下会话数据类型: Session\n     *\n     * class Session\n     *   一个Session对象描述一个会话，会话可简单理解为最近会话列表的一个条目，它由两个字段唯一标识:\n     *     type - String, 会话类型(如\"C2C\", \"GROUP\", ...)\n     *     id   - String, 会话ID(如C2C类型中为对方帐号,\"C2C\"时为好友ID,\"GROUP\"时为群ID)\n     * properties:\n     *   (Session对象未对外暴露任何属性字段, 所有访问通过下面的getter方法进行)\n     * methods:\n     *   type()     - String, 返回会话类型,\"C2C\"表示与好友私聊，\"GROUP\"表示群聊\n     *   id()       - String, 返回会话ID\n     *   name()     - String, 返回会话标题(如C2C类型中为对方的昵称,暂不支持)\n     *   icon()     - String, 返回会话图标(对C2C类型中为对方的头像URL，暂不支持)\n     *   unread()           - Integer, 返回会话未读条数\n     *   time()     - Integer, 返回会话最后活跃时间, 为unix timestamp\n     *   curMaxMsgSeq() - Integer, 返回会话最大消息序列号\n     *   msgCount() - Integer, 返回会话中所有消息条数\n     *   msg(index) - webim.Msg, 返回会话中第index条消息\n     */\n    MsgStore: {\n        /* function sessMap\n         *   获取所有会话\n         * return:\n         *   所有会话对象\n         */\n        sessMap: function () {\n            return { /*Object*/ };\n        },\n        /* function sessCount\n         *   获取当前会话的个数\n         * return:\n         *   Integer, 会话个数\n         */\n        sessCount: function () {\n            return 0;\n        },\n\n        /* function sessByTypeId\n         *   根据会话类型和会话ID取得相应会话\n         * params:\n         *   type   - String, 会话类型(如\"C2C\", \"GROUP\", ...)\n         *   id     - String, 会话ID(如对方ID)\n         * return:\n         *   Session, 会话对象(说明见上面)\n         */\n        sessByTypeId: function (type, id) {\n            return { /*Session Object*/ };\n        },\n        /* function delSessByTypeId\n         *   根据会话类型和会话ID删除相应会话\n         * params:\n         *   type   - String, 会话类型(如\"C2C\", \"GROUP\", ...)\n         *   id     - String, 会话ID(如对方ID)\n         * return:\n         *   Boolean, 布尔类型\n         */\n        delSessByTypeId: function (type, id) {\n            return true;\n        },\n\n        /* function resetCookieAndSyncFlag\n         *   重置上一次读取新c2c消息Cookie和是否继续拉取标记\n         * return:\n         *\n         */\n        resetCookieAndSyncFlag: function () {},\n\n        downloadMap: {}\n    }\n\n};\n\n/* webim API implementation\n */\n(function (webim) {\n    //sdk版本\n    var SDK = {\n        'VERSION': '1.7.2', //sdk版本号\n        'APPID': '537048168', //web im sdk 版本 APPID\n        'PLAATFORM': \"10\" //发送请求时判断其是来自web端的请求\n    };\n\n    //是否启用正式环境，默认启用\n    var isAccessFormaEnvironment = true;\n    // var isAccessFormaEnvironment = false;\n\n    //后台接口主机\n    var SRV_HOST = {\n        'FORMAL': {\n            'COMMON': 'https://webim.tim.qq.com',\n            'PIC': 'https://pic.tim.qq.com'\n        },\n        'TEST': {\n            'COMMON': 'https://test.tim.qq.com',\n            'PIC': 'https://pic.tim.qq.com'\n        }\n    };\n\n    //浏览器版本信息\n    var BROWSER_INFO = {};\n    //是否为ie9（含）以下\n    var lowerBR = false;\n\n    //服务名称\n    var SRV_NAME = {\n        'OPEN_IM': 'openim', //私聊（拉取未读c2c消息，长轮询，c2c消息已读上报等）服务名\n        'GROUP': 'group_open_http_svc', //群组管理（拉取群消息，创建群，群成员管理，群消息已读上报等）服务名\n        'FRIEND': 'sns', //关系链管理（好友管理，黑名单管理等）服务名\n        'PROFILE': 'profile', //资料管理（查询，设置个人资料等）服务名\n        'RECENT_CONTACT': 'recentcontact', //最近联系人服务名\n        'PIC': 'openpic', //图片（或文件）服务名\n        'BIG_GROUP': 'group_open_http_noauth_svc', //直播大群 群组管理（申请加大群）服务名\n        'BIG_GROUP_LONG_POLLING': 'group_open_long_polling_http_noauth_svc', //直播大群 长轮询（拉取消息等）服务名\n        'IM_OPEN_STAT': 'imopenstat', //质量上报，统计接口错误率\n        'DEL_CHAT': 'recentcontact', //删除会话\n        'WEB_IM':'webim'\n    };\n\n    //不同服务对应的版本号\n    var SRV_NAME_VER = {\n        'openim': 'v4',\n        'group_open_http_svc': 'v4',\n        'sns': 'v4',\n        'profile': 'v4',\n        'recentcontact': 'v4',\n        'openpic': 'v4',\n        'group_open_http_noauth_svc': 'v1',\n        'group_open_long_polling_http_noauth_svc': 'v1',\n        'imopenstat': 'v4',\n        'webim':'v3'\n    };\n\n    //不同的命令名对应的上报类型ID，用于接口质量上报\n    var CMD_EVENT_ID_MAP = {\n        'login': 1, //登录\n        'pic_up': 3, //上传图片\n        'apply_join_group': 9, //申请加入群组\n        'create_group': 10, //创建群组\n        'longpolling': 18, //普通长轮询\n        'send_group_msg': 19, //群聊\n        'sendmsg': 20 //私聊\n    };\n\n    //聊天类型\n    var SESSION_TYPE = {\n        'C2C': 'C2C', //私聊\n        'GROUP': 'GROUP' //群聊\n    };\n\n    //最近联系人类型\n    var RECENT_CONTACT_TYPE = {\n        'C2C': 1, //好友\n        'GROUP': 2 //群\n    };\n\n    //消息最大长度（字节）\n    var MSG_MAX_LENGTH = {\n        'C2C': 12000, //私聊消息\n        'GROUP': 8898 //群聊\n    };\n\n    //后台接口返回类型\n    var ACTION_STATUS = {\n        'OK': 'OK', //成功\n        'FAIL': 'FAIL' //失败\n    };\n\n    var ERROR_CODE_CUSTOM = 99999; //自定义后台接口返回错误码\n\n    //消息元素类型\n    var MSG_ELEMENT_TYPE = {\n        'TEXT': 'TIMTextElem', //文本\n        'FACE': 'TIMFaceElem', //表情\n        'IMAGE': 'TIMImageElem', //图片\n        'CUSTOM': 'TIMCustomElem', //自定义\n        'SOUND': 'TIMSoundElem', //语音,只支持显示\n        'FILE': 'TIMFileElem', //文件,只支持显示\n        'LOCATION': 'TIMLocationElem', //地理位置\n        'GROUP_TIP': 'TIMGroupTipElem' //群提示消息,只支持显示\n    };\n\n    //图片类型\n    var IMAGE_TYPE = {\n        'ORIGIN': 1, //原图\n        'LARGE': 2, //缩略大图\n        'SMALL': 3 //缩略小图\n    };\n    //图片格式\n    var IMAGE_FORMAT = {\n        JPG: 0x1,\n        JPEG: 0x1,\n        GIF: 0x2,\n        PNG: 0x3,\n        BMP: 0x4,\n        UNKNOWN: 0xff\n    };\n\n    //上传资源包类型\n    var UPLOAD_RES_PKG_FLAG = {\n        'RAW_DATA': 0, //原始数据\n        'BASE64_DATA': 1 //base64编码数据\n    };\n\n    //下载文件配置\n    var DOWNLOAD_FILE = {\n        'BUSSINESS_ID': '10001', //下载文件业务ID\n        'AUTH_KEY': '617574686b6579', //下载文件authkey\n        'SERVER_IP': '182.140.186.147', //下载文件服务器IP\n        'SOUND_SERVER_DOMAIN': 'grouptalk.c2c.qq.com'\n    };\n\n    //下载文件类型\n    var DOWNLOAD_FILE_TYPE = {\n        \"SOUND\": 2106, //语音\n        \"FILE\": 2107 //普通文件\n    };\n\n    //上传资源类型\n    var UPLOAD_RES_TYPE = {\n        \"IMAGE\": 1, //图片\n        \"FILE\": 2, //文件\n        \"SHORT_VIDEO\": 3, //短视频\n        \"SOUND\": 4 //语音，PTT\n    };\n\n    //版本号，用于上传图片或文件接口\n    var VERSION_INFO = {\n        'APP_VERSION': '2.1', //应用版本号\n        'SERVER_VERSION': 1 //服务端版本号\n    };\n\n    //长轮询消息类型\n    var LONG_POLLINNG_EVENT_TYPE = {\n        \"C2C\": 1 //新的c2c消息通知\n            ,\n        \"GROUP_COMMON\": 3 //新的群普通消息\n            ,\n        \"GROUP_TIP\": 4 //新的群提示消息\n            ,\n        \"GROUP_SYSTEM\": 5 //新的群系统消息\n            ,\n        \"GROUP_TIP2\": 6 //新的群提示消息2\n            ,\n        \"FRIEND_NOTICE\": 7 //好友系统通知\n            ,\n        \"PROFILE_NOTICE\": 8 //资料系统通知\n            ,\n        \"C2C_COMMON\": 9 //新的C2C消息\n            ,\n        \"C2C_EVENT\": 10\n    };\n\n    //c2c消息子类型\n    var C2C_MSG_SUB_TYPE = {\n        \"COMMON\": 0 //普通消息\n    };\n    //c2c消息子类型\n    var C2C_EVENT_SUB_TYPE = {\n        \"READED\": 92, //已读消息同步\n        \"KICKEDOUT\": 96\n    };\n\n    //群消息子类型\n    var GROUP_MSG_SUB_TYPE = {\n        \"COMMON\": 0, //普通消息\n        \"LOVEMSG\": 1, //点赞消息\n        \"TIP\": 2, //提示消息\n        \"REDPACKET\": 3 //红包消息\n    };\n\n    //群消息优先级类型\n    var GROUP_MSG_PRIORITY_TYPE = {\n        \"REDPACKET\": 1, //红包消息\n        \"COMMON\": 2, //普通消息\n        \"LOVEMSG\": 3 //点赞消息\n    };\n\n    //群提示消息类型\n    var GROUP_TIP_TYPE = {\n        \"JOIN\": 1, //加入群组\n        \"QUIT\": 2, //退出群组\n        \"KICK\": 3, //被踢出群组\n        \"SET_ADMIN\": 4, //被设置为管理员\n        \"CANCEL_ADMIN\": 5, //被取消管理员\n        \"MODIFY_GROUP_INFO\": 6, //修改群资料\n        \"MODIFY_MEMBER_INFO\": 7 //修改群成员信息\n    };\n\n    //群提示消息-群资料变更类型\n    var GROUP_TIP_MODIFY_GROUP_INFO_TYPE = {\n        \"FACE_URL\": 1, //修改群头像URL\n        \"NAME\": 2, //修改群名称\n        \"OWNER\": 3, //修改群主\n        \"NOTIFICATION\": 4, //修改群公告\n        \"INTRODUCTION\": 5 //修改群简介\n    };\n\n    //群系统消息类型\n    var GROUP_SYSTEM_TYPE = {\n        \"JOIN_GROUP_REQUEST\": 1, //申请加群请求（只有管理员会收到）\n        \"JOIN_GROUP_ACCEPT\": 2, //申请加群被同意（只有申请人能够收到）\n        \"JOIN_GROUP_REFUSE\": 3, //申请加群被拒绝（只有申请人能够收到）\n        \"KICK\": 4, //被管理员踢出群(只有被踢者接收到)\n        \"DESTORY\": 5, //群被解散(全员接收)\n        \"CREATE\": 6, //创建群(创建者接收, 不展示)\n        \"INVITED_JOIN_GROUP_REQUEST\": 7, //邀请加群(被邀请者接收)\n        \"QUIT\": 8, //主动退群(主动退出者接收, 不展示)\n        \"SET_ADMIN\": 9, //设置管理员(被设置者接收)\n        \"CANCEL_ADMIN\": 10, //取消管理员(被取消者接收)\n        \"REVOKE\": 11, //群已被回收(全员接收, 不展示)\n        \"READED\": 15, //群消息已读同步\n        \"CUSTOM\": 255, //用户自定义通知(默认全员接收)\n        \"INVITED_JOIN_GROUP_REQUEST_AGREE\": 12, //邀请加群(被邀请者需同意)\n    };\n\n    //好友系统通知子类型\n    var FRIEND_NOTICE_TYPE = {\n        \"FRIEND_ADD\": 1, //好友表增加\n        \"FRIEND_DELETE\": 2, //好友表删除\n        \"PENDENCY_ADD\": 3, //未决增加\n        \"PENDENCY_DELETE\": 4, //未决删除\n        \"BLACK_LIST_ADD\": 5, //黑名单增加\n        \"BLACK_LIST_DELETE\": 6, //黑名单删除\n        \"PENDENCY_REPORT\": 7, //未决已读上报\n        \"FRIEND_UPDATE\": 8 //好友数据更新\n    };\n\n    //资料系统通知子类型\n    var PROFILE_NOTICE_TYPE = {\n        \"PROFILE_MODIFY\": 1 //资料修改\n    };\n\n    //腾讯登录服务错误码（用于托管模式）\n    var TLS_ERROR_CODE = {\n        'OK': 0, //成功\n        'SIGNATURE_EXPIRATION': 11 //用户身份凭证过期\n    };\n\n    //长轮询连接状态\n    var CONNECTION_STATUS = {\n        'INIT': -1, //初始化\n        'ON': 0, //连接正常\n        'RECONNECT': 1, //连接恢复正常\n        'OFF': 9999 //连接已断开,可能是用户网络问题，或者长轮询接口报错引起的\n    };\n\n    var UPLOAD_PIC_BUSSINESS_TYPE = { //图片业务类型\n        'GROUP_MSG': 1, //私聊图片\n        'C2C_MSG': 2, //群聊图片\n        'USER_HEAD': 3, //用户头像\n        'GROUP_HEAD': 4 //群头像\n    };\n\n    var FRIEND_WRITE_MSG_ACTION = { //好友输入消息状态\n        'ING': 14, //正在输入\n        'STOP': 15 //停止输入\n    };\n\n    //ajax默认超时时间，单位：毫秒\n    var ajaxDefaultTimeOut = 15000;\n\n    //大群长轮询接口返回正常时，延时一定时间再发起下一次请求\n    var OK_DELAY_TIME = 1000;\n\n    //大群长轮询接口发生错误时，延时一定时间再发起下一次请求\n    var ERROR_DELAY_TIME = 5000;\n\n    //群提示消息最多显示人数\n    var GROUP_TIP_MAX_USER_COUNT = 10;\n\n    //长轮询连接状态\n    var curLongPollingStatus = CONNECTION_STATUS.INIT;\n\n    //当长轮询连接断开后，是否已经回调过\n    var longPollingOffCallbackFlag = false;\n\n    //当前长轮询返回错误次数\n    var curLongPollingRetErrorCount = 0;\n\n    //长轮询默认超时时间，单位：毫秒\n    var longPollingDefaultTimeOut = 60000;\n\n    //长轮询返回错误次数达到一定值后，发起新的长轮询请求间隔时间，单位：毫秒\n    var longPollingIntervalTime = 5000;\n\n    //没有新消息时，长轮询返回60008错误码是正常的\n    var longPollingTimeOutErrorCode = 60008;\n\n    //多实例登录被kick的错误码\n    var longPollingKickedErrorCode = 91101;\n\n    var longPollingPackageTooLargeErrorCode = 10018;\n\n    var LongPollingId = null;\n\n    //当前大群长轮询返回错误次数\n    var curBigGroupLongPollingRetErrorCount = 0;\n\n    //最大允许长轮询返回错误次数\n    var LONG_POLLING_MAX_RET_ERROR_COUNT = 10;\n\n    //上传重试累计\n    var Upload_Retry_Times = 0;\n    //最大上传重试\n    var Upload_Retry_Max_Times = 20;\n\n    //ie7/8/9采用jsonp方法解决ajax跨域限制\n    var jsonpRequestId = 0; //jsonp请求id\n    //最新jsonp请求返回的json数据\n    var jsonpLastRspData = null;\n    //兼容ie7/8/9,jsonp回调函数\n    var jsonpCallback = null;\n\n    var uploadResultIframeId = 0; //用于上传图片的iframe id\n\n    var ipList = []; //文件下载地址\n    var authkey = null; //文件下载票据\n    var expireTime = null; //文件下载票据超时时间\n\n    //错误码\n    var ERROR = {};\n    //当前登录用户\n    var ctx = {\n        sdkAppID: null,\n        appIDAt3rd: null,\n        accountType: null,\n        identifier: null,\n        tinyid: null,\n        identifierNick: null,\n        userSig: null,\n        a2: null,\n        contentType: 'json',\n        apn: 1\n    };\n    var opt = {};\n    var xmlHttpObjSeq = 0; //ajax请求id\n    var xmlHttpObjMap = {}; //发起的ajax请求\n    var curSeq = 0; //消息seq\n    var tempC2CMsgList = []; //新c2c消息临时缓存\n    var tempC2CHistoryMsgList = []; //漫游c2c消息临时缓存\n\n    var maxApiReportItemCount = 20; //一次最多上报条数\n    var apiReportItems = []; //暂存api接口质量上报数据\n    var onLongPullingNotify = null;\n\n    var Resources = {\n        downloadMap: {}\n    };\n\n    //表情标识字符和索引映射关系对象，用户可以自定义\n    var emotionDataIndexs = {\n        \"[期待]\": 1,\n        \"[谢谢]\": 2,\n        \"[神医]\": 3,\n        \"[愤怒]\": 4,\n        \"[欣喜]\": 5,\n        \"[炸弹]\": 6,\n        \"[恶魔]\": 7,\n        \"[重伤]\": 8,\n        \"[疑问]\": 9,\n        \"[脸黑]\": 10,\n        \"[无脸]\": 11,\n        \"[发烧]\": 12,\n        \"[难受]\": 13,\n        \"[哭泣]\": 14,\n        \"[笑哭]\": 15,\n        \"[晕]\": 16,\n        \"[伤心]\": 17,\n        \"[闭嘴]\": 18,\n        \"[微笑]\": 19,\n        \"[大笑]\": 20,\n        \"[憨笑]\": 21,\n        \"[龇笑]\": 22,\n        \"[酷]\": 23,\n        \"[得意]\": 24,\n        \"[困]\": 25,\n        \"[哈欠]\": 26,\n        \"[眼瞎]\": 27,\n        \"[流汗]\": 28,\n        \"[难过]\": 29,\n        \"[可怜]\": 30,\n        \"[斜眼]\": 31,\n        \"[天使]\": 32,\n        \"[受伤]\": 33\n    };\n\n    //表情对象，用户可以自定义\n    var emotions = {};\n    //工具类\n    var tool = new function () {\n\n        //格式化时间戳\n        //format格式如下：\n        //yyyy-MM-dd hh:mm:ss 年月日时分秒(默认格式)\n        //yyyy-MM-dd 年月日\n        //hh:mm:ss 时分秒\n        this.formatTimeStamp = function (timestamp, format) {\n            if (!timestamp) {\n                return 0;\n            }\n            var formatTime;\n            format = format || 'yyyy-MM-dd hh:mm:ss';\n            var date = new Date(timestamp * 1000);\n            var o = {\n                \"M+\": date.getMonth() + 1, //月份\n                \"d+\": date.getDate(), //日\n                \"h+\": date.getHours(), //小时\n                \"m+\": date.getMinutes(), //分\n                \"s+\": date.getSeconds() //秒\n            };\n            if (/(y+)/.test(format)) {\n                formatTime = format.replace(RegExp.$1, (date.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n            } else {\n                formatTime = format;\n            }\n            for (var k in o) {\n                if (new RegExp(\"(\" + k + \")\").test(formatTime))\n                    formatTime = formatTime.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : ((\"00\" + o[k]).substr((\"\" + o[k]).length)));\n            }\n            return formatTime;\n        };\n\n        //根据群类型英文名转换成中文名\n        this.groupTypeEn2Ch = function (type_en) {\n            var type_ch = null;\n            switch (type_en) {\n                case 'Public':\n                    type_ch = '公开群';\n                    break;\n                case 'ChatRoom':\n                    type_ch = '聊天室';\n                    break;\n                case 'Private':\n                    type_ch = '私有群'; //即讨论组\n                    break;\n                case 'AVChatRoom':\n                    type_ch = '直播聊天室';\n                    break;\n                default:\n                    type_ch = type_en;\n                    break;\n            }\n            return type_ch;\n        };\n        //根据群类型中文名转换成英文名\n        this.groupTypeCh2En = function (type_ch) {\n            var type_en = null;\n            switch (type_ch) {\n                case '公开群':\n                    type_en = 'Public';\n                    break;\n                case '聊天室':\n                    type_en = 'ChatRoom';\n                    break;\n                case '私有群': //即讨论组\n                    type_en = 'Private';\n                    break;\n                case '直播聊天室':\n                    type_en = 'AVChatRoom';\n                    break;\n                default:\n                    type_en = type_ch;\n                    break;\n            }\n            return type_en;\n        };\n        //根据群身份英文名转换成群身份中文名\n        this.groupRoleEn2Ch = function (role_en) {\n            var role_ch = null;\n            switch (role_en) {\n                case 'Member':\n                    role_ch = '成员';\n                    break;\n                case 'Admin':\n                    role_ch = '管理员';\n                    break;\n                case 'Owner':\n                    role_ch = '群主';\n                    break;\n                default:\n                    role_ch = role_en;\n                    break;\n            }\n            return role_ch;\n        };\n        //根据群身份中文名转换成群身份英文名\n        this.groupRoleCh2En = function (role_ch) {\n            var role_en = null;\n            switch (role_ch) {\n                case '成员':\n                    role_en = 'Member';\n                    break;\n                case '管理员':\n                    role_en = 'Admin';\n                    break;\n                case '群主':\n                    role_en = 'Owner';\n                    break;\n                default:\n                    role_en = role_ch;\n                    break;\n            }\n            return role_en;\n        };\n        //根据群消息提示类型英文转换中文\n        this.groupMsgFlagEn2Ch = function (msg_flag_en) {\n            var msg_flag_ch = null;\n            switch (msg_flag_en) {\n                case 'AcceptAndNotify':\n                    msg_flag_ch = '接收并提示';\n                    break;\n                case 'AcceptNotNotify':\n                    msg_flag_ch = '接收不提示';\n                    break;\n                case 'Discard':\n                    msg_flag_ch = '屏蔽';\n                    break;\n                default:\n                    msg_flag_ch = msg_flag_en;\n                    break;\n            }\n            return msg_flag_ch;\n        };\n        //根据群消息提示类型中文名转换英文名\n        this.groupMsgFlagCh2En = function (msg_flag_ch) {\n            var msg_flag_en = null;\n            switch (msg_flag_ch) {\n                case '接收并提示':\n                    msg_flag_en = 'AcceptAndNotify';\n                    break;\n                case '接收不提示':\n                    msg_flag_en = 'AcceptNotNotify';\n                    break;\n                case '屏蔽':\n                    msg_flag_en = 'Discard';\n                    break;\n                default:\n                    msg_flag_en = msg_flag_ch;\n                    break;\n            }\n            return msg_flag_en;\n        };\n        //将空格和换行符转换成HTML标签\n        this.formatText2Html = function (text) {\n            var html = text;\n            if (html) {\n                html = this.xssFilter(html); //用户昵称或群名称等字段会出现脚本字符串\n                html = html.replace(/ /g, \"&nbsp;\");\n                html = html.replace(/\\n/g, \"<br/>\");\n            }\n            return html;\n        };\n        //将HTML标签转换成空格和换行符\n        this.formatHtml2Text = function (html) {\n            var text = html;\n            if (text) {\n                text = text.replace(/&nbsp;/g, \" \");\n                text = text.replace(/<br\\/>/g, \"\\n\");\n            }\n            return text;\n        };\n        //获取字符串(UTF-8编码)所占字节数\n        //参考：http://zh.wikipedia.org/zh-cn/UTF-8\n        this.getStrBytes = function (str) {\n            if (str == null || str === undefined) return 0;\n            if (typeof str != \"string\") {\n                return 0;\n            }\n            var total = 0,\n                charCode, i, len;\n            for (i = 0, len = str.length; i < len; i++) {\n                charCode = str.charCodeAt(i);\n                if (charCode <= 0x007f) {\n                    total += 1; //字符代码在000000 – 00007F之间的，用一个字节编码\n                } else if (charCode <= 0x07ff) {\n                    total += 2; //000080 – 0007FF之间的字符用两个字节\n                } else if (charCode <= 0xffff) {\n                    total += 3; //000800 – 00D7FF 和 00E000 – 00FFFF之间的用三个字节，注: Unicode在范围 D800-DFFF 中不存在任何字符\n                } else {\n                    total += 4; //010000 – 10FFFF之间的用4个字节\n                }\n            }\n            return total;\n        };\n\n\n        //防止XSS攻击\n        this.xssFilter = function (val) {\n            val = val.toString();\n            val = val.replace(/[<]/g, \"&lt;\");\n            val = val.replace(/[>]/g, \"&gt;\");\n            val = val.replace(/\"/g, \"&quot;\");\n            //val = val.replace(/'/g, \"&#039;\");\n            return val;\n        };\n\n        //去掉头尾空白符\n        this.trimStr = function (str) {\n            if (!str) return '';\n            str = str.toString();\n            return str.replace(/(^\\s*)|(\\s*$)/g, \"\");\n        };\n        //判断是否为8位整数\n        this.validNumber = function (str) {\n            str = str.toString();\n            return str.match(/(^\\d{1,8}$)/g);\n        };\n        this.getReturnError = function (errorInfo, errorCode) {\n            if (!errorCode) {\n                errorCode = -100;\n            }\n            var error = {\n                'ActionStatus': ACTION_STATUS.FAIL,\n                'ErrorCode': errorCode,\n                'ErrorInfo': errorInfo + \"[\" + errorCode + \"]\"\n            };\n            return error;\n        };\n        //设置cookie\n        //name 名字\n        //value 值\n        //expires 有效期(单位：秒)\n        //path\n        //domain 作用域\n        this.setCookie = function (name, value, expires, path, domain) {\n            var exp = new Date();\n            exp.setTime(exp.getTime() + expires * 1000);\n            document.cookie = name + \"=\" + escape(value) + \";expires=\" + exp.toGMTString();\n        };\n        //获取cookie\n        this.getCookie = function (name) {\n            var result = document.cookie.match(new RegExp(\"(^| )\" + name + \"=([^;]*)(;|$)\"));\n            if (result != null) {\n                return unescape(result[2]);\n            }\n            return null;\n        };\n        //删除cookie\n        this.delCookie = function (name) {\n            var exp = new Date();\n            exp.setTime(exp.getTime() - 1);\n            var value = this.getCookie(name);\n            if (value != null)\n                document.cookie = name + \"=\" + escape(value) + \";expires=\" + exp.toGMTString();\n        };\n        //根据名字获取url参数值\n        this.getQueryString = function (name) {\n            var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\", \"i\");\n            var r = window.location.search.substr(1).match(reg);\n            if (r != null) return unescape(r[2]);\n            return null;\n        };\n        //判断IE版本号，ver表示版本号\n        this.isIE = function (ver) {\n            var b = document.createElement('b')\n            b.innerHTML = '<!--[if IE ' + ver + ']><i></i><![endif]-->'\n            return b.getElementsByTagName('i').length === 1;\n        };\n        //判断浏览器版本\n        this.getBrowserInfo = function () {\n            var Sys = {};\n            var ua = navigator.userAgent.toLowerCase();\n            log.info('navigator.userAgent=' + ua);\n            var s;\n            (s = ua.match(/msie ([\\d.]+)/)) ? Sys.ie = s[1]:\n                (s = ua.match(/firefox\\/([\\d.]+)/)) ? Sys.firefox = s[1] :\n                (s = ua.match(/chrome\\/([\\d.]+)/)) ? Sys.chrome = s[1] :\n                (s = ua.match(/opera.([\\d.]+)/)) ? Sys.opera = s[1] :\n                (s = ua.match(/version\\/([\\d.]+).*safari/)) ? Sys.safari = s[1] : 0;\n            if (Sys.ie) { //Js判断为IE浏览器\n                //ie10的判断这里有个问题\n                // Mozilla/5.0 (compatible; MSIE 9.0; qdesk 2.5.1277.202; Windows NT 6.1; WOW64; Trident/6.0)\n                // 是IE10 而不是IE9\n                if (ua.match(/trident\\/(\\d)\\./) && ua.match(/trident\\/(\\d)\\./)[1] == 6) {\n                    Sys.ie = 10\n                }\n                return {\n                    'type': 'ie',\n                    'ver': Sys.ie\n                };\n            }\n            if (Sys.firefox) { //Js判断为火狐(firefox)浏览器\n                return {\n                    'type': 'firefox',\n                    'ver': Sys.firefox\n                };\n            }\n            if (Sys.chrome) { //Js判断为谷歌chrome浏览器\n                return {\n                    'type': 'chrome',\n                    'ver': Sys.chrome\n                };\n            }\n            if (Sys.opera) { //Js判断为opera浏览器\n                return {\n                    'type': 'opera',\n                    'ver': Sys.opera\n                };\n            }\n            if (Sys.safari) { //Js判断为苹果safari浏览器\n                return {\n                    'type': 'safari',\n                    'ver': Sys.safari\n                };\n            }\n            return {\n                'type': 'unknow',\n                'ver': -1\n            };\n        };\n\n\n\n        this.replaceObject = function (keyMap, json) {\n            for (var a in json) {\n                if (keyMap[a]) {\n                    json[keyMap[a]] = json[a]\n                    delete json[a]\n                    if (json[keyMap[a]] instanceof Array) {\n                        var len = json[keyMap[a]].length\n                        for (var i = 0; i < len; i++) {\n                            json[keyMap[a]][i] = this.replaceObject(keyMap, json[keyMap[a]][i])\n                        }\n                    } else if (typeof json[keyMap[a]] === 'object') {\n                        json[keyMap[a]] = this.replaceObject(keyMap, json[keyMap[a]])\n                    }\n                }\n            }\n            return json;\n        }\n\n    };\n\n    //日志对象\n    var log = new function () {\n\n        var on = true;\n\n        this.setOn = function (onFlag) {\n            on = onFlag;\n        };\n\n        this.getOn = function () {\n            return on;\n        };\n\n        this.error = function (logStr) {\n            try {\n                on && console.error(logStr);\n            } catch (e) {}\n        };\n        this.warn = function (logStr) {\n            try {\n                on && console.warn(logStr);\n            } catch (e) {}\n        };\n        this.info = function (logStr) {\n            try {\n                on && console.info(logStr);\n            } catch (e) {}\n        };\n        this.debug = function (logStr) {\n            try {\n                on && console.debug(logStr);\n            } catch (e) {}\n        };\n    };\n    //获取unix时间戳\n    var unixtime = function (d) {\n        if (!d) d = new Date();\n        return Math.round(d.getTime() / 1000);\n    };\n    //时间戳转日期\n    var fromunixtime = function (t) {\n        return new Date(t * 1000);\n    };\n    //获取下一个消息序号\n    var nextSeq = function () {\n        if (curSeq) {\n            curSeq = curSeq + 1;\n        } else {\n            curSeq = Math.round(Math.random() * 10000000);\n        }\n        return curSeq;\n    };\n    //产生随机数\n    var createRandom = function () {\n        return Math.round(Math.random() * 4294967296);\n    };\n\n    //获取ajax请求对象\n    var getXmlHttp = function () {\n        var xmlhttp = null;\n        if (window.XMLHttpRequest) {\n            xmlhttp = new XMLHttpRequest();\n        } else {\n            try {\n                xmlhttp = new ActiveXObject(\"Msxml2.XMLHTTP\");\n            } catch (e) {\n                try {\n                    xmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } catch (e) {\n                    return null;\n                }\n            }\n        }\n        return xmlhttp;\n    }\n    //发起ajax请求\n    var ajaxRequest = function (meth, url, req, timeout, content_type, isLongPolling, cbOk, cbErr) {\n\n        var xmlHttpObj = getXmlHttp();\n\n        var error, errInfo;\n        if (!xmlHttpObj) {\n            errInfo = \"创建请求失败\";\n            var error = tool.getReturnError(errInfo, -1);\n            log.error(errInfo);\n            if (cbErr) cbErr(error);\n            return;\n        }\n        //保存ajax请求对象\n        xmlHttpObjSeq++;\n        xmlHttpObjMap[xmlHttpObjSeq] = xmlHttpObj;\n\n        xmlHttpObj.open(meth, url, true);\n        xmlHttpObj.onreadystatechange = function () {\n            if (xmlHttpObj.readyState == 4) {\n                xmlHttpObjMap[xmlHttpObjSeq] = null; //清空\n                if (xmlHttpObj.status == 200) {\n                    if (cbOk) cbOk(xmlHttpObj.responseText);\n                    xmlHttpObj = null;\n                    curLongPollingRetErrorCount = curBigGroupLongPollingRetErrorCount = 0;\n                } else {\n                    xmlHttpObj = null;\n                    //避免刷新的时候，由于abord ajax引起的错误回调\n                    setTimeout(function () {\n                        var errInfo = \"请求服务器失败,请检查你的网络是否正常\";\n                        var error = tool.getReturnError(errInfo, -2);\n                        //if (!isLongPolling && cbErr) cbErr(error);\n                        if (isLongPolling && onLongPullingNotify) {\n                            onLongPullingNotify(error);\n                        }\n                        if (cbErr) cbErr(error);\n                    }, 16);\n                }\n            }\n        };\n        xmlHttpObj.setRequestHeader('Content-Type', content_type);\n        //设置超时时间\n        if (!timeout) {\n            timeout = ajaxDefaultTimeOut; //设置ajax默认超时时间\n        }\n        if (timeout) {\n            xmlHttpObj.timeout = timeout;\n            xmlHttpObj.ontimeout = function (event) {\n                xmlHttpObj = null;\n                //var errInfo = \"请求服务器超时\";\n                //var error = tool.getReturnError(errInfo, -3);\n                //if (cbErr) cbErr(error);\n            };\n        }\n        //\n        if (xmlHttpObj.overrideMimeType) {\n            // xmlHttpObj.overrideMimeType(\"application/json;charset=utf-8\");\n        }\n\n        xmlHttpObj.send(req);\n    }\n    //发起ajax请求（json格式数据）\n    var ajaxRequestJson = function (meth, url, req, timeout, content_type, isLongPolling, cbOk, cbErr) {\n        ajaxRequest(meth, url, JSON.stringify(req), timeout, content_type, isLongPolling, function (resp) {\n            var json = null;\n            if (resp) json = JSON.parse(resp); //将返回的json字符串转换成json对象\n            if (isLongPolling && onLongPullingNotify) {\n                onLongPullingNotify(json);\n            }\n            if (cbOk) cbOk(json);\n        }, cbErr);\n    }\n    //判断用户是否已登录\n    var isLogin = function () {\n        return ctx.sdkAppID && ctx.identifier;\n    };\n    //检查是否登录\n    var checkLogin = function (cbErr, isNeedCallBack) {\n        if (!isLogin()) {\n            if (isNeedCallBack) {\n                var errInfo = \"请登录\";\n                var error = tool.getReturnError(errInfo, -4);\n\n                if (cbErr) cbErr(error);\n            }\n            return false;\n        }\n        return true;\n    };\n\n    //检查是否访问正式环境\n    var isAccessFormalEnv = function () {\n        return isAccessFormaEnvironment;\n    };\n\n    //根据不同的服务名和命令，获取对应的接口地址\n    var getApiUrl = function (srvName, cmd, cbOk, cbErr) {\n        var srvHost = SRV_HOST;\n        if (isAccessFormalEnv()) {\n            srvHost = SRV_HOST.FORMAL.COMMON;\n        } else {\n            srvHost = SRV_HOST.TEST.COMMON;\n        }\n\n        //if (srvName == SRV_NAME.RECENT_CONTACT) {\n        //    srvHost = SRV_HOST.TEST.COMMON;\n        //}\n\n        if (srvName == SRV_NAME.PIC) {\n            if (isAccessFormalEnv()) {\n                srvHost = SRV_HOST.FORMAL.PIC;\n            } else {\n                srvHost = SRV_HOST.TEST.PIC;\n            }\n        }\n\n        var url = srvHost + '/' + SRV_NAME_VER[srvName] + '/' + srvName + '/' + cmd + '?websdkappid=' + SDK.APPID + \"&v=\" + SDK.VERSION + \"&platform=\" + SDK.PLAATFORM;;\n\n        if (isLogin()) {\n            if(cmd=='login' || cmd=='accesslayer'){\n                url += '&identifier=' + encodeURIComponent(ctx.identifier) + '&usersig=' + ctx.userSig;\n            } else {\n                if (ctx.tinyid && ctx.a2) {\n                    url += '&tinyid=' + ctx.tinyid + '&a2=' + ctx.a2;\n                } else {\n                    if (cbErr) {\n                        log.error(\"tinyid或a2为空[\" + srvName + \"][\" + cmd + \"]\");\n                        cbErr(tool.getReturnError(\"tinyid或a2为空[\" + srvName + \"][\" + cmd + \"]\", -5));\n                        return false;\n                    }\n                }\n            }\n            url += '&contenttype=' + ctx.contentType;\n        }\n        url += '&sdkappid=' + ctx.sdkAppID + '&accounttype=' + ctx.accountType + '&apn=' + ctx.apn + '&reqtime=' + unixtime();\n        return url;\n    };\n\n    //获取语音下载url\n    var getSoundDownUrl = function (uuid, senderId) {\n        var soundUrl = null;\n        if (authkey && ipList[0]) {\n            // soundUrl = \"http://\" + ipList[0] + \"/asn.com/stddownload_common_file?authkey=\" + authkey + \"&bid=\" + DOWNLOAD_FILE.BUSSINESS_ID + \"&subbid=\" + ctx.sdkAppID + \"&fileid=\" + uuid + \"&filetype=\" + DOWNLOAD_FILE_TYPE.SOUND + \"&openid=\" + senderId + \"&ver=0\";\n            soundUrl = \"https://\" + DOWNLOAD_FILE.SOUND_SERVER_DOMAIN + \"/asn.com/stddownload_common_file?authkey=\" + authkey + \"&bid=\" + DOWNLOAD_FILE.BUSSINESS_ID + \"&subbid=\" + ctx.sdkAppID + \"&fileid=\" + uuid + \"&filetype=\" + DOWNLOAD_FILE_TYPE.SOUND + \"&openid=\" + senderId + \"&ver=0\";\n        } else {\n            log.error(\"拼接语音下载url不报错：ip或者authkey为空\");\n        }\n        return soundUrl;\n    };\n\n    //获取文件下载地址\n    var getFileDownUrl = function (uuid, senderId, fileName) {\n        var fileUrl = null;\n        if (authkey && ipList[0]) {\n            fileUrl = \"http://\" + ipList[0] + \"/asn.com/stddownload_common_file?authkey=\" + authkey + \"&bid=\" + DOWNLOAD_FILE.BUSSINESS_ID + \"&subbid=\" + ctx.sdkAppID + \"&fileid=\" + uuid + \"&filetype=\" + DOWNLOAD_FILE_TYPE.FILE + \"&openid=\" + senderId + \"&ver=0&filename=\" + encodeURIComponent(fileName);\n        } else {\n            log.error(\"拼接文件下载url不报错：ip或者authkey为空\");\n        }\n        Resources.downloadMap[\"uuid_\" + uuid] = fileUrl;\n        return fileUrl;\n    };\n\n    //获取文件下载地址\n    var getFileDownUrlV2 = function (uuid, senderId, fileName, downFlag, receiverId, busiId, type) {\n        var options = {\n            \"From_Account\": senderId, //\"identifer_0\",       // 类型: String, 发送者tinyid\n            \"To_Account\": receiverId, //\"identifer_1\",         // 类型: String, 接收者tinyid\n            \"os_platform\": 10, // 类型: Number, 终端的类型 1(android) 2(ios) 3(windows) 10(others...)\n            \"Timestamp\": unixtime().toString(), // 类型: Number, 时间戳\n            \"Random\": createRandom().toString(), // 类型: Number, 随机值\n            \"request_info\": [ // 类型: Array\n                {\n                    \"busi_id\": busiId, // 类型: Number, 群(1) C2C(2) 其他请联系sdk开发者分配\n                    \"download_flag\": downFlag, // 类型: Number, 申请下载地址标识  0(申请架平下载地址)  1(申请COS平台下载地址)  2(不需要申请, 直接拿url下载(这里应该不会为2))\n                    \"type\": type, // 类型: Number, 0(短视频缩略图), 1(文件), 2(短视频), 3(ptt), 其他待分配\n                    \"uuid\": uuid, // 类型: Number, 唯一标识一个文件的uuid\n                    \"version\": VERSION_INFO.SERVER_VERSION, // 类型: Number, 架平server版本\n                    \"auth_key\": authkey, // 类型: String, 认证签名\n                    \"ip\": ipList[0] // 类型: Number, 架平IP\n                }\n            ]\n        };\n        //获取下载地址\n        proto_applyDownload(options, function (resp) {\n            if (resp.error_code == 0 && resp.response_info) {\n                Resources.downloadMap[\"uuid_\" + options.uuid] = resp.response_info.url;\n            }\n            if (onAppliedDownloadUrl) {\n                onAppliedDownloadUrl({\n                    uuid: options.uuid,\n                    url: resp.response_info.url,\n                    maps: Resources.downloadMap\n                });\n            }\n        }, function (resp) {\n            log.error(\"获取下载地址失败\", options.uuid)\n        });\n    };\n\n\n    //重置ajax请求\n    var clearXmlHttpObjMap = function () {\n        //遍历xmlHttpObjMap{}\n        for (var seq in xmlHttpObjMap) {\n            var xmlHttpObj = xmlHttpObjMap[seq];\n            if (xmlHttpObj) {\n                xmlHttpObj.abort(); //中断ajax请求(长轮询)\n                xmlHttpObjMap[xmlHttpObjSeq] = null; //清空\n            }\n        }\n        xmlHttpObjSeq = 0;\n        xmlHttpObjMap = {};\n    };\n\n    //重置sdk全局变量\n    var clearSdk = function () {\n\n        clearXmlHttpObjMap();\n\n        //当前登录用户\n        ctx = {\n            sdkAppID: null,\n            appIDAt3rd: null,\n            accountType: null,\n            identifier: null,\n            identifierNick: null,\n            userSig: null,\n            contentType: 'json',\n            apn: 1\n        };\n        opt = {};\n\n        curSeq = 0;\n\n        //ie8,9采用jsonp方法解决ajax跨域限制\n        jsonpRequestId = 0; //jsonp请求id\n        //最新jsonp请求返回的json数据\n        jsonpLastRspData = null;\n\n        apiReportItems = [];\n\n        MsgManager.clear();\n        MsgStore.clear();\n\n        //重置longpollingId\n        LongPollingId = null;\n    };\n\n    //登录\n    var _login = function (loginInfo, listeners, options, cbOk, cbErr) {\n\n        clearSdk();\n\n        if (options) opt = options;\n        if (opt.isAccessFormalEnv == false) {\n            log.error(\"请切换为正式环境！！！！\");\n            isAccessFormaEnvironment = opt.isAccessFormalEnv;\n        }\n        if (opt.isLogOn == false) {\n            log.setOn(opt.isLogOn);\n        }\n        /*\n         if(opt.emotions){\n         emotions=opt.emotions;\n         webim.Emotions= emotions;\n         }\n         if(opt.emotionDataIndexs){\n         emotionDataIndexs=opt.emotionDataIndexs;\n         webim.EmotionDataIndexs= emotionDataIndexs;\n         }*/\n\n        if (!loginInfo) {\n            if (cbErr) {\n                cbErr(tool.getReturnError(\"loginInfo is empty\", -6));\n                return;\n            }\n        }\n        if (!loginInfo.sdkAppID) {\n            if (cbErr) {\n                cbErr(tool.getReturnError(\"loginInfo.sdkAppID is empty\", -7));\n                return;\n            }\n        }\n        if (!loginInfo.accountType) {\n            if (cbErr) {\n                cbErr(tool.getReturnError(\"loginInfo.accountType is empty\", -8));\n                return;\n            }\n        }\n\n        if (loginInfo.identifier) {\n            ctx.identifier = loginInfo.identifier.toString();\n        }\n        if (loginInfo.identifier && !loginInfo.userSig) {\n            if (cbErr) {\n                cbErr(tool.getReturnError(\"loginInfo.userSig is empty\", -9));\n                return;\n            }\n        }\n        if (loginInfo.userSig) {\n            ctx.userSig = loginInfo.userSig.toString();\n        }\n        ctx.sdkAppID = loginInfo.sdkAppID;\n        ctx.accountType = loginInfo.accountType;\n\n        if (ctx.identifier && ctx.userSig) { //带登录态\n          proto_accesslayer( function(){\n            //登录\n            proto_login(\n                function (identifierNick, headurl) {\n                    MsgManager.init(\n                        listeners,\n                        function (mmInitResp) {\n                            if (cbOk) {\n                                mmInitResp.identifierNick = identifierNick;\n                                mmInitResp.headurl = headurl;\n                                cbOk(mmInitResp);\n                            }\n                        }, cbErr\n                    );\n                },\n                cbErr\n            );\n           })\n        } else { //不带登录态，进入直播场景sdk\n            MsgManager.init(\n                listeners,\n                cbOk,\n                cbErr\n            );\n        }\n    };\n\n    //初始化浏览器信息\n    var initBrowserInfo = function () {\n        //初始化浏览器类型\n        BROWSER_INFO = tool.getBrowserInfo();\n        log.info('BROWSER_INFO: type=' + BROWSER_INFO.type + ', ver=' + BROWSER_INFO.ver);\n        if (BROWSER_INFO.type == \"ie\") {\n            if (parseInt(BROWSER_INFO.ver) < 10) {\n                lowerBR = true;\n            }\n        }\n    };\n\n    //接口质量上报\n    var reportApiQuality = function (cmd, errorCode, errorInfo) {\n        if (cmd == 'longpolling' && (errorCode == longPollingTimeOutErrorCode || errorCode == longPollingKickedErrorCode)) { //longpolling 返回60008错误可以视为正常,可以不上报\n            return;\n        }\n        var eventId = CMD_EVENT_ID_MAP[cmd];\n        if (eventId) {\n            var reportTime = unixtime();\n            var uniqKey = null;\n            var msgCmdErrorCode = {\n                'Code': errorCode,\n                'ErrMsg': errorInfo\n            };\n            if (ctx.a2) {\n                uniqKey = ctx.a2.substring(0, 10) + \"_\" + reportTime + \"_\" + createRandom();\n            } else if (ctx.userSig) {\n                uniqKey = ctx.userSig.substring(0, 10) + \"_\" + reportTime + \"_\" + createRandom();\n            }\n\n            if (uniqKey) {\n\n                var rptEvtItem = {\n                    \"UniqKey\": uniqKey,\n                    \"EventId\": eventId,\n                    \"ReportTime\": reportTime,\n                    \"MsgCmdErrorCode\": msgCmdErrorCode\n                };\n\n                if (cmd == 'login') {\n                    var loginApiReportItems = [];\n                    loginApiReportItems.push(rptEvtItem);\n                    var loginReportOpt = {\n                        \"EvtItems\": loginApiReportItems,\n                        \"MainVersion\": SDK.VERSION,\n                        \"Version\": \"0\"\n                    };\n                    proto_reportApiQuality(loginReportOpt,\n                        function (resp) {\n                            loginApiReportItems = null; //\n                        },\n                        function (err) {\n                            loginApiReportItems = null; //\n                        }\n                    );\n                } else {\n                    apiReportItems.push(rptEvtItem);\n                    if (apiReportItems.length >= maxApiReportItemCount) { //累计一定条数再上报\n                        var reportOpt = {\n                            \"EvtItems\": apiReportItems,\n                            \"MainVersion\": SDK.VERSION,\n                            \"Version\": \"0\"\n                        };\n                        proto_reportApiQuality(reportOpt,\n                            function (resp) {\n                                apiReportItems = []; //清空\n                            },\n                            function (err) {\n                                apiReportItems = []; //清空\n                            }\n                        );\n                    }\n                }\n\n            }\n        }\n    };\n\n    var proto_accesslayer = function( callback ){\n\t\tConnManager.apiCall(SRV_NAME.WEB_IM,\"accesslayer\", {},function( data ){\n            if( data.ErrorCode === 0 && data.WebImAccessLayer === 1){\n                SRV_HOST.FORMAL.COMMON = 'https://events.tim.qq.com';\n            }\n            callback();\n        },function(){\n            callback();\n        });\n    };\n    // REST API calls\n    //上线\n    var proto_login = function (cbOk, cbErr) {\n        ConnManager.apiCall(SRV_NAME.OPEN_IM, \"login\", {\n                \"State\": \"Online\"\n            },\n            function (loginResp) {\n                if (loginResp.TinyId) {\n                    ctx.tinyid = loginResp.TinyId;\n                } else {\n                    if (cbErr) {\n                        cbErr(tool.getReturnError(\"TinyId is empty\", -10));\n                        return;\n                    }\n                }\n                if (loginResp.A2Key) {\n                    ctx.a2 = loginResp.A2Key;\n                } else {\n                    if (cbErr) {\n                        cbErr(tool.getReturnError(\"A2Key is empty\", -11));\n                        return;\n                    }\n                }\n                var tag_list = [\n                    \"Tag_Profile_IM_Nick\",\n                    \"Tag_Profile_IM_Image\"\n                ];\n                var options = {\n                    'From_Account': ctx.identifier,\n                    'To_Account': [ctx.identifier],\n                    'LastStandardSequence': 0,\n                    'TagList': tag_list\n                };\n                proto_getProfilePortrait(\n                    options,\n                    function (resp) {\n                        var nick, image;\n                        if (resp.UserProfileItem && resp.UserProfileItem.length > 0) {\n                            for (var i in resp.UserProfileItem) {\n                                for (var j in resp.UserProfileItem[i].ProfileItem) {\n                                    switch (resp.UserProfileItem[i].ProfileItem[j].Tag) {\n                                        case 'Tag_Profile_IM_Nick':\n                                            nick = resp.UserProfileItem[i].ProfileItem[j].Value;\n                                            if (nick) ctx.identifierNick = nick;\n                                            break;\n                                        case 'Tag_Profile_IM_Image':\n                                            image = resp.UserProfileItem[i].ProfileItem[j].Value;\n                                            if (image) ctx.headurl = image;\n                                            break;\n                                    }\n                                }\n                            }\n                        }\n                        if (cbOk) cbOk(ctx.identifierNick, ctx.headurl); //回传当前用户昵称\n                    }, cbErr);\n            }, cbErr);\n    };\n    //下线\n    var proto_logout = function (type, cbOk, cbErr) {\n        if (!checkLogin(cbErr, false)) { //不带登录态\n            clearSdk();\n            if (cbOk) cbOk({\n                'ActionStatus': ACTION_STATUS.OK,\n                'ErrorCode': 0,\n                'ErrorInfo': 'logout success'\n            });\n            return;\n        }\n        if (type == \"all\") {\n            ConnManager.apiCall(SRV_NAME.OPEN_IM, \"logout\", {},\n                function (resp) {\n                    clearSdk();\n                    if (cbOk) cbOk(resp);\n                },\n                cbErr);\n        } else {\n            ConnManager.apiCall(SRV_NAME.OPEN_IM, \"longpollinglogout\", {\n                    LongPollingId: LongPollingId\n                },\n                function (resp) {\n                    clearSdk();\n                    if (cbOk) cbOk(resp);\n                },\n                cbErr);\n        }\n    };\n    //发送消息，包括私聊和群聊\n    var proto_sendMsg = function (msg, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        var msgInfo = null;\n\n        switch (msg.sess.type()) {\n            case SESSION_TYPE.C2C:\n                msgInfo = {\n                    'From_Account': ctx.identifier,\n                    'To_Account': msg.sess.id().toString(),\n                    'MsgTimeStamp': msg.time,\n                    'MsgSeq': msg.seq,\n                    'MsgRandom': msg.random,\n                    'MsgBody': [],\n                    'OfflinePushInfo': msg.offlinePushInfo\n                };\n                break;\n            case SESSION_TYPE.GROUP:\n                var subType = msg.getSubType();\n                msgInfo = {\n                    'GroupId': msg.sess.id().toString(),\n                    'From_Account': ctx.identifier,\n                    'Random': msg.random,\n                    'MsgBody': []\n                };\n                switch (subType) {\n                    case GROUP_MSG_SUB_TYPE.COMMON:\n                        msgInfo.MsgPriority = \"COMMON\";\n                        break;\n                    case GROUP_MSG_SUB_TYPE.REDPACKET:\n                        msgInfo.MsgPriority = \"REDPACKET\";\n                        break;\n                    case GROUP_MSG_SUB_TYPE.LOVEMSG:\n                        msgInfo.MsgPriority = \"LOVEMSG\";\n                        break;\n                    case GROUP_MSG_SUB_TYPE.TIP:\n                        log.error(\"不能主动发送群提示消息,subType=\" + subType);\n                        break;\n                    default:\n                        log.error(\"发送群消息时，出现未知子消息类型：subType=\" + subType);\n                        return;\n                        break;\n                }\n                break;\n            default:\n                break;\n        }\n\n        for (var i in msg.elems) {\n            var elem = msg.elems[i];\n            var msgContent = null;\n            var msgType = elem.type;\n            switch (msgType) {\n                case MSG_ELEMENT_TYPE.TEXT: //文本\n                    msgContent = {\n                        'Text': elem.content.text\n                    };\n                    break;\n                case MSG_ELEMENT_TYPE.FACE: //表情\n                    msgContent = {\n                        'Index': elem.content.index,\n                        'Data': elem.content.data\n                    };\n                    break;\n                case MSG_ELEMENT_TYPE.IMAGE: //图片\n                    var ImageInfoArray = [];\n                    for (var j in elem.content.ImageInfoArray) {\n                        ImageInfoArray.push({\n                            'Type': elem.content.ImageInfoArray[j].type,\n                            'Size': elem.content.ImageInfoArray[j].size,\n                            'Width': elem.content.ImageInfoArray[j].width,\n                            'Height': elem.content.ImageInfoArray[j].height,\n                            'URL': elem.content.ImageInfoArray[j].url\n                        });\n                    }\n                    msgContent = {\n                        'ImageFormat': elem.content.ImageFormat,\n                        'UUID': elem.content.UUID,\n                        'ImageInfoArray': ImageInfoArray\n                    };\n                    break;\n                case MSG_ELEMENT_TYPE.SOUND: //\n                    log.warn('web端暂不支持发送语音消息');\n                    continue;\n                    break;\n                case MSG_ELEMENT_TYPE.LOCATION: //\n                    log.warn('web端暂不支持发送地理位置消息');\n                    continue;\n                    break;\n                case MSG_ELEMENT_TYPE.FILE: //\n                    msgContent = {\n                        'UUID': elem.content.uuid,\n                        'FileName': elem.content.name,\n                        'FileSize': elem.content.size,\n                        'DownloadFlag': elem.content.downFlag\n                    };\n                    break;\n                case MSG_ELEMENT_TYPE.CUSTOM: //\n                    msgContent = {\n                        'Data': elem.content.data,\n                        'Desc': elem.content.desc,\n                        'Ext': elem.content.ext\n                    };\n                    msgType = MSG_ELEMENT_TYPE.CUSTOM;\n                    break;\n                default:\n                    log.warn('web端暂不支持发送' + elem.type + '消息');\n                    continue;\n                    break;\n            }\n\n            if (msg.PushInfoBoolean) {\n                msgInfo.OfflinePushInfo = msg.PushInfo; //当android终端进程被杀掉时才走push，IOS退到后台即可\n            }\n\n            msgInfo.MsgBody.push({\n                'MsgType': msgType,\n                'MsgContent': msgContent\n            });\n        }\n        if (msg.sess.type() == SESSION_TYPE.C2C) { //私聊\n            ConnManager.apiCall(SRV_NAME.OPEN_IM, \"sendmsg\", msgInfo, cbOk, cbErr);\n        } else if (msg.sess.type() == SESSION_TYPE.GROUP) { //群聊\n            ConnManager.apiCall(SRV_NAME.GROUP, \"send_group_msg\", msgInfo, cbOk, cbErr);\n        }\n    };\n    //长轮询接口\n    var proto_longPolling = function (options, cbOk, cbErr) {\n        if (!isAccessFormaEnvironment && typeof stopPolling != \"undefined\" && stopPolling == true) {\n            return;\n        }\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.OPEN_IM, \"longpolling\", options, cbOk, cbErr, longPollingDefaultTimeOut, true);\n    };\n\n    //长轮询接口(拉取直播聊天室新消息)\n    var proto_bigGroupLongPolling = function (options, cbOk, cbErr, timeout) {\n        ConnManager.apiCall(SRV_NAME.BIG_GROUP_LONG_POLLING, \"get_msg\", options, cbOk, cbErr, timeout);\n    };\n\n    //拉取未读c2c消息接口\n    var proto_getMsgs = function (cookie, syncFlag, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.OPEN_IM, \"getmsg\", {\n                'Cookie': cookie,\n                'SyncFlag': syncFlag\n            },\n            function (resp) {\n\n                if (resp.MsgList && resp.MsgList.length) {\n                    for (var i in resp.MsgList) {\n                        tempC2CMsgList.push(resp.MsgList[i]);\n                    }\n                }\n                if (resp.SyncFlag == 1) {\n                    proto_getMsgs(resp.Cookie, resp.SyncFlag, cbOk, cbErr);\n                } else {\n                    resp.MsgList = tempC2CMsgList;\n                    tempC2CMsgList = [];\n                    if (cbOk) cbOk(resp);\n                }\n            },\n            cbErr);\n    };\n    //C2C消息已读上报接口\n    var proto_c2CMsgReaded = function (cookie, c2CMsgReadedItem, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        var tmpC2CMsgReadedItem = [];\n        for (var i in c2CMsgReadedItem) {\n            var item = {\n                'To_Account': c2CMsgReadedItem[i].toAccount,\n                'LastedMsgTime': c2CMsgReadedItem[i].lastedMsgTime\n            };\n            tmpC2CMsgReadedItem.push(item);\n        }\n        ConnManager.apiCall(SRV_NAME.OPEN_IM, \"msgreaded\", {\n            C2CMsgReaded: {\n                'Cookie': cookie,\n                'C2CMsgReadedItem': tmpC2CMsgReadedItem\n            }\n        }, cbOk, cbErr);\n    };\n\n    //删除c2c消息\n    var proto_deleteC2CMsg = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.OPEN_IM, \"deletemsg\", options,\n            cbOk, cbErr);\n    };\n\n    //拉取c2c历史消息接口\n    var proto_getC2CHistoryMsgs = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.OPEN_IM, \"getroammsg\", options,\n            function (resp) {\n                var reqMsgCount = options.MaxCnt;\n                var complete = resp.Complete;\n                var rspMsgCount = resp.MaxCnt;\n                var msgKey = resp.MsgKey;\n                var lastMsgTime = resp.LastMsgTime;\n\n                if (resp.MsgList && resp.MsgList.length) {\n                    for (var i in resp.MsgList) {\n                        tempC2CHistoryMsgList.push(resp.MsgList[i]);\n                    }\n                }\n                var netxOptions = null;\n                if (complete == 0) { //还有历史消息可拉取\n                    if (rspMsgCount < reqMsgCount) {\n                        netxOptions = {\n                            'Peer_Account': options.Peer_Account,\n                            'MaxCnt': reqMsgCount - rspMsgCount,\n                            'LastMsgTime': lastMsgTime,\n                            'MsgKey': msgKey\n                        };\n                    }\n                }\n\n                if (netxOptions) { //继续拉取\n                    proto_getC2CHistoryMsgs(netxOptions, cbOk, cbErr);\n                } else {\n                    resp.MsgList = tempC2CHistoryMsgList;\n                    tempC2CHistoryMsgList = [];\n                    if (cbOk) cbOk(resp);\n                }\n            },\n            cbErr);\n    };\n\n    //群组接口\n    //创建群组\n    //协议参考：https://www.qcloud.com/doc/product/269/1615\n    var proto_createGroup = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        var opt = {\n            //必填    群组形态，包括Public（公开群），Private（私有群），ChatRoom（聊天室），AVChatRoom（互动直播聊天室）。\n            'Type': options.Type,\n            //必填    群名称，最长30字节。\n            'Name': options.Name\n        };\n        var member_list = [];\n\n        //Array 选填  初始群成员列表，最多500个。成员信息字段详情参见：群成员资料。\n        for (var i = 0; i < options.MemberList.length; i++) {\n            member_list.push({\n                'Member_Account': options.MemberList[i]\n            })\n        }\n        opt.MemberList = member_list;\n        //选填    为了使得群组ID更加简单，便于记忆传播，腾讯云支持APP在通过REST API创建群组时自定义群组ID。详情参见：自定义群组ID。\n        if (options.GroupId) {\n            opt.GroupId = options.GroupId;\n        }\n        //选填    群主id，自动添加到群成员中。如果不填，群没有群主。\n        if (options.Owner_Account) {\n            opt.Owner_Account = options.Owner_Account;\n        }\n        //选填    群简介，最长240字节。\n        if (options.Introduction) {\n            opt.Introduction = options.Introduction;\n        }\n        //选填    群公告，最长300字节。\n        if (options.Notification) {\n            opt.Notification = options.Notification;\n        }\n        //选填    最大群成员数量，最大为10000，不填默认为2000个。\n        if (options.MaxMemberCount) {\n            opt.MaxMemberCount = options.MaxMemberCount;\n        }\n        //选填    申请加群处理方式。包含FreeAccess（自由加入），NeedPermission（需要验证），DisableApply（禁止加群），不填默认为NeedPermission（需要验证）。\n        if (options.ApplyJoinOption) { //\n            opt.ApplyJoinOption = options.ApplyJoinOption;\n        }\n        //Array 选填  群组维度的自定义字段，默认情况是没有的，需要开通，详情参见：自定义字段。\n        if (options.AppDefinedData) {\n            opt.AppDefinedData = options.AppDefinedData;\n        }\n        //选填    群头像URL，最长100字节。\n        if (options.FaceUrl) {\n            opt.FaceUrl = options.FaceUrl;\n        }\n        ConnManager.apiCall(SRV_NAME.GROUP, \"create_group\", opt,\n            cbOk, cbErr);\n    };\n\n    //创建群组-高级接口\n    //协议参考：https://www.qcloud.com/doc/product/269/1615\n    var proto_createGroupHigh = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.GROUP, \"create_group\", options,\n            cbOk, cbErr);\n    };\n\n    //修改群组基本资料\n    //协议参考：https://www.qcloud.com/doc/product/269/1620\n    var proto_modifyGroupBaseInfo = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.GROUP, \"modify_group_base_info\", options,\n            cbOk, cbErr);\n    };\n\n    //申请加群\n    var proto_applyJoinGroup = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        options.GroupId = String(options.GroupId)\n        ConnManager.apiCall(SRV_NAME.GROUP, \"apply_join_group\", {\n                'GroupId': options.GroupId,\n                'ApplyMsg': options.ApplyMsg,\n                'UserDefinedField': options.UserDefinedField\n            },\n            cbOk, cbErr);\n    };\n\n    //申请加入大群\n    // var BigGroupId;\n    var proto_applyJoinBigGroup = function (options, cbOk, cbErr) {\n        options.GroupId = String(options.GroupId)\n        //BigGroupId = options.GroupId;\n        var srvName;\n        if (!checkLogin(cbErr, false)) { //未登录\n            srvName = SRV_NAME.BIG_GROUP;\n        } else { //已登录\n            srvName = SRV_NAME.GROUP;\n        }\n        if( MsgManager.checkBigGroupLongPollingOn( options.GroupId ) ) {\n            cbErr && cbErr(tool.getReturnError(\"Join Group failed; You have already been in this group, you have to quit group before you rejoin\",10013));\n            return;\n        }\n        ConnManager.apiCall(srvName, \"apply_join_group\", {\n                'GroupId': options.GroupId,\n                'ApplyMsg': options.ApplyMsg,\n                'UserDefinedField': options.UserDefinedField\n            },\n            function (resp) {\n                if (resp.JoinedStatus && resp.JoinedStatus == 'JoinedSuccess') {\n                    if (resp.LongPollingKey) {\n                        MsgManager.setBigGroupLongPollingOn(true); //开启长轮询\n                        MsgManager.setBigGroupLongPollingKey(options.GroupId, resp.LongPollingKey); //更新大群长轮询key\n                        MsgManager.setBigGroupLongPollingMsgMap(options.GroupId, 0); //收到的群消息置0\n                        MsgManager.bigGroupLongPolling( options.GroupId ); //开启长轮询\n                    } else { //没有返回LongPollingKey，说明申请加的群不是直播聊天室(AVChatRoom)\n                        cbErr && cbErr(tool.getReturnError(\"Join Group succeed; But the type of group is not AVChatRoom: groupid=\" + options.GroupId, -12));\n                        return;\n                    }\n                }\n                if (cbOk) cbOk(resp);\n            },\n            function (err) {\n\n                if (cbErr) cbErr(err);\n            });\n    };\n\n    //处理加群申请(同意或拒绝)\n    var proto_handleApplyJoinGroupPendency = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.GROUP, \"handle_apply_join_group\", {\n                'GroupId': options.GroupId,\n                'Applicant_Account': options.Applicant_Account,\n                'HandleMsg': options.HandleMsg,\n                'Authentication': options.Authentication,\n                'MsgKey': options.MsgKey,\n                'ApprovalMsg': options.ApprovalMsg,\n                'UserDefinedField': options.UserDefinedField\n            },\n            cbOk,\n            function (err) {\n                if (err.ErrorCode == 10024) { //apply has be handled\n                    if (cbOk) {\n                        var resp = {\n                            'ActionStatus': ACTION_STATUS.OK,\n                            'ErrorCode': 0,\n                            'ErrorInfo': '该申请已经被处理过'\n                        };\n                        cbOk(resp);\n                    }\n                } else {\n                    if (cbErr) cbErr(err);\n                }\n            }\n        );\n    };\n\n    //获取群组未决列表\n    var proto_getPendencyGroup = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.GROUP, \"get_pendency\", {\n                'StartTime': options.StartTime,\n                'Limit': options.Limit,\n                'Handle_Account': ctx.identifier\n            },\n            cbOk,\n            function (err) {\n\n            }\n        );\n    };\n\n\n    //群组未决已经上报\n    var proto_getPendencyGroupRead = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.GROUP, \"report_pendency\", {\n                'ReportTime': options.ReportTime,\n                'From_Account': ctx.identifier\n            },\n            cbOk,\n            function (err) {\n\n            }\n        );\n    };\n\n    //处理被邀请进群申请(同意或拒绝)\n    var proto_handleInviteJoinGroupRequest = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.GROUP, \"handle_invite_join_group\", {\n                'GroupId': options.GroupId,\n                'Inviter_Account': options.Inviter_Account,\n                'HandleMsg': options.HandleMsg,\n                'Authentication': options.Authentication,\n                'MsgKey': options.MsgKey,\n                'ApprovalMsg': options.ApprovalMsg,\n                'UserDefinedField': options.UserDefinedField\n            },\n            cbOk,\n            function (err) {\n\n            }\n        );\n    };\n\n    //主动退群\n    var proto_quitGroup = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.GROUP, \"quit_group\", {\n                'GroupId': options.GroupId\n            },\n            cbOk, cbErr);\n    };\n\n    //退出大群\n    var proto_quitBigGroup = function (options, cbOk, cbErr) {\n        var srvName;\n        if (!checkLogin(cbErr, false)) { //未登录\n            srvName = SRV_NAME.BIG_GROUP;\n        } else { //已登录\n            srvName = SRV_NAME.GROUP;\n        }\n        MsgManager.resetBigGroupLongPollingInfo( options.GroupId );\n        ConnManager.apiCall(srvName, \"quit_group\", {\n                'GroupId': options.GroupId\n            },\n            function (resp) {\n\n                MsgStore.delSessByTypeId(SESSION_TYPE.GROUP, options.GroupId);\n                //重置当前再请求中的ajax\n                //clearXmlHttpObjMap();\n                //退出大群成功之后需要重置长轮询信息\n                // MsgManager.resetBigGroupLongPollingInfo();\n                if (cbOk) cbOk(resp);\n            },\n            cbErr);\n    };\n    //查找群(按名称)\n    var proto_searchGroupByName = function (options, cbOk, cbErr) {\n        ConnManager.apiCall(SRV_NAME.GROUP, \"search_group\", options, cbOk, cbErr);\n    };\n\n    //获取群组公开资料\n    var proto_getGroupPublicInfo = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.GROUP, \"get_group_public_info\", {\n                'GroupIdList': options.GroupIdList,\n                'ResponseFilter': {\n                    'GroupBasePublicInfoFilter': options.GroupBasePublicInfoFilter\n                }\n            },\n            function (resp) {\n                resp.ErrorInfo = '';\n                if (resp.GroupInfo) {\n                    for (var i in resp.GroupInfo) {\n                        var errorCode = resp.GroupInfo[i].ErrorCode;\n                        if (errorCode > 0) {\n                            resp.ActionStatus = ACTION_STATUS.FAIL;\n                            resp.GroupInfo[i].ErrorInfo = \"[\" + errorCode + \"]\" + resp.GroupInfo[i].ErrorInfo;\n                            resp.ErrorInfo += resp.GroupInfo[i].ErrorInfo + '\\n';\n                        }\n                    }\n                }\n                if (resp.ActionStatus == ACTION_STATUS.FAIL) {\n                    if (cbErr) {\n                        cbErr(resp);\n                    }\n                } else if (cbOk) {\n                    cbOk(resp);\n                }\n\n            },\n            cbErr);\n    };\n\n    //获取群组详细资料--高级\n    //请求协议参考：https://www.qcloud.com/doc/product/269/1616\n    var proto_getGroupInfo = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        var opt = {\n            'GroupIdList': options.GroupIdList,\n            'ResponseFilter': {\n                'GroupBaseInfoFilter': options.GroupBaseInfoFilter,\n                'MemberInfoFilter': options.MemberInfoFilter\n            }\n        };\n        if (options.AppDefinedDataFilter_Group) {\n            opt.ResponseFilter.AppDefinedDataFilter_Group = options.AppDefinedDataFilter_Group;\n        }\n        if (options.AppDefinedDataFilter_GroupMember) {\n            opt.ResponseFilter.AppDefinedDataFilter_GroupMember = options.AppDefinedDataFilter_GroupMember;\n        }\n        ConnManager.apiCall(SRV_NAME.GROUP, \"get_group_info\", opt,\n            cbOk, cbErr);\n    };\n\n    //获取群组成员-高级接口\n    //协议参考：https://www.qcloud.com/doc/product/269/1617\n    var proto_getGroupMemberInfo = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.GROUP, \"get_group_member_info\", {\n                'GroupId': options.GroupId,\n                'Offset': options.Offset,\n                'Limit': options.Limit,\n                'MemberInfoFilter': options.MemberInfoFilter,\n                'MemberRoleFilter': options.MemberRoleFilter,\n                'AppDefinedDataFilter_GroupMember': options.AppDefinedDataFilter_GroupMember\n            },\n            cbOk, cbErr);\n    };\n\n\n    //增加群组成员\n    //协议参考：https://www.qcloud.com/doc/product/269/1621\n    var proto_addGroupMember = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.GROUP, \"add_group_member\", {\n                'GroupId': options.GroupId,\n                'Silence': options.Silence,\n                'MemberList': options.MemberList\n            },\n            cbOk, cbErr);\n    };\n    //修改群组成员资料\n    //协议参考：https://www.qcloud.com/doc/product/269/1623\n    var proto_modifyGroupMember = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        var opt = {};\n        if (options.GroupId) {\n            opt.GroupId = options.GroupId;\n        }\n        if (options.Member_Account) {\n            opt.Member_Account = options.Member_Account;\n        }\n        //Admin或者Member\n        if (options.Role) {\n            opt.Role = options.Role;\n        }\n        // AcceptAndNotify代表解收并提示消息，Discard代表不接收也不提示消息，AcceptNotNotify代表接收消息但不提示\n        if (options.MsgFlag) {\n            opt.MsgFlag = options.MsgFlag;\n        }\n        if (options.ShutUpTime) { //禁言时间\n            opt.ShutUpTime = options.ShutUpTime;\n        }\n        if (options.NameCard) { //群名片,最大不超过50个字节\n            opt.NameCard = options.NameCard;\n        }\n        if (options.AppMemberDefinedData) { //群成员维度的自定义字段，默认情况是没有的，需要开通\n            opt.AppMemberDefinedData = options.AppMemberDefinedData;\n        }\n        ConnManager.apiCall(SRV_NAME.GROUP, \"modify_group_member_info\", opt,\n            cbOk, cbErr);\n    };\n    //删除群组成员\n    //协议参考：https://www.qcloud.com/doc/product/269/1622\n    var proto_deleteGroupMember = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.GROUP, \"delete_group_member\", {\n                'GroupId': options.GroupId,\n                'Silence': options.Silence,\n                'MemberToDel_Account': options.MemberToDel_Account,\n                'Reason': options.Reason\n            },\n            cbOk, cbErr);\n    };\n    //解散群组\n    //协议参考：https://www.qcloud.com/doc/product/269/1624\n    var proto_destroyGroup = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.GROUP, \"destroy_group\", {\n                'GroupId': options.GroupId\n            },\n            cbOk, cbErr);\n    };\n    //转让群组\n    //协议参考：https://www.qcloud.com/doc/product/269/1633\n    var proto_changeGroupOwner = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.GROUP, \"change_group_owner\", options, cbOk, cbErr);\n    };\n    //获取用户所加入的群组-高级接口\n    //协议参考：https://www.qcloud.com/doc/product/269/1625\n    var proto_getJoinedGroupListHigh = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.GROUP, \"get_joined_group_list\", {\n                'Member_Account': options.Member_Account,\n                'Limit': options.Limit,\n                'Offset': options.Offset,\n                'GroupType': options.GroupType,\n                'ResponseFilter': {\n                    'GroupBaseInfoFilter': options.GroupBaseInfoFilter,\n                    'SelfInfoFilter': options.SelfInfoFilter\n                }\n            },\n            cbOk, cbErr);\n    };\n    //查询一组UserId在群中的身份\n    //协议参考：https://www.qcloud.com/doc/product/269/1626\n    var proto_getRoleInGroup = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.GROUP, \"get_role_in_group\", {\n                'GroupId': options.GroupId,\n                'User_Account': options.User_Account\n            },\n            cbOk, cbErr);\n    };\n    //设置取消成员禁言时间\n    //协议参考：https://www.qcloud.com/doc/product/269/1627\n    var proto_forbidSendMsg = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        ConnManager.apiCall(SRV_NAME.GROUP, \"forbid_send_msg\", {\n                'GroupId': options.GroupId,\n                'Members_Account': options.Members_Account,\n                'ShutUpTime': options.ShutUpTime //单位为秒，为0时表示取消禁言\n            },\n            cbOk, cbErr);\n    };\n\n    //发送自定义群系统通知\n    var proto_sendCustomGroupNotify = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.GROUP, \"send_group_system_notification\", options,\n            cbOk, cbErr);\n    };\n\n    //拉取群消息接口\n    var proto_getGroupMsgs = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.GROUP, \"group_msg_get\", {\n                \"GroupId\": options.GroupId,\n                \"ReqMsgSeq\": options.ReqMsgSeq,\n                \"ReqMsgNumber\": options.ReqMsgNumber\n            },\n            cbOk, cbErr);\n    };\n    //群消息已读上报接口\n    var proto_groupMsgReaded = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.GROUP, \"msg_read_report\", {\n                'GroupId': options.GroupId,\n                'MsgReadedSeq': options.MsgReadedSeq\n            },\n            cbOk, cbErr);\n    };\n    //end\n\n    //好友接口\n    //处理好友接口返回的错误码\n    var convertErrorEn2ZhFriend = function (resp) {\n        var errorAccount = [];\n        if (resp.Fail_Account && resp.Fail_Account.length) {\n            errorAccount = resp.Fail_Account;\n        }\n        if (resp.Invalid_Account && resp.Invalid_Account.length) {\n            for (var k in resp.Invalid_Account) {\n                errorAccount.push(resp.Invalid_Account[k]);\n            }\n        }\n        if (errorAccount.length) {\n            resp.ActionStatus = ACTION_STATUS.FAIL;\n            resp.ErrorCode = ERROR_CODE_CUSTOM;\n            resp.ErrorInfo = '';\n            for (var i in errorAccount) {\n                var failCount = errorAccount[i];\n                for (var j in resp.ResultItem) {\n                    if (resp.ResultItem[j].To_Account == failCount) {\n\n                        var resultCode = resp.ResultItem[j].ResultCode;\n                        resp.ResultItem[j].ResultInfo = \"[\" + resultCode + \"]\" + resp.ResultItem[j].ResultInfo;\n                        resp.ErrorInfo += resp.ResultItem[j].ResultInfo + \"\\n\";\n                        break;\n                    }\n                }\n            }\n        }\n        return resp;\n    };\n    //添加好友\n    var proto_applyAddFriend = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.FRIEND, \"friend_add\", {\n                'From_Account': ctx.identifier,\n                'AddFriendItem': options.AddFriendItem\n            },\n            function (resp) {\n                var newResp = convertErrorEn2ZhFriend(resp);\n                if (newResp.ActionStatus == ACTION_STATUS.FAIL) {\n                    if (cbErr) cbErr(newResp);\n                } else if (cbOk) {\n                    cbOk(newResp);\n                }\n            }, cbErr);\n    };\n    //删除好友\n    var proto_deleteFriend = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.FRIEND, \"friend_delete\", {\n                'From_Account': ctx.identifier,\n                'To_Account': options.To_Account,\n                'DeleteType': options.DeleteType\n            },\n            function (resp) {\n                var newResp = convertErrorEn2ZhFriend(resp);\n                if (newResp.ActionStatus == ACTION_STATUS.FAIL) {\n                    if (cbErr) cbErr(newResp);\n                } else if (cbOk) {\n                    cbOk(newResp);\n                }\n            }, cbErr);\n    };\n    //删除会话\n    var proto_deleteChat = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n\n        if (options.chatType == 1) {\n            ConnManager.apiCall(SRV_NAME.DEL_CHAT, \"delete\", {\n                    'From_Account': ctx.identifier,\n                    'Type': options.chatType,\n                    'To_Account': options.To_Account\n                },\n                cbOk, cbErr);\n        } else {\n            ConnManager.apiCall(SRV_NAME.DEL_CHAT, \"delete\", {\n                    'From_Account': ctx.identifier,\n                    'Type': options.chatType,\n                    'ToGroupid': options.To_Account\n                },\n                cbOk, cbErr);\n\n        }\n\n    };\n    //获取好友申请\n    var proto_getPendency = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.FRIEND, \"pendency_get\", {\n                \"From_Account\": ctx.identifier,\n                \"PendencyType\": options.PendencyType,\n                \"StartTime\": options.StartTime,\n                \"MaxLimited\": options.MaxLimited,\n                \"LastSequence\": options.LastSequence\n            },\n            cbOk, cbErr);\n    };\n    //好友申请已读上报\n    var proto_getPendencyReport = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.FRIEND, \"PendencyReport\", {\n                \"From_Account\": ctx.identifier,\n                \"LatestPendencyTimeStamp\": options.LatestPendencyTimeStamp\n            },\n            cbOk, cbErr);\n    };\n    //删除好友申请\n    var proto_deletePendency = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.FRIEND, \"pendency_delete\", {\n                \"From_Account\": ctx.identifier,\n                \"PendencyType\": options.PendencyType,\n                \"To_Account\": options.To_Account\n\n            },\n            function (resp) {\n                var newResp = convertErrorEn2ZhFriend(resp);\n                if (newResp.ActionStatus == ACTION_STATUS.FAIL) {\n                    if (cbErr) cbErr(newResp);\n                } else if (cbOk) {\n                    cbOk(newResp);\n                }\n            }, cbErr);\n    };\n    //处理好友申请\n    var proto_responseFriend = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.FRIEND, \"friend_response\", {\n                'From_Account': ctx.identifier,\n                'ResponseFriendItem': options.ResponseFriendItem\n            },\n            function (resp) {\n                var newResp = convertErrorEn2ZhFriend(resp);\n                if (newResp.ActionStatus == ACTION_STATUS.FAIL) {\n                    if (cbErr) cbErr(newResp);\n                } else if (cbOk) {\n                    cbOk(newResp);\n                }\n            }, cbErr);\n    };\n    //我的好友\n    var proto_getAllFriend = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.FRIEND, \"friend_get_all\", {\n                'From_Account': ctx.identifier,\n                'TimeStamp': options.TimeStamp,\n                'StartIndex': options.StartIndex,\n                'GetCount': options.GetCount,\n                'LastStandardSequence': options.LastStandardSequence,\n                'TagList': options.TagList\n            },\n            cbOk, cbErr);\n    };\n\n    //资料接口\n    //查看个人资料\n    var proto_getProfilePortrait = function (options, cbOk, cbErr) {\n        if (options.To_Account.length > 100) {\n            options.To_Account.length = 100;\n            log.error('获取用户资料人数不能超过100人')\n        }\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.PROFILE, \"portrait_get\", {\n                'From_Account': ctx.identifier,\n                'To_Account': options.To_Account,\n                //'LastStandardSequence':options.LastStandardSequence,\n                'TagList': options.TagList\n            },\n            function (resp) {\n                var errorAccount = [];\n                if (resp.Fail_Account && resp.Fail_Account.length) {\n                    errorAccount = resp.Fail_Account;\n                }\n                if (resp.Invalid_Account && resp.Invalid_Account.length) {\n                    for (var k in resp.Invalid_Account) {\n                        errorAccount.push(resp.Invalid_Account[k]);\n                    }\n                }\n                if (errorAccount.length) {\n                    resp.ActionStatus = ACTION_STATUS.FAIL;\n                    resp.ErrorCode = ERROR_CODE_CUSTOM;\n                    resp.ErrorInfo = '';\n                    for (var i in errorAccount) {\n                        var failCount = errorAccount[i];\n                        for (var j in resp.UserProfileItem) {\n                            if (resp.UserProfileItem[j].To_Account == failCount) {\n                                var resultCode = resp.UserProfileItem[j].ResultCode;\n                                resp.UserProfileItem[j].ResultInfo = \"[\" + resultCode + \"]\" + resp.UserProfileItem[j].ResultInfo;\n                                resp.ErrorInfo += \"账号:\" + failCount + \",\" + resp.UserProfileItem[j].ResultInfo + \"\\n\";\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (resp.ActionStatus == ACTION_STATUS.FAIL) {\n                    if (cbErr) cbErr(resp);\n                } else if (cbOk) {\n                    cbOk(resp);\n                }\n            },\n            cbErr);\n    };\n\n    //设置个人资料\n    var proto_setProfilePortrait = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.PROFILE, \"portrait_set\", {\n                'From_Account': ctx.identifier,\n                'ProfileItem': options.ProfileItem\n            },\n            function (resp) {\n                for (var i in options.ProfileItem) {\n                    var profile = options.ProfileItem[i];\n                    if (profile.Tag == 'Tag_Profile_IM_Nick') {\n                        ctx.identifierNick = profile.Value; //更新昵称\n                        break;\n                    }\n                }\n                if (cbOk) cbOk(resp);\n            }, cbErr);\n    };\n\n    //增加黑名单\n    var proto_addBlackList = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.FRIEND, \"black_list_add\", {\n                'From_Account': ctx.identifier,\n                'To_Account': options.To_Account\n            },\n            function (resp) {\n                var newResp = convertErrorEn2ZhFriend(resp);\n                if (newResp.ActionStatus == ACTION_STATUS.FAIL) {\n                    if (cbErr) cbErr(newResp);\n                } else if (cbOk) {\n                    cbOk(newResp);\n                }\n            }, cbErr);\n    };\n\n    //删除黑名单\n    var proto_deleteBlackList = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.FRIEND, \"black_list_delete\", {\n                'From_Account': ctx.identifier,\n                'To_Account': options.To_Account\n            },\n            function (resp) {\n                var newResp = convertErrorEn2ZhFriend(resp);\n                if (newResp.ActionStatus == ACTION_STATUS.FAIL) {\n                    if (cbErr) cbErr(newResp);\n                } else if (cbOk) {\n                    cbOk(newResp);\n                }\n            }, cbErr);\n    };\n\n    //我的黑名单\n    var proto_getBlackList = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.FRIEND, \"black_list_get\", {\n                'From_Account': ctx.identifier,\n                'StartIndex': options.StartIndex,\n                'MaxLimited': options.MaxLimited,\n                'LastSequence': options.LastSequence\n            },\n            cbOk, cbErr);\n    };\n\n    //获取最近联系人\n    var proto_getRecentContactList = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.RECENT_CONTACT, \"get\", {\n                'From_Account': ctx.identifier,\n                'Count': options.Count\n            },\n            cbOk, cbErr);\n    };\n\n    //上传图片或文件\n    var proto_uploadPic = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        var cmdName;\n        if (isAccessFormalEnv()) {\n            cmdName = 'pic_up';\n        } else {\n            cmdName = 'pic_up_test';\n        }\n        ConnManager.apiCall(SRV_NAME.PIC, cmdName, {\n                'App_Version': VERSION_INFO.APP_VERSION,\n                'From_Account': ctx.identifier,\n                'To_Account': options.To_Account,\n                'Seq': options.Seq,\n                'Timestamp': options.Timestamp,\n                'Random': options.Random,\n                'File_Str_Md5': options.File_Str_Md5,\n                'File_Size': options.File_Size,\n                'File_Type': options.File_Type,\n                'Server_Ver': VERSION_INFO.SERVER_VERSION,\n                'Auth_Key': authkey,\n                'Busi_Id': options.Busi_Id,\n                'PkgFlag': options.PkgFlag,\n                'Slice_Offset': options.Slice_Offset,\n                'Slice_Size': options.Slice_Size,\n                'Slice_Data': options.Slice_Data,\n                'content_type': \"application/x-www-form-urlencoded\"\n            },\n            cbOk, cbErr);\n    };\n\n    //获取语音和文件下载IP和authkey\n    var proto_getIpAndAuthkey = function (cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.OPEN_IM, \"authkey\", {}, cbOk, cbErr);\n    };\n\n    //接口质量上报\n    var proto_reportApiQuality = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.IM_OPEN_STAT, \"web_report\", options, cbOk, cbErr);\n    };\n\n\n    var proto_getLongPollingId = function (options, cbOk, cbErr) {\n        if (!checkLogin(cbErr, true)) return;\n        ConnManager.apiCall(SRV_NAME.OPEN_IM, \"getlongpollingid\", {},\n            function (resp) {\n                cbOk && cbOk(resp);\n            }, cbErr);\n    }\n\n\n    var proto_applyDownload = function (options, cbOk, cbErr) {\n        //把下载地址push到map中\n        ConnManager.apiCall(SRV_NAME.PIC, \"apply_download\", options, cbOk, cbErr);\n    }\n\n    //end\n    initBrowserInfo();\n    // singleton object ConnManager\n    var ConnManager = lowerBR == false ? new function () {\n        var onConnCallback = null; //回调函数\n        this.init = function (onConnNotify, cbOk, cbErr) {\n            if (onConnNotify) onConnCallback = onConnNotify;\n        };\n        this.callBack = function (info) {\n            if (onConnCallback) onConnCallback(info);\n        };\n        this.clear = function () {\n            onConnCallback = null;\n        };\n        //请求后台服务接口\n        this.apiCall = function (type, cmd, data, cbOk, cbErr, timeout, isLongPolling) {\n            //封装后台服务接口地址\n            var url = getApiUrl(type, cmd, cbOk, cbErr);\n            if (url == false) return;\n            //发起ajax请求\n            var content_type = data.content_type ? data.content_type : \"application/x-www-form-urlencoded\";\n            ajaxRequestJson(\"POST\", url, data, timeout, content_type, isLongPolling, function (resp) {\n                var errorCode = null,\n                    tempErrorInfo = '';\n                if (cmd == 'pic_up') {\n                    data.Slice_Data = '';\n                }\n                var info = \"\\n request url: \\n\" + url + \"\\n request body: \\n\" + JSON.stringify(data) + \"\\n response: \\n\" + JSON.stringify(resp);\n                //成功\n                if (resp.ActionStatus == ACTION_STATUS.OK) {\n                    log.info(\"[\" + type + \"][\" + cmd + \"]success: \" + info);\n                    if (cbOk) cbOk(resp); //回调\n                    errorCode = 0;\n                    tempErrorInfo = '';\n                } else {\n                    errorCode = resp.ErrorCode;\n                    tempErrorInfo = resp.ErrorInfo;\n                    //报错\n                    if (cbErr) {\n                        resp.SrcErrorInfo = resp.ErrorInfo;\n                        resp.ErrorInfo = \"[\" + type + \"][\" + cmd + \"]failed: \" + info;\n                        if (cmd != 'longpolling' || resp.ErrorCode != longPollingTimeOutErrorCode) {\n                            log.error(resp.ErrorInfo);\n                        }\n                        cbErr(resp);\n                    }\n                }\n                reportApiQuality(cmd, errorCode, tempErrorInfo); //接口质量上报\n            }, function (err) {\n                cbErr && cbErr(err);\n                reportApiQuality(cmd, err.ErrorCode, err.ErrorInfo); //接口质量上报\n            });\n        };\n    } : new function () {\n        var onConnCallback = null; //回调函数\n        this.init = function (onConnNotify, cbOk, cbErr) {\n            if (onConnNotify) onConnCallback = onConnNotify;\n        };\n        this.callBack = function (info) {\n            if (onConnCallback) onConnCallback(info);\n        };\n        this.clear = function () {\n            onConnCallback = null;\n        };\n        //请求后台服务接口\n        this.apiCall = function (type, cmd, data, cbOk, cbErr, timeout, isLongPolling) {\n            //封装后台服务接口地址\n            var url = getApiUrl(type, cmd, cbOk, cbErr);\n            if (url == false) return;\n            //发起jsonp请求\n            var reqId = jsonpRequestId++,\n                cbkey = 'jsonpcallback', // the 'callback' key\n                cbval = 'jsonpRequest' + reqId, // the 'callback' value\n                script = document.createElement('script'),\n                loaded = 0;\n\n            window[cbval] = jsonpCallback;\n            script.type = 'text/javascript';\n            url = url + \"&\" + cbkey + \"=\" + cbval + \"&jsonpbody=\" + encodeURIComponent(JSON.stringify(data));\n            script.src = url;\n            script.async = true;\n\n            if (typeof script.onreadystatechange !== 'undefined') {\n                // need this for IE due to out-of-order onreadystatechange(), binding script\n                // execution to an event listener gives us control over when the script\n                // is executed. See http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html\n                script.event = 'onclick';\n                script.htmlFor = script.id = '_jsonpRequest_' + reqId;\n            }\n\n            script.onload = script.onreadystatechange = function () {\n                if ((this.readyState && this.readyState !== 'complete' && this.readyState !== 'loaded') || loaded) {\n                    return false;\n                }\n                script.onload = script.onreadystatechange = null;\n                script.onclick && script.onclick();\n                // Call the user callback with the last value stored and clean up values and scripts.\n                var resp = jsonpLastRspData;\n                var info = \"\\n request url: \\n\" + url + \"\\n request body: \\n\" + JSON.stringify(data) + \"\\n response: \\n\" + JSON.stringify(resp);\n                if (resp.ActionStatus == ACTION_STATUS.OK) {\n                    log.info(\"[\" + type + \"][\" + cmd + \"]success: \" + info);\n                    cbOk && cbOk(resp);\n                } else {\n                    resp.ErrorInfo = \"[\" + type + \"][\" + cmd + \"]failed \" + info;\n                    if (cmd != 'longpolling' || resp.ErrorCode != longPollingTimeOutErrorCode) {\n                        log.error(resp.ErrorInfo);\n                    } else {\n                        log.warn(\"[\" + type + \"][\" + cmd + \"]success: \" + info);\n                    }\n                    cbErr && cbErr(resp);\n                }\n                jsonpLastRspData = undefined;\n                document.body.removeChild(script);\n                loaded = 1;\n            };\n\n            // Add the script to the DOM head\n            document.body.appendChild(script);\n        };\n    };\n    // class Session\n    var Session = function (type, id, name, icon, time, seq) {\n        this._impl = {\n            skey: Session.skey(type, id),\n            type: type,\n            id: id,\n            name: name,\n            icon: icon,\n            unread: 0, //未读消息数\n            isAutoRead: false,\n            time: time >= 0 ? time : 0,\n            curMaxMsgSeq: seq >= 0 ? seq : 0,\n            msgs: [],\n            isFinished: 1\n        };\n    };\n    Session.skey = function (type, id) {\n        return type + id;\n    };\n    Session.prototype.type = function () {\n        return this._impl.type;\n    };\n    Session.prototype.id = function () {\n        return this._impl.id;\n    };\n    Session.prototype.name = function () {\n        return this._impl.name;\n    };\n    Session.prototype.icon = function () {\n        return this._impl.icon;\n    };\n    Session.prototype.unread = function (val) {\n        if (typeof val !== 'undefined') {\n            this._impl.unread = val;\n        } else {\n            return this._impl.unread;\n        }\n    };\n    Session.prototype.isFinished = function (val) {\n        if (typeof val !== 'undefined') {\n            this._impl.isFinished = val;\n        } else {\n            return this._impl.isFinished;\n        }\n    };\n    Session.prototype.time = function () {\n        return this._impl.time;\n    };\n    Session.prototype.curMaxMsgSeq = function (seq) {\n        if (typeof seq !== 'undefined') {\n            this._impl.curMaxMsgSeq = seq;\n        } else {\n            return this._impl.curMaxMsgSeq;\n        }\n    };\n    Session.prototype.msgCount = function () {\n        return this._impl.msgs.length;\n    };\n    Session.prototype.msg = function (index) {\n        return this._impl.msgs[index];\n    };\n    Session.prototype.msgs = function () {\n        return this._impl.msgs;\n    };\n    Session.prototype._impl_addMsg = function (msg, unread) {\n        this._impl.msgs.push(msg);\n        //if (!msg.isSend && msg.time > this._impl.time)\n        if (msg.time > this._impl.time)\n            this._impl.time = msg.time;\n        //if (!msg.isSend && msg.seq > this._impl.curMaxMsgSeq)\n        if (msg.seq > this._impl.curMaxMsgSeq)\n            this._impl.curMaxMsgSeq = msg.seq;\n        //自己发送的消息不计入未读数\n        if (!msg.isSend && !this._impl.isAutoRead && unread) {\n            this._impl.unread++;\n        }\n    };\n    //class C2CMsgReadedItem\n    var C2CMsgReadedItem = function (toAccount, lastedMsgTime) {\n        this.toAccount = toAccount;\n        this.lastedMsgTime = lastedMsgTime;\n    }\n\n    var calcUniqId = function (num1, num2) {\n        var str1 = parseInt(num1).toString(2) + '00000000000000000000000000000000';\n        var str2 = parseInt(num2).toString(2);\n        var arr1 = str1.split('').reverse();\n        var arr2 = str2.split('').reverse();\n        var sig = null,\n            res = [];\n        var length = arr1.length > arr2.length ? arr1.length : arr2.length;\n        for (var a = 0; a < length; a++) {\n            sig = Number(arr1[a] || 0) || Number(arr2[a] || 0);\n            res.push(sig);\n        }\n        var numstr = res.reverse().join(\"\");\n        var long = {\n            high: \"0x\" + parseInt(numstr.substr(0, numstr.length - 32), 2).toString(16),\n            low: \"0x\" + parseInt(numstr.substr(numstr.length - 32 - 1), 2).toString(16)\n        }\n        var longVal = new Long(long.low, long.high, true);\n        return longVal.toString();\n    };\n    // class Msg\n    var Msg = function (sess, isSend, seq, random, time, fromAccount, subType, fromAccountNick , fromAccountHeadurl) {\n        this.sess = sess;\n        this.subType = subType >= 0 ? subType : 0; //消息类型,c2c消息时，type取值为0；group消息时，type取值0和1，0-普通群消息，1-群提示消息\n        this.fromAccount = fromAccount;\n        this.fromAccountNick = fromAccountNick ? fromAccountNick : fromAccount;\n        this.fromAccountHeadurl = fromAccountHeadurl || null;\n        this.isSend = Boolean(isSend);\n        this.seq = seq >= 0 ? seq : nextSeq();\n        this.random = random >= 0 ? random : createRandom();\n        this.time = time >= 0 ? time : unixtime();\n        this.elems = [];\n        var type = sess.type();\n        switch (type) {\n            case SESSION_TYPE.GROUP:\n                this.uniqueId = calcUniqId(this.seq, this.random);\n                break;\n            case SESSION_TYPE.C2C:\n            default:\n                this.uniqueId = calcUniqId(this.time, this.random);\n                break;\n        }\n\n\n    };\n    Msg.prototype.getSession = function () {\n        return this.sess;\n    };\n    Msg.prototype.getType = function () {\n        return this.subType;\n    };\n    Msg.prototype.getSubType = function () {\n        return this.subType;\n    };\n    Msg.prototype.getFromAccount = function () {\n        return this.fromAccount;\n    };\n    Msg.prototype.getFromAccountNick = function () {\n        return this.fromAccountNick;\n    };\n    Msg.prototype.getIsSend = function () {\n        return this.isSend;\n    };\n    Msg.prototype.getSeq = function () {\n        return this.seq;\n    };\n    Msg.prototype.getTime = function () {\n        return this.time;\n    };\n    Msg.prototype.getRandom = function () {\n        return this.random;\n    };\n    Msg.prototype.getElems = function () {\n        return this.elems;\n    };\n    Msg.prototype.getMsgUniqueId = function () {\n        return this.uniqueId;\n    };\n    //文本\n    Msg.prototype.addText = function (text) {\n        this.addElem(new webim.Msg.Elem(MSG_ELEMENT_TYPE.TEXT, text));\n    };\n    //表情\n    Msg.prototype.addFace = function (face) {\n        this.addElem(new webim.Msg.Elem(MSG_ELEMENT_TYPE.FACE, face));\n    };\n    //图片\n    Msg.prototype.addImage = function (image) {\n        this.addElem(new webim.Msg.Elem(MSG_ELEMENT_TYPE.IMAGE, image));\n    };\n    //地理位置\n    Msg.prototype.addLocation = function (location) {\n        this.addElem(new webim.Msg.Elem(MSG_ELEMENT_TYPE.LOCATION, location));\n    };\n    //文件\n    Msg.prototype.addFile = function (file) {\n        this.addElem(new webim.Msg.Elem(MSG_ELEMENT_TYPE.FILE, file));\n    };\n    //自定义\n    Msg.prototype.addCustom = function (custom) {\n        this.addElem(new webim.Msg.Elem(MSG_ELEMENT_TYPE.CUSTOM, custom));\n    };\n    Msg.prototype.addElem = function (elem) {\n        this.elems.push(elem);\n    };\n    Msg.prototype.toHtml = function () {\n        var html = \"\";\n        for (var i in this.elems) {\n            var elem = this.elems[i];\n            html += elem.toHtml();\n        }\n        return html;\n    };\n\n    // 暴力点 直接添加，内部的配置不细写\n    Msg.prototype.setOfflinePushInfo = function (offlinePushInfo) {\n        this.offlinePushInfo = offlinePushInfo;\n    };\n\n    // class Msg.Elem\n    Msg.Elem = function (type, value) {\n        this.type = type;\n        this.content = value;\n    };\n    Msg.Elem.prototype.getType = function () {\n        return this.type;\n    };\n    Msg.Elem.prototype.getContent = function () {\n        return this.content;\n    };\n    Msg.Elem.prototype.toHtml = function () {\n        var html;\n        html = this.content.toHtml();\n        return html;\n    };\n\n    // class Msg.Elem.Text\n    Msg.Elem.Text = function (text) {\n        this.text = tool.xssFilter(text);\n    };\n    Msg.Elem.Text.prototype.getText = function () {\n        return this.text;\n    };\n    Msg.Elem.Text.prototype.toHtml = function () {\n        return this.text;\n    };\n\n    // class Msg.Elem.Face\n    Msg.Elem.Face = function (index, data) {\n        this.index = index;\n        this.data = data;\n    };\n    Msg.Elem.Face.prototype.getIndex = function () {\n        return this.index;\n    };\n    Msg.Elem.Face.prototype.getData = function () {\n        return this.data;\n    };\n    Msg.Elem.Face.prototype.toHtml = function () {\n        var faceUrl = null;\n        var index = emotionDataIndexs[this.data];\n        var emotion = emotions[index];\n        if (emotion && emotion[1]) {\n            faceUrl = emotion[1];\n        }\n        if (faceUrl) {\n            return \"<img src='\" + faceUrl + \"'/>\";\n        } else {\n            return this.data;\n        }\n    };\n\n    // 地理位置消息 class Msg.Elem.Location\n    Msg.Elem.Location = function (longitude, latitude, desc) {\n        this.latitude = latitude; //纬度\n        this.longitude = longitude; //经度\n        this.desc = desc; //描述\n    };\n    Msg.Elem.Location.prototype.getLatitude = function () {\n        return this.latitude;\n    };\n    Msg.Elem.Location.prototype.getLongitude = function () {\n        return this.longitude;\n    };\n    Msg.Elem.Location.prototype.getDesc = function () {\n        return this.desc;\n    };\n    Msg.Elem.Location.prototype.toHtml = function () {\n        return '经度=' + this.longitude + ',纬度=' + this.latitude + ',描述=' + this.desc;\n    };\n\n    //图片消息\n    // class Msg.Elem.Images\n    Msg.Elem.Images = function (imageId, format) {\n        this.UUID = imageId;\n        if (typeof format !== 'number') {\n            format = parseInt(IMAGE_FORMAT[format] || IMAGE_FORMAT['UNKNOWN'], 10);\n        }\n        this.ImageFormat = format;\n        this.ImageInfoArray = [];\n    };\n    Msg.Elem.Images.prototype.addImage = function (image) {\n        this.ImageInfoArray.push(image);\n    };\n    Msg.Elem.Images.prototype.toHtml = function () {\n        var smallImage = this.getImage(IMAGE_TYPE.SMALL);\n        var bigImage = this.getImage(IMAGE_TYPE.LARGE);\n        var oriImage = this.getImage(IMAGE_TYPE.ORIGIN);\n        if (!bigImage) {\n            bigImage = smallImage;\n        }\n        if (!oriImage) {\n            oriImage = smallImage;\n        }\n        return \"<img src='\" + smallImage.getUrl() + \"#\" + bigImage.getUrl() + \"#\" + oriImage.getUrl() + \"' style='CURSOR: hand' id='\" + this.getImageId() + \"' bigImgUrl='\" + bigImage.getUrl() + \"' onclick='imageClick(this)' />\";\n\n    };\n    Msg.Elem.Images.prototype.getImageId = function () {\n        return this.UUID;\n    };\n    Msg.Elem.Images.prototype.getImageFormat = function () {\n        return this.ImageFormat;\n    };\n    Msg.Elem.Images.prototype.getImage = function (type) {\n        for (var i in this.ImageInfoArray) {\n            if (this.ImageInfoArray[i].getType() == type) {\n                return this.ImageInfoArray[i];\n            }\n        }\n        var img = null;\n        this.ImageInfoArray.forEach(function (image) {\n            if (image.getType() == type) {\n                img = image;\n            }\n        })\n        return img;\n    };\n    // class Msg.Elem.Images.Image\n    Msg.Elem.Images.Image = function (type, size, width, height, url) {\n        this.type = type;\n        this.size = size;\n        this.width = width;\n        this.height = height;\n        this.url = url;\n    };\n    Msg.Elem.Images.Image.prototype.getType = function () {\n        return this.type;\n    };\n    Msg.Elem.Images.Image.prototype.getSize = function () {\n        return this.size;\n    };\n    Msg.Elem.Images.Image.prototype.getWidth = function () {\n        return this.width;\n    };\n    Msg.Elem.Images.Image.prototype.getHeight = function () {\n        return this.height;\n    };\n    Msg.Elem.Images.Image.prototype.getUrl = function () {\n        return this.url;\n    };\n\n    // class Msg.Elem.Sound\n    Msg.Elem.Sound = function (uuid, second, size, senderId, receiverId, downFlag, chatType) {\n        this.uuid = uuid; //文件id\n        this.second = second; //时长，单位：秒\n        this.size = size; //大小，单位：字节\n        this.senderId = senderId; //发送者\n        this.receiverId = receiverId; //接收方id\n        this.downFlag = downFlag; //下载标志位\n        this.busiId = chatType == SESSION_TYPE.C2C ? 2 : 1; //busi_id ( 1：群    2:C2C)\n\n        //根据不同情况拉取数据\n        //是否需要申请下载地址  0:到架平申请  1:到cos申请  2:不需要申请, 直接拿url下载\n        if (this.downFlag !== undefined && this.busiId !== undefined) {\n            getFileDownUrlV2(uuid, senderId, second, downFlag, receiverId, this.busiId, UPLOAD_RES_TYPE.SOUND);\n        } else {\n            this.downUrl = getSoundDownUrl(uuid, senderId, second); //下载地址\n        }\n    };\n    Msg.Elem.Sound.prototype.getUUID = function () {\n        return this.uuid;\n    };\n    Msg.Elem.Sound.prototype.getSecond = function () {\n        return this.second;\n    };\n    Msg.Elem.Sound.prototype.getSize = function () {\n        return this.size;\n    };\n    Msg.Elem.Sound.prototype.getSenderId = function () {\n        return this.senderId;\n    };\n    Msg.Elem.Sound.prototype.getDownUrl = function () {\n        return this.downUrl;\n    };\n    Msg.Elem.Sound.prototype.toHtml = function () {\n        if (BROWSER_INFO.type == 'ie' && parseInt(BROWSER_INFO.ver) <= 8) {\n            return '[这是一条语音消息]demo暂不支持ie8(含)以下浏览器播放语音,语音URL:' + this.downUrl;\n        }\n        return '<audio id=\"uuid_' + this.uuid + '\" src=\"' + this.downUrl + '\" controls=\"controls\" onplay=\"onChangePlayAudio(this)\" preload=\"none\"></audio>';\n    };\n\n    // class Msg.Elem.File\n    Msg.Elem.File = function (uuid, name, size, senderId, receiverId, downFlag, chatType) {\n        this.uuid = uuid; //文件id\n        this.name = name; //文件名\n        this.size = size; //大小，单位：字节\n        this.senderId = senderId; //发送者\n        this.receiverId = receiverId; //接收方id\n        this.downFlag = downFlag; //下载标志位\n\n        this.busiId = chatType == SESSION_TYPE.C2C ? 2 : 1; //busi_id ( 1：群    2:C2C)\n        //根据不同情况拉取数据\n        //是否需要申请下载地址  0:到架平申请  1:到cos申请  2:不需要申请, 直接拿url下载\n        if (downFlag !== undefined && busiId !== undefined) {\n            getFileDownUrlV2(uuid, senderId, name, downFlag, receiverId, this.busiId, UPLOAD_RES_TYPE.FILE);\n        } else {\n            this.downUrl = getFileDownUrl(uuid, senderId, name); //下载地址\n        }\n    };\n    Msg.Elem.File.prototype.getUUID = function () {\n        return this.uuid;\n    };\n    Msg.Elem.File.prototype.getName = function () {\n        return this.name;\n    };\n    Msg.Elem.File.prototype.getSize = function () {\n        return this.size;\n    };\n    Msg.Elem.File.prototype.getSenderId = function () {\n        return this.senderId;\n    };\n    Msg.Elem.File.prototype.getDownUrl = function () {\n        return this.downUrl;\n    };\n    Msg.Elem.File.prototype.getDownFlag = function () {\n        return this.downFlag;\n    };\n    Msg.Elem.File.prototype.toHtml = function () {\n        var fileSize, unitStr;\n        fileSize = this.size;\n        unitStr = \"Byte\";\n        if (this.size >= 1024) {\n            fileSize = Math.round(this.size / 1024);\n            unitStr = \"KB\";\n        }\n        return '<a href=\"javascript\" onclick=\"webim.onDownFile(\"' + this.uuid + '\")\" title=\"点击下载文件\" ><i class=\"glyphicon glyphicon-file\">&nbsp;' + this.name + '(' + fileSize + unitStr + ')</i></a>';\n    };\n\n    // class Msg.Elem.GroupTip 群提示消息对象\n    Msg.Elem.GroupTip = function (opType, opUserId, groupId, groupName, userIdList, userinfo) {\n        this.opType = opType; //操作类型\n        this.opUserId = opUserId; //操作者id\n        this.groupId = groupId; //群id\n        this.groupName = groupName; //群名称\n        this.userIdList = userIdList ? userIdList : []; //被操作的用户id列表\n        this.groupInfoList = []; //新的群资料信息，群资料变更时才有值\n        this.memberInfoList = []; //新的群成员资料信息，群成员资料变更时才有值\n        this.groupMemberNum = null; //群成员数，操作类型为加群或者退群时才有值\n        this.userinfo = userinfo ? userinfo : []; //被操作的用户信息列表列表\n    };\n    Msg.Elem.GroupTip.prototype.addGroupInfo = function (groupInfo) {\n        this.groupInfoList.push(groupInfo);\n    };\n    Msg.Elem.GroupTip.prototype.addMemberInfo = function (memberInfo) {\n        this.memberInfoList.push(memberInfo);\n    };\n    Msg.Elem.GroupTip.prototype.getOpType = function () {\n        return this.opType;\n    };\n    Msg.Elem.GroupTip.prototype.getOpUserId = function () {\n        return this.opUserId;\n    };\n    Msg.Elem.GroupTip.prototype.getGroupId = function () {\n        return this.groupId;\n    };\n    Msg.Elem.GroupTip.prototype.getGroupName = function () {\n        return this.groupName;\n    };\n    Msg.Elem.GroupTip.prototype.getUserIdList = function () {\n        return this.userIdList;\n    };\n    Msg.Elem.GroupTip.prototype.getUserInfo = function () {\n        return this.userinfo;\n    };\n    Msg.Elem.GroupTip.prototype.getGroupInfoList = function () {\n        return this.groupInfoList;\n    };\n    Msg.Elem.GroupTip.prototype.getMemberInfoList = function () {\n        return this.memberInfoList;\n    };\n    Msg.Elem.GroupTip.prototype.getGroupMemberNum = function () {\n        return this.groupMemberNum;\n    };\n    Msg.Elem.GroupTip.prototype.setGroupMemberNum = function (groupMemberNum) {\n        return this.groupMemberNum = groupMemberNum;\n    };\n    Msg.Elem.GroupTip.prototype.toHtml = function () {\n        var text = \"[群提示消息]\";\n        var maxIndex = GROUP_TIP_MAX_USER_COUNT - 1;\n        switch (this.opType) {\n            case GROUP_TIP_TYPE.JOIN: //加入群\n                text += this.opUserId + \"邀请了\";\n                for (var m in this.userIdList) {\n                    text += this.userIdList[m] + \",\";\n                    if (this.userIdList.length > GROUP_TIP_MAX_USER_COUNT && m == maxIndex) {\n                        text += \"等\" + this.userIdList.length + \"人\";\n                        break;\n                    }\n                }\n                text += \"加入该群\";\n                break;\n            case GROUP_TIP_TYPE.QUIT: //退出群\n                text += this.opUserId + \"主动退出该群\";\n                break;\n            case GROUP_TIP_TYPE.KICK: //踢出群\n                text += this.opUserId + \"将\";\n                for (var m in this.userIdList) {\n                    text += this.userIdList[m] + \",\";\n                    if (this.userIdList.length > GROUP_TIP_MAX_USER_COUNT && m == maxIndex) {\n                        text += \"等\" + this.userIdList.length + \"人\";\n                        break;\n                    }\n                }\n                text += \"踢出该群\";\n                break;\n            case GROUP_TIP_TYPE.SET_ADMIN: //设置管理员\n                text += this.opUserId + \"将\";\n                for (var m in this.userIdList) {\n                    text += this.userIdList[m] + \",\";\n                    if (this.userIdList.length > GROUP_TIP_MAX_USER_COUNT && m == maxIndex) {\n                        text += \"等\" + this.userIdList.length + \"人\";\n                        break;\n                    }\n                }\n                text += \"设为管理员\";\n                break;\n            case GROUP_TIP_TYPE.CANCEL_ADMIN: //取消管理员\n                text += this.opUserId + \"取消\";\n                for (var m in this.userIdList) {\n                    text += this.userIdList[m] + \",\";\n                    if (this.userIdList.length > GROUP_TIP_MAX_USER_COUNT && m == maxIndex) {\n                        text += \"等\" + this.userIdList.length + \"人\";\n                        break;\n                    }\n                }\n                text += \"的管理员资格\";\n                break;\n\n\n            case GROUP_TIP_TYPE.MODIFY_GROUP_INFO: //群资料变更\n                text += this.opUserId + \"修改了群资料：\";\n                for (var m in this.groupInfoList) {\n                    var type = this.groupInfoList[m].getType();\n                    var value = this.groupInfoList[m].getValue();\n                    switch (type) {\n                        case GROUP_TIP_MODIFY_GROUP_INFO_TYPE.FACE_URL:\n                            text += \"群头像为\" + value + \"; \";\n                            break;\n                        case GROUP_TIP_MODIFY_GROUP_INFO_TYPE.NAME:\n                            text += \"群名称为\" + value + \"; \";\n                            break;\n                        case GROUP_TIP_MODIFY_GROUP_INFO_TYPE.OWNER:\n                            text += \"群主为\" + value + \"; \";\n                            break;\n                        case GROUP_TIP_MODIFY_GROUP_INFO_TYPE.NOTIFICATION:\n                            text += \"群公告为\" + value + \"; \";\n                            break;\n                        case GROUP_TIP_MODIFY_GROUP_INFO_TYPE.INTRODUCTION:\n                            text += \"群简介为\" + value + \"; \";\n                            break;\n                        default:\n                            text += \"未知信息为:type=\" + type + \",value=\" + value + \"; \";\n                            break;\n                    }\n                }\n                break;\n\n            case GROUP_TIP_TYPE.MODIFY_MEMBER_INFO: //群成员资料变更(禁言时间)\n                text += this.opUserId + \"修改了群成员资料:\";\n                for (var m in this.memberInfoList) {\n                    var userId = this.memberInfoList[m].getUserId();\n                    var shutupTime = this.memberInfoList[m].getShutupTime();\n                    text += userId + \": \";\n                    if (shutupTime != null && shutupTime !== undefined) {\n                        if (shutupTime == 0) {\n                            text += \"取消禁言; \";\n                        } else {\n                            text += \"禁言\" + shutupTime + \"秒; \";\n                        }\n                    } else {\n                        text += \" shutupTime为空\";\n                    }\n                    if (this.memberInfoList.length > GROUP_TIP_MAX_USER_COUNT && m == maxIndex) {\n                        text += \"等\" + this.memberInfoList.length + \"人\";\n                        break;\n                    }\n                }\n                break;\n\n            case GROUP_TIP_TYPE.READED: //消息已读\n                /**/\n                Log.info(\"消息已读同步\")\n                break;\n            default:\n                text += \"未知群提示消息类型：type=\" + this.opType;\n                break;\n        }\n        return text;\n    };\n\n    // class Msg.Elem.GroupTip.GroupInfo，变更的群资料信息对象\n    Msg.Elem.GroupTip.GroupInfo = function (type, value) {\n        this.type = type; //群资料信息类型\n        this.value = value; //对应的值\n    };\n    Msg.Elem.GroupTip.GroupInfo.prototype.getType = function () {\n        return this.type;\n    };\n    Msg.Elem.GroupTip.GroupInfo.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // class Msg.Elem.GroupTip.MemberInfo，变更的群成员资料信息对象\n    Msg.Elem.GroupTip.MemberInfo = function (userId, shutupTime) {\n        this.userId = userId; //群成员id\n        this.shutupTime = shutupTime; //群成员被禁言时间，0表示取消禁言，大于0表示被禁言时长，单位：秒\n    };\n    Msg.Elem.GroupTip.MemberInfo.prototype.getUserId = function () {\n        return this.userId;\n    };\n    Msg.Elem.GroupTip.MemberInfo.prototype.getShutupTime = function () {\n        return this.shutupTime;\n    };\n\n    // 自定义消息类型 class Msg.Elem.Custom\n    Msg.Elem.Custom = function (data, desc, ext) {\n        this.data = data; //数据\n        this.desc = desc; //描述\n        this.ext = ext; //扩展字段\n    };\n    Msg.Elem.Custom.prototype.getData = function () {\n        return this.data;\n    };\n    Msg.Elem.Custom.prototype.getDesc = function () {\n        return this.desc;\n    };\n    Msg.Elem.Custom.prototype.getExt = function () {\n        return this.ext;\n    };\n    Msg.Elem.Custom.prototype.toHtml = function () {\n        return this.data;\n    };\n\n    // singleton object MsgStore\n    var MsgStore = new function () {\n        var sessMap = {}; //跟所有用户或群的聊天记录MAP\n        var sessTimeline = []; //按时间降序排列的会话列表\n        msgCache = {}; //消息缓存，用于判重\n        //C2C\n        this.cookie = \"\"; //上一次拉取新c2c消息的cookie\n        this.syncFlag = 0; //上一次拉取新c2c消息的是否继续拉取标记\n\n        var visitSess = function (visitor) {\n            for (var i in sessMap) {\n                visitor(sessMap[i]);\n            }\n        };\n        //消息查重\n        var checkDupMsg = function (msg) {\n            var dup = false;\n            var first_key = msg.sess._impl.skey;\n            var second_key = msg.isSend + msg.seq + msg.random;\n            var tempMsg = msgCache[first_key] && msgCache[first_key][second_key];\n            if (tempMsg) {\n                dup = true;\n            }\n            if (msgCache[first_key]) {\n                msgCache[first_key][second_key] = {\n                    time: msg.time\n                };\n            } else {\n                msgCache[first_key] = {};\n                msgCache[first_key][second_key] = {\n                    time: msg.time\n                };\n            }\n            return dup;\n        };\n\n        this.sessMap = function () {\n            return sessMap;\n        };\n        this.sessCount = function () {\n            return sessTimeline.length;\n        };\n        this.sessByTypeId = function (type, id) {\n            var skey = Session.skey(type, id);\n            if (skey === undefined || skey == null) return null;\n            return sessMap[skey];\n        };\n        this.delSessByTypeId = function (type, id) {\n            var skey = Session.skey(type, id);\n            if (skey === undefined || skey == null) return false;\n            if (sessMap[skey]) {\n                delete sessMap[skey];\n                delete msgCache[skey];\n            }\n            return true;\n        };\n        this.resetCookieAndSyncFlag = function () {\n            this.cookie = \"\";\n            this.syncFlag = 0;\n        };\n\n        //切换将当前会话的自动读取消息标志为isOn,重置其他会话的自动读取消息标志为false\n        this.setAutoRead = function (selSess, isOn, isResetAll) {\n            if (isResetAll)\n                visitSess(function (s) {\n                    s._impl.isAutoRead = false;\n                });\n            if (selSess) {\n                selSess._impl.isAutoRead = isOn; //\n                if (isOn) { //是否调用已读上报接口\n                    selSess._impl.unread = 0;\n\n                    if (selSess._impl.type == SESSION_TYPE.C2C) { //私聊消息已读上报\n                        var tmpC2CMsgReadedItem = [];\n                        tmpC2CMsgReadedItem.push(new C2CMsgReadedItem(selSess._impl.id, selSess._impl.time));\n                        //调用C2C消息已读上报接口\n                        proto_c2CMsgReaded(MsgStore.cookie,\n                            tmpC2CMsgReadedItem,\n                            function (resp) {\n                                log.info(\"[setAutoRead]: c2CMsgReaded success\");\n                            },\n                            function (err) {\n                                log.error(\"[setAutoRead}: c2CMsgReaded failed:\" + err.ErrorInfo);\n                            });\n                    } else if (selSess._impl.type == SESSION_TYPE.GROUP) { //群聊消息已读上报\n                        var tmpOpt = {\n                            'GroupId': selSess._impl.id,\n                            'MsgReadedSeq': selSess._impl.curMaxMsgSeq\n                        };\n                        //调用group消息已读上报接口\n                        proto_groupMsgReaded(tmpOpt,\n                            function (resp) {\n                                log.info(\"groupMsgReaded success\");\n\n                            },\n                            function (err) {\n                                log.error(\"groupMsgReaded failed:\" + err.ErrorInfo);\n\n                            });\n                    }\n                }\n            }\n        };\n\n        this.c2CMsgReaded = function (opts, cbOk, cbErr) {\n            var tmpC2CMsgReadedItem = [];\n            tmpC2CMsgReadedItem.push(new C2CMsgReadedItem(opts.To_Account, opts.LastedMsgTime));\n            //调用C2C消息已读上报接口\n            proto_c2CMsgReaded(MsgStore.cookie,\n                tmpC2CMsgReadedItem,\n                function (resp) {\n                    if (cbOk) {\n                        log.info(\"c2CMsgReaded success\");\n                        cbOk(resp);\n                    }\n                },\n                function (err) {\n                    if (cbErr) {\n                        log.error(\"c2CMsgReaded failed:\" + err.ErrorInfo);\n                        cbErr(err);\n                    }\n                });\n        };\n\n        this.addSession = function (sess) {\n            sessMap[sess._impl.skey] = sess;\n        };\n        this.delSession = function (sess) {\n            delete sessMap[sess._impl.skey];\n        };\n        this.clear = function () {\n            sessMap = {}; //跟所有用户或群的聊天记录MAP\n            sessTimeline = []; //按时间降序排列的会话列表\n            msgCache = {}; //消息缓存，用于判重\n            this.cookie = \"\"; //上一次拉取新c2c消息的cookie\n            this.syncFlag = 0; //上一次拉取新c2c消息的是否继续拉取标记\n        };\n        this.addMsg = function(msg, unread) {\n            if (checkDupMsg(msg)) return false;\n            var sess = msg.sess;\n            if (!sessMap[sess._impl.skey]) this.addSession(sess);\n            sess._impl_addMsg(msg,unread);\n            return true;\n        };\n        this.updateTimeline = function () {\n            var arr = new Array;\n            visitSess(function (sess) {\n                arr.push(sess);\n            });\n            arr.sort(function (a, b) {\n                return b.time - a.time;\n            });\n            sessTimeline = arr;\n        };\n    };\n    // singleton object MsgManager\n    var MsgManager = new function () {\n\n        var onMsgCallback = null; //新消息(c2c和group)回调\n\n        var onGroupInfoChangeCallback = null; //群资料变化回调\n        //收到新群系统消息回调列表\n        var onGroupSystemNotifyCallbacks = {\n            \"1\": null,\n            \"2\": null,\n            \"3\": null,\n            \"4\": null,\n            \"5\": null,\n            \"6\": null,\n            \"7\": null,\n            \"8\": null,\n            \"9\": null,\n            \"10\": null,\n            \"11\": null,\n            \"15\": null,\n            \"255\": null,\n            \"12\": null,\n        };\n        //监听好友系统通知函数\n        var onFriendSystemNotifyCallbacks = {\n            \"1\": null,\n            \"2\": null,\n            \"3\": null,\n            \"4\": null,\n            \"5\": null,\n            \"6\": null,\n            \"7\": null,\n            \"8\": null\n        };\n\n        var onProfileSystemNotifyCallbacks = {\n            \"1\": null\n        };\n\n        var onKickedEventCall = null;\n\n        var onMsgReadCallback = null;\n\n        //普通长轮询\n        var longPollingOn = false; //是否开启普通长轮询\n        var isLongPollingRequesting = false; //是否在长轮询ing\n        var notifySeq = 0; //c2c通知seq\n        var noticeSeq = 0; //群消息seq\n\n        //大群长轮询\n        var onBigGroupMsgCallback = null; //大群消息回调\n        var bigGroupLongPollingOn = false; //是否开启长轮询\n        var bigGroupLongPollingStartSeqMap = {}; //请求拉消息的起始seq(大群长轮询)\n        var bigGroupLongPollingHoldTime = 90; //客户端长轮询的超时时间，单位是秒(大群长轮询)\n        var bigGroupLongPollingKeyMap = null; //客户端加入群组后收到的的Key(大群长轮询)\n        var bigGroupLongPollingMsgMap = {}; //记录收到的群消息数\n        var onC2cEventCallbacks = {\n            \"92\": null, //消息已读通知,\n            \"96\": null\n        };;\n        var onAppliedDownloadUrl = null;\n\n\n        var getLostGroupMsgCount = 0; //补拉丢失的群消息次数\n        //我的群当前最大的seq\n        var myGroupMaxSeqs = {}; //用于补拉丢失的群消息\n\n        var groupSystemMsgsCache = {}; //群组系统消息缓存,用于判重\n\n        //设置长轮询开关\n        //isOn=true 开启\n        //isOn=false 停止\n        this.setLongPollingOn = function (isOn) {\n            longPollingOn = isOn;\n        };\n        this.getLongPollingOn = function () {\n            return longPollingOn;\n        };\n\n        //重置长轮询变量\n        this.resetLongPollingInfo = function () {\n            longPollingOn = false;\n            notifySeq = 0;\n            noticeSeq = 0;\n        };\n\n        //设置大群长轮询开关\n        //isOn=true 开启\n        //isOn=false 停止\n        this.setBigGroupLongPollingOn = function (isOn) {\n            bigGroupLongPollingOn = isOn;\n        };\n\n        //查看是否存在该轮询，防止多次入群\n        this.checkBigGroupLongPollingOn = function ( groupId ) {\n            return !!bigGroupLongPollingKeyMap[groupId]\n        };\n        //设置大群长轮询key\n        this.setBigGroupLongPollingKey = function (GroupId, key) {\n            bigGroupLongPollingKeyMap[GroupId] = key;\n        };\n        //重置大群长轮询变量\n        this.resetBigGroupLongPollingInfo = function ( groupId ) {\n            bigGroupLongPollingOn = false;\n            bigGroupLongPollingStartSeqMap[groupId] = 0;\n            bigGroupLongPollingKeyMap[groupId] = null;\n            bigGroupLongPollingMsgMap[groupId] = {};\n\n        };\n\n        //设置群消息数据条数\n        this.setBigGroupLongPollingMsgMap = function (groupId, count) {\n            var bigGroupLongPollingMsgCount = bigGroupLongPollingMsgMap[groupId];\n            if (bigGroupLongPollingMsgCount) {\n                bigGroupLongPollingMsgCount = parseInt(bigGroupLongPollingMsgCount) + count;\n                bigGroupLongPollingMsgMap[groupId] = bigGroupLongPollingMsgCount;\n            } else {\n                bigGroupLongPollingMsgMap[groupId] = count;\n            }\n        };\n\n        //重置\n        this.clear = function () {\n\n            onGroupInfoChangeCallback = null;\n            onGroupSystemNotifyCallbacks = {\n                \"1\": null, //申请加群请求（只有管理员会收到）\n                \"2\": null, //申请加群被同意（只有申请人能够收到）\n                \"3\": null, //申请加群被拒绝（只有申请人能够收到）\n                \"4\": null, //被管理员踢出群(只有被踢者接收到)\n                \"5\": null, //群被解散(全员接收)\n                \"6\": null, //创建群(创建者接收)\n                \"7\": null, //邀请加群(被邀请者接收)\n                \"8\": null, //主动退群(主动退出者接收)\n                \"9\": null, //设置管理员(被设置者接收)\n                \"10\": null, //取消管理员(被取消者接收)\n                \"11\": null, //群已被回收(全员接收)\n                \"15\": null, //群已被回收(全员接收)\n                \"255\": null, //用户自定义通知(默认全员接收)\n                \"12\": null, //邀请加群(被邀请者需要同意)\n            };\n            onFriendSystemNotifyCallbacks = {\n                \"1\": null, //好友表增加\n                \"2\": null, //好友表删除\n                \"3\": null, //未决增加\n                \"4\": null, //未决删除\n                \"5\": null, //黑名单增加\n                \"6\": null, //黑名单删除\n                \"7\": null, //未决已读上报\n                \"8\": null //好友信息(备注，分组)变更\n            };\n            onProfileSystemNotifyCallbacks = {\n                \"1\": null //资料修改\n            };\n            //重置普通长轮询参数\n            onMsgCallback = null;\n            longPollingOn = false;\n            notifySeq = 0; //c2c新消息通知seq\n            noticeSeq = 0; //group新消息seq\n\n            //重置大群长轮询参数\n            onBigGroupMsgCallback = null;\n            bigGroupLongPollingOn = false;\n            bigGroupLongPollingStartSeqMap = {};\n            bigGroupLongPollingKeyMap = {};\n            bigGroupLongPollingMsgMap = {};\n\n            groupSystemMsgsCache = {};\n\n            ipList = []; //文件下载地址\n            authkey = null; //文件下载票据\n            expireTime = null; //票据超时时间\n        };\n\n        //初始化文件下载ip和票据\n        var initIpAndAuthkey = function (cbOk, cbErr) {\n            proto_getIpAndAuthkey(function (resp) {\n                    ipList = resp.IpList;\n                    authkey = resp.AuthKey;\n                    expireTime = resp.ExpireTime;\n                    if (cbOk) cbOk(resp);\n                },\n                function (err) {\n                    log.error(\"initIpAndAuthkey failed:\" + err.ErrorInfo);\n                    if (cbErr) cbErr(err);\n                }\n            );\n        };\n\n        //初始化我的群当前最大的seq，用于补拉丢失的群消息\n        var initMyGroupMaxSeqs = function (cbOk, cbErr) {\n            var opts = {\n                'Member_Account': ctx.identifier,\n                'Limit': 1000,\n                'Offset': 0,\n                'GroupBaseInfoFilter': [\n                    'NextMsgSeq'\n                ]\n            };\n            proto_getJoinedGroupListHigh(opts, function (resp) {\n                    if (!resp.GroupIdList || resp.GroupIdList.length == 0) {\n                        log.info(\"initMyGroupMaxSeqs: 目前还没有加入任何群组\");\n                        if (cbOk) cbOk(resp);\n                        return;\n                    }\n                    for (var i = 0; i < resp.GroupIdList.length; i++) {\n                        var group_id = resp.GroupIdList[i].GroupId;\n                        var curMaxSeq = resp.GroupIdList[i].NextMsgSeq - 1;\n                        myGroupMaxSeqs[group_id] = curMaxSeq;\n                    }\n\n                    if (cbOk) cbOk(resp);\n\n                },\n                function (err) {\n                    log.error(\"initMyGroupMaxSeqs failed:\" + err.ErrorInfo);\n                    if (cbErr) cbErr(err);\n                }\n            );\n        };\n\n        //补拉群消息\n        var getLostGroupMsgs = function (groupId, reqMsgSeq, reqMsgNumber) {\n            getLostGroupMsgCount++;\n            //发起一个拉群群消息请求\n            var tempOpts = {\n                'GroupId': groupId,\n                'ReqMsgSeq': reqMsgSeq,\n                'ReqMsgNumber': reqMsgNumber\n            };\n            //发起一个拉群群消息请求\n            log.warn(\"第\" + getLostGroupMsgCount + \"次补齐群消息,参数=\" + JSON.stringify(tempOpts));\n            MsgManager.syncGroupMsgs(tempOpts);\n        };\n\n        //更新群当前最大消息seq\n        var updateMyGroupCurMaxSeq = function (groupId, msgSeq) {\n            //更新myGroupMaxSeqs中的群最大seq\n            var curMsgSeq = myGroupMaxSeqs[groupId]\n            if (curMsgSeq) { //如果存在，比较大小\n                if (msgSeq > curMsgSeq) {\n                    myGroupMaxSeqs[groupId] = msgSeq;\n                }\n            } else { //不存在，新增\n                myGroupMaxSeqs[groupId] = msgSeq;\n            }\n        };\n\n        //添加群消息列表\n        var addGroupMsgList = function (msgs, new_group_msgs) {\n            for (var p in msgs) {\n                var newGroupMsg = msgs[p];\n                //发群消息时，长轮询接口会返回用户自己发的群消息\n                //if(newGroupMsg.From_Account && newGroupMsg.From_Account!=ctx.identifier ){\n                if (newGroupMsg.From_Account) {\n                    //false-不是主动拉取的历史消息\n                    //true-需要保存到sdk本地session,并且需要判重\n                    var msg = handlerGroupMsg(newGroupMsg, false, true);\n                    if (msg) { //不为空，加到新消息里\n                        new_group_msgs.push(msg);\n                    }\n                    //更新myGroupMaxSeqs中的群最大seq\n                    updateMyGroupCurMaxSeq(newGroupMsg.ToGroupId, newGroupMsg.MsgSeq);\n                }\n            }\n            return new_group_msgs;\n        };\n\n        //处理收到的群普通和提示消息\n        var handlerOrdinaryAndTipC2cMsgs = function (eventType, groupMsgArray) {\n            var groupMsgMap = {}; //保存收到的C2c消息信息（群号，最小，最大消息seq，消息列表）\n            var new_group_msgs = [];\n            var minGroupMsgSeq = 99999999;\n            var maxGroupMsgSeq = -1;\n            for (var j in groupMsgArray) {\n\n                var groupMsgs = groupMsgMap[groupMsgArray[j].ToGroupId];\n                if (!groupMsgs) {\n                    groupMsgs = groupMsgMap[groupMsgArray[j].ToGroupId] = {\n                        \"min\": minGroupMsgSeq, //收到新消息最小seq\n                        \"max\": maxGroupMsgSeq, //收到新消息最大seq\n                        \"msgs\": [] //收到的新消息\n                    };\n                }\n                //更新长轮询的群NoticeSeq\n                if (groupMsgArray[j].NoticeSeq > noticeSeq) {\n                    log.warn(\"noticeSeq=\" + noticeSeq + \",msgNoticeSeq=\" + groupMsgArray[j].NoticeSeq);\n                    noticeSeq = groupMsgArray[j].NoticeSeq;\n                }\n                groupMsgArray[j].Event = eventType;\n                groupMsgMap[groupMsgArray[j].ToGroupId].msgs.push(groupMsgArray[j]); //新增一条消息\n                if (groupMsgArray[j].MsgSeq < groupMsgs.min) { //记录最小的消息seq\n                    groupMsgMap[groupMsgArray[j].ToGroupId].min = groupMsgArray[j].MsgSeq;\n                }\n                if (groupMsgArray[j].MsgSeq > groupMsgs.max) { //记录最大的消息seq\n                    groupMsgMap[groupMsgArray[j].ToGroupId].max = groupMsgArray[j].MsgSeq;\n                }\n            }\n\n            for (var groupId in groupMsgMap) {\n                new_group_msgs = addGroupMsgList(groupMsgMap[groupId].msgs, new_group_msgs);\n            }\n            if (new_group_msgs.length) {\n                MsgStore.updateTimeline();\n            }\n            if (onMsgCallback && new_group_msgs.length) onMsgCallback(new_group_msgs);\n\n        };\n\n        //处理收到的群普通和提示消息\n        var handlerOrdinaryAndTipGroupMsgs = function (eventType, groupMsgArray) {\n            var groupMsgMap = {}; //保存收到的群消息信息（群号，最小，最大消息seq，消息列表）\n            var new_group_msgs = [];\n            var minGroupMsgSeq = 99999999;\n            var maxGroupMsgSeq = -1;\n            for (var j in groupMsgArray) {\n\n                var groupMsgs = groupMsgMap[groupMsgArray[j].ToGroupId];\n                if (!groupMsgs) {\n                    groupMsgs = groupMsgMap[groupMsgArray[j].ToGroupId] = {\n                        \"min\": minGroupMsgSeq, //收到新消息最小seq\n                        \"max\": maxGroupMsgSeq, //收到新消息最大seq\n                        \"msgs\": [] //收到的新消息\n                    };\n                }\n                //更新长轮询的群NoticeSeq\n                if (groupMsgArray[j].NoticeSeq > noticeSeq) {\n                    log.warn(\"noticeSeq=\" + noticeSeq + \",msgNoticeSeq=\" + groupMsgArray[j].NoticeSeq);\n                    noticeSeq = groupMsgArray[j].NoticeSeq;\n                }\n                groupMsgArray[j].Event = eventType;\n                groupMsgMap[groupMsgArray[j].ToGroupId].msgs.push(groupMsgArray[j]); //新增一条消息\n                if (groupMsgArray[j].MsgSeq < groupMsgs.min) { //记录最小的消息seq\n                    groupMsgMap[groupMsgArray[j].ToGroupId].min = groupMsgArray[j].MsgSeq;\n                }\n                if (groupMsgArray[j].MsgSeq > groupMsgs.max) { //记录最大的消息seq\n                    groupMsgMap[groupMsgArray[j].ToGroupId].max = groupMsgArray[j].MsgSeq;\n                }\n            }\n\n            for (var groupId in groupMsgMap) {\n                new_group_msgs = addGroupMsgList(groupMsgMap[groupId].msgs, new_group_msgs);\n            }\n            if (new_group_msgs.length) {\n                MsgStore.updateTimeline();\n            }\n            if (onMsgCallback && new_group_msgs.length) onMsgCallback(new_group_msgs);\n\n        };\n\n        //处理新的群提示消息\n        var handlerGroupTips = function (groupTips) {\n            var new_group_msgs = [];\n            for (var o in groupTips) {\n                var groupTip = groupTips[o];\n                //添加event字段\n                groupTip.Event = LONG_POLLINNG_EVENT_TYPE.GROUP_TIP;\n                //更新群消息通知seq\n                if (groupTip.NoticeSeq > noticeSeq) {\n                    noticeSeq = groupTip.NoticeSeq;\n                }\n                var msg = handlerGroupMsg(groupTip, false, true);\n                if (msg) {\n                    new_group_msgs.push(msg);\n                }\n            }\n            if (new_group_msgs.length) {\n                MsgStore.updateTimeline();\n            }\n            if (onMsgCallback && new_group_msgs.length) onMsgCallback(new_group_msgs);\n        };\n\n        //处理新的群系统消息\n        //isNeedValidRepeatMsg 是否需要判重\n        var handlerGroupSystemMsgs = function (groupSystemMsgs, isNeedValidRepeatMsg) {\n            for (var k in groupSystemMsgs) {\n                var groupTip = groupSystemMsgs[k];\n                var groupReportTypeMsg = groupTip.MsgBody;\n                var reportType = groupReportTypeMsg.ReportType;\n                //当长轮询返回的群系统消息，才需要更新群消息通知seq\n                if (isNeedValidRepeatMsg == false && groupTip.NoticeSeq && groupTip.NoticeSeq > noticeSeq) {\n                    noticeSeq = groupTip.NoticeSeq;\n                }\n                var toAccount = groupTip.GroupInfo.To_Account;\n                //过滤本不应该给自己的系统消息\n                /*if (!toAccount || toAccount != ctx.identifier) {\n                 log.error(\"收到本不应该给自己的系统消息: To_Account=\" + toAccount);\n                 continue;\n                 }*/\n                if (isNeedValidRepeatMsg) {\n                    //var key=groupTip.ToGroupId+\"_\"+reportType+\"_\"+groupTip.MsgTimeStamp+\"_\"+groupReportTypeMsg.Operator_Account;\n                    var key = groupTip.ToGroupId + \"_\" + reportType + \"_\" + groupReportTypeMsg.Operator_Account;\n                    var isExist = groupSystemMsgsCache[key];\n                    if (isExist) {\n                        log.warn(\"收到重复的群系统消息：key=\" + key);\n                        continue;\n                    }\n                    groupSystemMsgsCache[key] = true;\n                }\n\n                var notify = {\n                    \"SrcFlag\": 0,\n                    \"ReportType\": reportType,\n                    \"GroupId\": groupTip.ToGroupId,\n                    \"GroupName\": groupTip.GroupInfo.GroupName,\n                    \"Operator_Account\": groupReportTypeMsg.Operator_Account,\n                    \"MsgTime\": groupTip.MsgTimeStamp,\n                    \"groupReportTypeMsg\": groupReportTypeMsg\n                };\n                switch (reportType) {\n                    case GROUP_SYSTEM_TYPE.JOIN_GROUP_REQUEST: //申请加群(只有管理员会接收到)\n                        notify[\"RemarkInfo\"] = groupReportTypeMsg.RemarkInfo;\n                        notify[\"MsgKey\"] = groupReportTypeMsg.MsgKey;\n                        notify[\"Authentication\"] = groupReportTypeMsg.Authentication;\n                        notify[\"UserDefinedField\"] = groupTip.UserDefinedField;\n                        notify[\"From_Account\"] = groupTip.From_Account;\n                        notify[\"MsgSeq\"] = groupTip.ClientSeq;\n                        notify[\"MsgRandom\"] = groupTip.MsgRandom;\n                        break;\n                    case GROUP_SYSTEM_TYPE.JOIN_GROUP_ACCEPT: //申请加群被同意(只有申请人自己接收到)\n                    case GROUP_SYSTEM_TYPE.JOIN_GROUP_REFUSE: //申请加群被拒绝(只有申请人自己接收到)\n                        notify[\"RemarkInfo\"] = groupReportTypeMsg.RemarkInfo;\n                        break;\n                    case GROUP_SYSTEM_TYPE.KICK: //被管理员踢出群(只有被踢者接收到)\n                    case GROUP_SYSTEM_TYPE.DESTORY: //群被解散(全员接收)\n                    case GROUP_SYSTEM_TYPE.CREATE: //创建群(创建者接收, 不展示)\n                    case GROUP_SYSTEM_TYPE.INVITED_JOIN_GROUP_REQUEST: //邀请加群(被邀请者接收)\n                    case GROUP_SYSTEM_TYPE.INVITED_JOIN_GROUP_REQUEST_AGREE: //邀请加群(被邀请者需同意)\n                    case GROUP_SYSTEM_TYPE.QUIT: //主动退群(主动退出者接收, 不展示)\n                    case GROUP_SYSTEM_TYPE.SET_ADMIN: //群设置管理员(被设置者接收)\n                    case GROUP_SYSTEM_TYPE.CANCEL_ADMIN: //取消管理员(被取消者接收)\n                    case GROUP_SYSTEM_TYPE.REVOKE: //群已被回收(全员接收, 不展示)\n                        break;\n                    case GROUP_SYSTEM_TYPE.READED: //群消息已读同步\n                        break;\n                    case GROUP_SYSTEM_TYPE.CUSTOM: //用户自定义通知(默认全员接收)\n                        notify[\"MsgSeq\"] = groupTip.MsgSeq;\n                        notify[\"UserDefinedField\"] = groupReportTypeMsg.UserDefinedField;\n                        break;\n                    default:\n                        log.error(\"未知群系统消息类型：reportType=\" + reportType);\n                        break;\n                }\n\n                if (isNeedValidRepeatMsg) {\n                    //注释只收取一种通知\n                    // if (reportType == GROUP_SYSTEM_TYPE.JOIN_GROUP_REQUEST) {\n                    //回调\n                    if (onGroupSystemNotifyCallbacks[reportType]) {\n                        onGroupSystemNotifyCallbacks[reportType](notify);\n                    } else {\n                        log.error(\"未知群系统消息类型：reportType=\" + reportType);\n                    }\n                    //}\n                } else {\n                    //回调\n                    if (onGroupSystemNotifyCallbacks[reportType]) {\n                        if (reportType == GROUP_SYSTEM_TYPE.READED) {\n                            var arr = notify.groupReportTypeMsg.GroupReadInfoArray;\n                            for (var i = 0, l = arr.length; i < l; i++) {\n                                var item = arr[i];\n                                onGroupSystemNotifyCallbacks[reportType](item);\n                            }\n                        } else {\n                            onGroupSystemNotifyCallbacks[reportType](notify);\n                        }\n                    }\n                }\n            } //loop\n        };\n\n\n        //处理新的好友系统通知\n        //isNeedValidRepeatMsg 是否需要判重\n        var handlerFriendSystemNotices = function (friendSystemNotices, isNeedValidRepeatMsg) {\n            var friendNotice, type, notify;\n            for (var k in friendSystemNotices) {\n                friendNotice = friendSystemNotices[k];\n                type = friendNotice.PushType;\n                //当长轮询返回的群系统消息，才需要更新通知seq\n                if (isNeedValidRepeatMsg == false && friendNotice.NoticeSeq && friendNotice.NoticeSeq > noticeSeq) {\n                    noticeSeq = friendNotice.NoticeSeq;\n                }\n                notify = {\n                    'Type': type\n                };\n                switch (type) {\n                    case FRIEND_NOTICE_TYPE.FRIEND_ADD: //好友表增加\n                        notify[\"Accounts\"] = friendNotice.FriendAdd_Account;\n                        break;\n                    case FRIEND_NOTICE_TYPE.FRIEND_DELETE: //好友表删除\n                        notify[\"Accounts\"] = friendNotice.FriendDel_Account;\n                        break;\n                    case FRIEND_NOTICE_TYPE.PENDENCY_ADD: //未决增加\n                        notify[\"PendencyList\"] = friendNotice.PendencyAdd;\n                        break;\n                    case FRIEND_NOTICE_TYPE.PENDENCY_DELETE: //未决删除\n                        notify[\"Accounts\"] = friendNotice.FrienPencydDel_Account;\n                        break;\n                    case FRIEND_NOTICE_TYPE.BLACK_LIST_ADD: //黑名单增加\n                        notify[\"Accounts\"] = friendNotice.BlackListAdd_Account;\n                        break;\n                    case FRIEND_NOTICE_TYPE.BLACK_LIST_DELETE: //黑名单删除\n                        notify[\"Accounts\"] = friendNotice.BlackListDel_Account;\n                        break;\n                        /*case FRIEND_NOTICE_TYPE.PENDENCY_REPORT://未决已读上报\n\n                     break;\n                     case FRIEND_NOTICE_TYPE.FRIEND_UPDATE://好友数据更新\n\n                     break;\n                     */\n                    default:\n                        log.error(\"未知好友系统通知类型：friendNotice=\" + JSON.stringify(friendNotice));\n                        break;\n                }\n\n                if (isNeedValidRepeatMsg) {\n                    if (type == FRIEND_NOTICE_TYPE.PENDENCY_ADD) {\n                        //回调\n                        if (onFriendSystemNotifyCallbacks[type]) onFriendSystemNotifyCallbacks[type](notify);\n                    }\n                } else {\n                    //回调\n                    if (onFriendSystemNotifyCallbacks[type]) onFriendSystemNotifyCallbacks[type](notify);\n                }\n            } //loop\n        };\n\n        //处理新的资料系统通知\n        //isNeedValidRepeatMsg 是否需要判重\n        var handlerProfileSystemNotices = function (profileSystemNotices, isNeedValidRepeatMsg) {\n            var profileNotice, type, notify;\n            for (var k in profileSystemNotices) {\n                profileNotice = profileSystemNotices[k];\n                type = profileNotice.PushType;\n                //当长轮询返回的群系统消息，才需要更新通知seq\n                if (isNeedValidRepeatMsg == false && profileNotice.NoticeSeq && profileNotice.NoticeSeq > noticeSeq) {\n                    noticeSeq = profileNotice.NoticeSeq;\n                }\n                notify = {\n                    'Type': type\n                };\n                switch (type) {\n                    case PROFILE_NOTICE_TYPE.PROFILE_MODIFY: //资料修改\n                        notify[\"Profile_Account\"] = profileNotice.Profile_Account;\n                        notify[\"ProfileList\"] = profileNotice.ProfileList;\n                        break;\n                    default:\n                        log.error(\"未知资料系统通知类型：profileNotice=\" + JSON.stringify(profileNotice));\n                        break;\n                }\n\n                if (isNeedValidRepeatMsg) {\n                    if (type == PROFILE_NOTICE_TYPE.PROFILE_MODIFY) {\n                        //回调\n                        if (onProfileSystemNotifyCallbacks[type]) onProfileSystemNotifyCallbacks[type](notify);\n                    }\n                } else {\n                    //回调\n                    if (onProfileSystemNotifyCallbacks[type]) onProfileSystemNotifyCallbacks[type](notify);\n                }\n            } //loop\n        };\n\n        //处理新的群系统消息(用于直播大群长轮询)\n        var handlerGroupSystemMsg = function (groupTip) {\n            var groupReportTypeMsg = groupTip.MsgBody;\n            var reportType = groupReportTypeMsg.ReportType;\n            var toAccount = groupTip.GroupInfo.To_Account;\n            //过滤本不应该给自己的系统消息\n            //if(!toAccount || toAccount!=ctx.identifier){\n            //    log.error(\"收到本不应该给自己的系统消息: To_Account=\"+toAccount);\n            //    continue;\n            //}\n            var notify = {\n                \"SrcFlag\": 1,\n                \"ReportType\": reportType,\n                \"GroupId\": groupTip.ToGroupId,\n                \"GroupName\": groupTip.GroupInfo.GroupName,\n                \"Operator_Account\": groupReportTypeMsg.Operator_Account,\n                \"MsgTime\": groupTip.MsgTimeStamp\n            };\n            switch (reportType) {\n                case GROUP_SYSTEM_TYPE.JOIN_GROUP_REQUEST: //申请加群(只有管理员会接收到)\n                    notify[\"RemarkInfo\"] = groupReportTypeMsg.RemarkInfo;\n                    notify[\"MsgKey\"] = groupReportTypeMsg.MsgKey;\n                    notify[\"Authentication\"] = groupReportTypeMsg.Authentication;\n                    notify[\"UserDefinedField\"] = groupTip.UserDefinedField;\n                    notify[\"From_Account\"] = groupTip.From_Account;\n                    notify[\"MsgSeq\"] = groupTip.ClientSeq;\n                    notify[\"MsgRandom\"] = groupTip.MsgRandom;\n                    break;\n                case GROUP_SYSTEM_TYPE.JOIN_GROUP_ACCEPT: //申请加群被同意(只有申请人自己接收到)\n                case GROUP_SYSTEM_TYPE.JOIN_GROUP_REFUSE: //申请加群被拒绝(只有申请人自己接收到)\n                    notify[\"RemarkInfo\"] = groupReportTypeMsg.RemarkInfo;\n                    break;\n                case GROUP_SYSTEM_TYPE.KICK: //被管理员踢出群(只有被踢者接收到)\n                case GROUP_SYSTEM_TYPE.DESTORY: //群被解散(全员接收)\n                case GROUP_SYSTEM_TYPE.CREATE: //创建群(创建者接收, 不展示)\n                case GROUP_SYSTEM_TYPE.INVITED_JOIN_GROUP_REQUEST: //邀请加群(被邀请者接收)\n                case GROUP_SYSTEM_TYPE.INVITED_JOIN_GROUP_REQUEST_AGREE: //邀请加群(被邀请者需要同意)\n                case GROUP_SYSTEM_TYPE.QUIT: //主动退群(主动退出者接收, 不展示)\n                case GROUP_SYSTEM_TYPE.SET_ADMIN: //群设置管理员(被设置者接收)\n                case GROUP_SYSTEM_TYPE.CANCEL_ADMIN: //取消管理员(被取消者接收)\n                case GROUP_SYSTEM_TYPE.REVOKE: //群已被回收(全员接收, 不展示)\n                    break;\n                case GROUP_SYSTEM_TYPE.CUSTOM: //用户自定义通知(默认全员接收)\n                    notify[\"MsgSeq\"] = groupTip.MsgSeq;\n                    notify[\"UserDefinedField\"] = groupReportTypeMsg.UserDefinedField;\n                    break;\n                default:\n                    log.error(\"未知群系统消息类型：reportType=\" + reportType);\n                    break;\n            }\n            //回调\n            if (onGroupSystemNotifyCallbacks[reportType]) onGroupSystemNotifyCallbacks[reportType](notify);\n\n        };\n\n        //处理C2C EVENT 消息通道Array\n        var handlerC2cNotifyMsgArray = function (arr) {\n            for (var i = 0, l = arr.length; i < l; i++) {\n                handlerC2cEventMsg(arr[i]);\n            }\n        }\n\n        //处理C2C EVENT 消息通道Item\n        /*\n            {\n                \"ActionStatus\": \"OK\",\n                \"ErrorInfo\": \"\",\n                \"ErrorCode\": 0,\n                \"EventArray\": [{\n                    \"Event\": 10,\n                    \"C2cNotifyMsgArray\": [{\n                        \"SubMsgType\": 96,\n                        \"NoticeSeq\": 2,\n                        \"KickoutMsgNotify\": {\n                            \"To_Account\": \"22\",\n                            \"SdkAppid\": 1400111560,\n                            \"Instid\": 537042377\n                        }\n                    }]\n                }],\n                \"NextTimeOut\": 5\n            }\n        */\n        var handlerC2cEventMsg = function (notify) {\n            var subType = notify.SubMsgType;\n            switch (subType) {\n                case C2C_EVENT_SUB_TYPE.READED:\n                    log.warn(\"C2C已读消息通知\");\n                    if (notify.ReadC2cMsgNotify && notify.ReadC2cMsgNotify.UinPairReadArray && onC2cEventCallbacks[subType]) {\n                        for (var i = 0, l = notify.ReadC2cMsgNotify.UinPairReadArray.length; i < l; i++) {\n                            var item = notify.ReadC2cMsgNotify.UinPairReadArray[i];\n                            onC2cEventCallbacks[subType](item);\n                        }\n                    }\n                    break;\n                case C2C_EVENT_SUB_TYPE.KICKEDOUT:\n                    log.warn(\"多终端互踢通知\");\n                    proto_logout('instance');\n                    if (onC2cEventCallbacks[subType]) {\n                        onC2cEventCallbacks[subType]();\n                    }\n                    break;\n                default:\n                    log.error(\"未知C2c系统消息：subType=\" + subType);\n                    break;\n            }\n\n        };\n\n        //长轮询\n        this.longPolling = function (cbOk, cbErr) {\n\n\n            var opts = {\n                'Timeout': longPollingDefaultTimeOut / 1000,\n                'Cookie': {\n                    'NotifySeq': notifySeq,\n                    'NoticeSeq': noticeSeq\n                }\n            };\n            if (LongPollingId) {\n                opts.Cookie.LongPollingId = LongPollingId;\n                doPolling();\n            } else {\n                proto_getLongPollingId({}, function (resp) {\n                    LongPollingId = opts.Cookie.LongPollingId = resp.LongPollingId;\n                    //根据回包设置超时时间，超时时长不能>60秒，因为webkit手机端的最长超时时间不能大于60s\n                    longPollingDefaultTimeOut = resp.Timeout > 60 ? longPollingDefaultTimeOut : resp.Timeout * 1000;\n                    doPolling();\n                });\n            }\n\n            function doPolling() {\n                proto_longPolling(opts, function (resp) {\n\n                    for (var i in resp.EventArray) {\n                        var e = resp.EventArray[i];\n                        switch (e.Event) {\n                            case LONG_POLLINNG_EVENT_TYPE.C2C: //c2c消息通知\n                                //更新C2C消息通知seq\n                                notifySeq = e.NotifySeq;\n                                log.warn(\"longpolling: received new c2c msg\");\n                                //获取新消息\n                                MsgManager.syncMsgs();\n                                break;\n                            case LONG_POLLINNG_EVENT_TYPE.GROUP_COMMON: //普通群消息通知\n                                log.warn(\"longpolling: received new group msgs\");\n                                handlerOrdinaryAndTipGroupMsgs(e.Event, e.GroupMsgArray);\n                                break;\n                            case LONG_POLLINNG_EVENT_TYPE.GROUP_TIP: //（全员广播）群提示消息\n                                log.warn(\"longpolling: received new group tips\");\n                                handlerOrdinaryAndTipGroupMsgs(e.Event, e.GroupTips);\n                                break;\n                            case LONG_POLLINNG_EVENT_TYPE.GROUP_TIP2: //群提示消息\n                                log.warn(\"longpolling: received new group tips\");\n                                handlerOrdinaryAndTipGroupMsgs(e.Event, e.GroupTips);\n                                break;\n                            case LONG_POLLINNG_EVENT_TYPE.GROUP_SYSTEM: //（多终端同步）群系统消息\n                                log.warn(\"longpolling: received new group system msgs\");\n                                //false 表示 通过长轮询收到的群系统消息，可以不判重\n                                handlerGroupSystemMsgs(e.GroupTips, false);\n                                break;\n                            case LONG_POLLINNG_EVENT_TYPE.FRIEND_NOTICE: //好友系统通知\n                                log.warn(\"longpolling: received new friend system notice\");\n                                //false 表示 通过长轮询收到的好友系统通知，可以不判重\n                                handlerFriendSystemNotices(e.FriendListMod, false);\n                                break;\n                            case LONG_POLLINNG_EVENT_TYPE.PROFILE_NOTICE: //资料系统通知\n                                log.warn(\"longpolling: received new profile system notice\");\n                                //false 表示 通过长轮询收到的资料系统通知，可以不判重\n                                handlerProfileSystemNotices(e.ProfileDataMod, false);\n                                break;\n                            case LONG_POLLINNG_EVENT_TYPE.C2C_COMMON: //c2c消息通知\n                                noticeSeq = e.C2cMsgArray[0].NoticeSeq;\n                                //更新C2C消息通知seq\n                                log.warn(\"longpolling: received new c2c_common msg\", noticeSeq);\n                                handlerOrdinaryAndTipC2cMsgs(e.Event, e.C2cMsgArray);\n                                break;\n                            case LONG_POLLINNG_EVENT_TYPE.C2C_EVENT: //c2c已读消息通知\n                                noticeSeq = e.C2cNotifyMsgArray[0].NoticeSeq;\n                                log.warn(\"longpolling: received new c2c_event msg\");\n                                handlerC2cNotifyMsgArray(e.C2cNotifyMsgArray);\n                                break;\n                            default:\n                                log.error(\"longpolling收到未知新消息类型: Event=\" + e.Event);\n                                break;\n                        }\n                    }\n                    var successInfo = {\n                        'ActionStatus': ACTION_STATUS.OK,\n                        'ErrorCode': 0\n                    };\n                    updatecLongPollingStatus(successInfo);\n                }, function (err) {\n                    //log.error(err);\n                    updatecLongPollingStatus(err);\n                    if (cbErr) cbErr(err);\n                });\n            }\n        };\n\n\n        //大群 长轮询\n        this.bigGroupLongPolling = function (GroupId, cbOk, cbErr) {\n            // if( !GroupId ){\n            //     for(var a in bigGroupLongPollingMsgMap){\n            //         this.bigGroupLongPolling( a )\n            //     }\n            //     return;\n            // }\n            // var GroupId = BigGroupId;\n            var opts = {\n                'USP': 1,\n                'StartSeq': bigGroupLongPollingStartSeqMap[GroupId], //请求拉消息的起始seq\n                'HoldTime': bigGroupLongPollingHoldTime, //客户端长轮询的超时时间，单位是秒\n                'Key': bigGroupLongPollingKeyMap[GroupId] //客户端加入群组后收到的的Key\n            };\n\n            proto_bigGroupLongPolling(opts, function (resp) {\n                // if (GroupId != BigGroupId) return;\n\n                var msgObjList = [];\n                bigGroupLongPollingStartSeqMap[GroupId] = resp.NextSeq;\n                bigGroupLongPollingHoldTime = resp.HoldTime;\n                bigGroupLongPollingKeyMap[GroupId] = resp.Key;\n\n                if (resp.RspMsgList && resp.RspMsgList.length > 0) {\n                    var msgCount = 0,\n                        msgInfo, event, msg;\n                    for (var i = resp.RspMsgList.length - 1; i >= 0; i--) {\n                        msgInfo = resp.RspMsgList[i];\n                        //后台这里做了调整，缩短字段名，以下是兼容代码\n                        var keyMap = {\n                            \"F_Account\": \"From_Account\",\n                            \"T_Account\": \"To_Account\",\n                            \"FAType\": \"EnumFrom_AccountType\",\n                            \"TAType\": \"EnumTo_AccountType\",\n                            \"GCode\": \"GroupCode\",\n                            \"GName\": \"GroupName\",\n                            \"GId\": \"GroupId\",\n                            \"MFlg\": \"MsgFlag\",\n                            \"FAEInfo\": \"MsgFrom_AccountExtraInfo\",\n                            \"Evt\": \"Event\",\n                            \"GInfo\": \"GroupInfo\",\n                            \"BPlc\": \"IsPlaceMsg\",\n                            \"MBody\": \"MsgBody\",\n                            \"Pri\": \"MsgPriority\",\n                            \"Rdm\": \"MsgRandom\",\n                            \"MSeq\": \"MsgSeq\",\n                            \"TStp\": \"MsgTimeStamp\",\n                            \"TGId\": \"ToGroupId\",\n                            \"UEInfo\": \"UinExtInfo\",\n                            \"UId\": \"UserId\",\n                            \"BSys\": \"IsSystemMsg\",\n                            \"FAHUrl\": \"From_AccountHeadurl\",\n                            \"FANick\": \"From_AccountNick\"\n                        };\n                        msgInfo = tool.replaceObject(keyMap, msgInfo);\n                        //如果是已经删除的消息或者发送者帐号为空或者消息内容为空\n                        //IsPlaceMsg=1\n                        if (msgInfo.IsPlaceMsg || !msgInfo.From_Account || !msgInfo.MsgBody || msgInfo.MsgBody.length == 0) {\n                            continue;\n                        }\n\n                        event = msgInfo.Event; //群消息类型\n                        switch (event) {\n                            case LONG_POLLINNG_EVENT_TYPE.GROUP_COMMON: //群普通消息\n                                log.info(\"bigGroupLongPolling: return new group msg\");\n                                msg = handlerGroupMsg(msgInfo, false, false);\n                                msg && msgObjList.push(msg);\n                                msgCount = msgCount + 1;\n                                break;\n                            case LONG_POLLINNG_EVENT_TYPE.GROUP_TIP: //群提示消息\n                            case LONG_POLLINNG_EVENT_TYPE.GROUP_TIP2: //群提示消息\n                                log.info(\"bigGroupLongPolling: return new group tip\");\n                                msg = handlerGroupMsg(msgInfo, false, false);\n                                msg && msgObjList.push(msg);\n                                //msgCount=msgCount+1;\n                                break;\n                            case LONG_POLLINNG_EVENT_TYPE.GROUP_SYSTEM: //群系统消息\n                                log.info(\"bigGroupLongPolling: new group system msg\");\n                                handlerGroupSystemMsg(msgInfo);\n                                break;\n                            default:\n                                log.error(\"bigGroupLongPolling收到未知新消息类型: Event=\" + event);\n                                break;\n                        }\n                    } // for loop\n                    if (msgCount > 0) {\n                        MsgManager.setBigGroupLongPollingMsgMap(msgInfo.ToGroupId, msgCount); //\n                        log.warn(\"current bigGroupLongPollingMsgMap: \" + JSON.stringify(bigGroupLongPollingMsgMap));\n                    }\n                }\n                curBigGroupLongPollingRetErrorCount = 0;\n                //返回连接状态\n                var successInfo = {\n                    'ActionStatus': ACTION_STATUS.OK,\n                    'ErrorCode': CONNECTION_STATUS.ON,\n                    'ErrorInfo': 'connection is ok...'\n                };\n                ConnManager.callBack(successInfo);\n\n                if (cbOk) cbOk(msgObjList);\n                else if (onBigGroupMsgCallback) onBigGroupMsgCallback(msgObjList); //返回新消息\n\n                //重新启动长轮询\n                bigGroupLongPollingOn && MsgManager.bigGroupLongPolling( GroupId );\n\n            }, function (err) {\n                if(err.ErrorCode == longPollingPackageTooLargeErrorCode){\n                    bigGroupLongPollingStartSeqMap[GroupId] = 0;\n                }else if (err.ErrorCode != longPollingTimeOutErrorCode) {\n                    log.error(err.ErrorInfo);\n                    //记录长轮询返回错误次数\n                    curBigGroupLongPollingRetErrorCount++;\n                }\n                if (err.ErrorCode == longPollingKickedErrorCode) {\n                    //登出\n                    log.error(\"多实例登录，被kick\");\n                    if (onKickedEventCall) {\n                        onKickedEventCall();\n                    }\n                }\n                //累计超过一定次数，不再发起长轮询请求\n                if (curBigGroupLongPollingRetErrorCount < LONG_POLLING_MAX_RET_ERROR_COUNT) {\n                    bigGroupLongPollingOn && MsgManager.bigGroupLongPolling( GroupId );\n                } else {\n                    var errInfo = {\n                        'ActionStatus': ACTION_STATUS.FAIL,\n                        'ErrorCode': CONNECTION_STATUS.OFF,\n                        'ErrorInfo': 'connection is off'\n                    };\n                    ConnManager.callBack(errInfo);\n                }\n                if (cbErr) cbErr(err);\n\n            }, bigGroupLongPollingHoldTime * 1000);\n        };\n\n        //更新连接状态\n        var updatecLongPollingStatus = function (errObj) {\n            if (errObj.ErrorCode == 0 || errObj.ErrorCode == longPollingTimeOutErrorCode) {\n                curLongPollingRetErrorCount = 0;\n                longPollingOffCallbackFlag = false;\n                var errorInfo;\n                var isNeedCallback = false;\n                switch (curLongPollingStatus) {\n                    case CONNECTION_STATUS.INIT:\n                        isNeedCallback = true;\n                        curLongPollingStatus = CONNECTION_STATUS.ON;\n                        errorInfo = \"create connection successfully(INIT->ON)\";\n                        break;\n                    case CONNECTION_STATUS.ON:\n                        errorInfo = \"connection is on...(ON->ON)\";\n                        break;\n                    case CONNECTION_STATUS.RECONNECT:\n                        curLongPollingStatus = CONNECTION_STATUS.ON;\n                        errorInfo = \"connection is on...(RECONNECT->ON)\";\n                        break;\n                    case CONNECTION_STATUS.OFF:\n                        isNeedCallback = true;\n                        curLongPollingStatus = CONNECTION_STATUS.RECONNECT;\n                        errorInfo = \"reconnect successfully(OFF->RECONNECT)\";\n                        break;\n                }\n                var successInfo = {\n                    'ActionStatus': ACTION_STATUS.OK,\n                    'ErrorCode': curLongPollingStatus,\n                    'ErrorInfo': errorInfo\n                };\n                isNeedCallback && ConnManager.callBack(successInfo);\n                longPollingOn && MsgManager.longPolling();\n            } else if (errObj.ErrorCode == longPollingKickedErrorCode) {\n                //登出\n                log.error(\"多实例登录，被kick\");\n                if (onKickedEventCall) {\n                    onKickedEventCall();\n                }\n            } else {\n                //记录长轮询返回解析json错误次数\n                curLongPollingRetErrorCount++;\n                log.warn(\"longPolling接口第\" + curLongPollingRetErrorCount + \"次报错: \" + errObj.ErrorInfo);\n                //累计超过一定次数\n                if (curLongPollingRetErrorCount <= LONG_POLLING_MAX_RET_ERROR_COUNT) {\n                    setTimeout(startNextLongPolling, 100); //\n                } else {\n                    curLongPollingStatus = CONNECTION_STATUS.OFF;\n                    var errInfo = {\n                        'ActionStatus': ACTION_STATUS.FAIL,\n                        'ErrorCode': CONNECTION_STATUS.OFF,\n                        'ErrorInfo': 'connection is off'\n                    };\n                    longPollingOffCallbackFlag == false && ConnManager.callBack(errInfo);\n                    longPollingOffCallbackFlag = true;\n                    log.warn(longPollingIntervalTime + \"毫秒之后,SDK会发起新的longPolling请求...\");\n                    setTimeout(startNextLongPolling, longPollingIntervalTime); //长轮询接口报错次数达到一定值，每间隔5s发起新的长轮询\n                }\n            }\n        };\n\n        //处理收到的普通C2C消息\n        var handlerOrdinaryAndTipC2cMsgs = function (eventType, C2cMsgArray) {\n            //处理c2c消息\n            var notifyInfo = [];\n            var msgInfos = [];\n            msgInfos = C2cMsgArray; //返回的消息列表\n            // MsgStore.cookie = resp.Cookie;//cookies，记录当前读到的最新消息位置\n\n            for (var i in msgInfos) {\n                var msgInfo = msgInfos[i];\n                var isSendMsg, id;\n                var headUrl =  msgInfo.From_AccountHeadurl || '';\n                if (msgInfo.From_Account == ctx.identifier) { //当前用户发送的消息\n                    isSendMsg = true;\n                    id = msgInfo.To_Account; //读取接收者信息\n                } else { //当前用户收到的消息\n                    isSendMsg = false;\n                    id = msgInfo.From_Account; //读取发送者信息\n                }\n                var sess = MsgStore.sessByTypeId(SESSION_TYPE.C2C, id);\n                if (!sess) {\n                    sess = new Session(SESSION_TYPE.C2C, id, id, headUrl, 0, 0);\n                }\n                var msg = new Msg(sess, isSendMsg, msgInfo.MsgSeq, msgInfo.MsgRandom, msgInfo.MsgTimeStamp,  msgInfo.From_Account, C2C_MSG_SUB_TYPE.COMMON, msgInfo.From_AccountNick, headUrl);\n                var msgBody = null;\n                var msgContent = null;\n                var msgType = null;\n                for (var mi in msgInfo.MsgBody) {\n                    msgBody = msgInfo.MsgBody[mi];\n                    msgType = msgBody.MsgType;\n                    switch (msgType) {\n                        case MSG_ELEMENT_TYPE.TEXT:\n                            msgContent = new Msg.Elem.Text(msgBody.MsgContent.Text);\n                            break;\n                        case MSG_ELEMENT_TYPE.FACE:\n                            msgContent = new Msg.Elem.Face(\n                                msgBody.MsgContent.Index,\n                                msgBody.MsgContent.Data\n                            );\n                            break;\n                        case MSG_ELEMENT_TYPE.IMAGE:\n                            msgContent = new Msg.Elem.Images(\n                                msgBody.MsgContent.UUID,\n                                msgBody.MsgContent.ImageFormat || \"\"\n                            );\n                            for (var j in msgBody.MsgContent.ImageInfoArray) {\n                                var tempImg = msgBody.MsgContent.ImageInfoArray[j];\n                                msgContent.addImage(\n                                    new Msg.Elem.Images.Image(\n                                        tempImg.Type,\n                                        tempImg.Size,\n                                        tempImg.Width,\n                                        tempImg.Height,\n                                        tempImg.URL\n                                    )\n                                );\n                            }\n                            break;\n                        case MSG_ELEMENT_TYPE.SOUND:\n                            if (msgBody.MsgContent) {\n                                msgContent = new Msg.Elem.Sound(\n                                    msgBody.MsgContent.UUID,\n                                    msgBody.MsgContent.Second,\n                                    msgBody.MsgContent.Size,\n                                    msgInfo.From_Account,\n                                    msgInfo.To_Account,\n                                    msgBody.MsgContent.Download_Flag,\n                                    SESSION_TYPE.C2C\n                                );\n                            } else {\n                                msgType = MSG_ELEMENT_TYPE.TEXT;\n                                msgContent = new Msg.Elem.Text('[语音消息]下载地址解析出错');\n                            }\n                            break;\n                        case MSG_ELEMENT_TYPE.LOCATION:\n                            msgContent = new Msg.Elem.Location(\n                                msgBody.MsgContent.Longitude,\n                                msgBody.MsgContent.Latitude,\n                                msgBody.MsgContent.Desc\n                            );\n                            break;\n                        case MSG_ELEMENT_TYPE.FILE:\n                        case MSG_ELEMENT_TYPE.FILE + \" \":\n                            msgType = MSG_ELEMENT_TYPE.FILE;\n                            if (msgBody.MsgContent) {\n                                msgContent = new Msg.Elem.File(\n                                    msgBody.MsgContent.UUID,\n                                    msgBody.MsgContent.FileName,\n                                    msgBody.MsgContent.FileSize,\n                                    msgInfo.From_Account,\n                                    msgInfo.To_Account,\n                                    msgBody.MsgContent.Download_Flag,\n                                    SESSION_TYPE.C2C\n                                );\n                            } else {\n                                msgType = MSG_ELEMENT_TYPE.TEXT;\n                                msgContent = new Msg.Elem.Text('[文件消息下载地址解析出错]');\n                            }\n                            break;\n                        case MSG_ELEMENT_TYPE.CUSTOM:\n                            try {\n                                var data = JSON.parse(msgBody.MsgContent.Data);\n                                if (data && data.userAction && data.userAction == FRIEND_WRITE_MSG_ACTION.ING) { //过滤安卓或ios的正在输入自定义消息\n                                    continue;\n                                }\n                            } catch (e) {}\n\n                            msgType = MSG_ELEMENT_TYPE.CUSTOM;\n                            msgContent = new Msg.Elem.Custom(\n                                msgBody.MsgContent.Data,\n                                msgBody.MsgContent.Desc,\n                                msgBody.MsgContent.Ext\n                            );\n                            break;\n                        default:\n                            msgType = MSG_ELEMENT_TYPE.TEXT;\n                            msgContent = new Msg.Elem.Text('web端暂不支持' + msgBody.MsgType + '消息');\n                            break;\n                    }\n                    msg.elems.push(new Msg.Elem(msgType, msgContent));\n                }\n\n                if (msg.elems.length > 0 && MsgStore.addMsg(msg, true)) {\n                    notifyInfo.push(msg);\n                }\n            } // for loop\n            if (notifyInfo.length > 0)\n                MsgStore.updateTimeline();\n            if (notifyInfo.length > 0) {\n                if (onMsgCallback) onMsgCallback(notifyInfo);\n            }\n        };\n\n        //发起新的长轮询请求\n        var startNextLongPolling = function () {\n            longPollingOn && MsgManager.longPolling();\n        };\n\n        //处理未决的加群申请消息列表\n        var handlerApplyJoinGroupSystemMsgs = function (eventArray) {\n            for (var i in eventArray) {\n                var e = eventArray[i];\n                handlerGroupSystemMsgs(e.GroupTips, true);\n                switch (e.Event) {\n                    case LONG_POLLINNG_EVENT_TYPE.GROUP_SYSTEM: //（多终端同步）群系统消息\n                        log.warn(\"handlerApplyJoinGroupSystemMsgs： handler new group system msg\");\n                        //true 表示 解决加群申请通知存在重复的问题（已处理的通知，下次登录还会拉到），需要判重\n                        handlerGroupSystemMsgs(e.GroupTips, true);\n                        break;\n                    default:\n                        log.error(\"syncMsgs收到未知的群系统消息类型: Event=\" + e.Event);\n                        break;\n                }\n            }\n        };\n\n        //拉取c2c消息(包含加群未决消息，需要处理)\n        this.syncMsgs = function (cbOk, cbErr) {\n            var notifyInfo = [];\n            var msgInfos = [];\n            //读取C2C消息\n            proto_getMsgs(MsgStore.cookie, MsgStore.syncFlag, function (resp) {\n                //拉取完毕\n                if (resp.SyncFlag == 2) {\n                    MsgStore.syncFlag = 0;\n                }\n                //处理c2c消息\n                msgInfos = resp.MsgList; //返回的消息列表\n                MsgStore.cookie = resp.Cookie; //cookies，记录当前读到的最新消息位置\n\n                for (var i in msgInfos) {\n                    var msgInfo = msgInfos[i];\n                    var isSendMsg, id, headUrl;\n                    if (msgInfo.From_Account == ctx.identifier) { //当前用户发送的消息\n                        isSendMsg = true;\n                        id = msgInfo.To_Account; //读取接收者信息\n                        headUrl = '';\n                    } else { //当前用户收到的消息\n                        isSendMsg = false;\n                        id = msgInfo.From_Account; //读取发送者信息\n                        headUrl = '';\n                    }\n                    var sess = MsgStore.sessByTypeId(SESSION_TYPE.C2C, id);\n                    if (!sess) {\n                        sess = new Session(SESSION_TYPE.C2C, id, id, headUrl, 0, 0);\n                    }\n                    var msg = new Msg(sess, isSendMsg, msgInfo.MsgSeq, msgInfo.MsgRandom, msgInfo.MsgTimeStamp,  msgInfo.From_Account, C2C_MSG_SUB_TYPE.COMMON, msgInfo.From_AccountNick, msgInfo.From_AccountHeadurl);\n                    var msgBody = null;\n                    var msgContent = null;\n                    var msgType = null;\n                    for (var mi in msgInfo.MsgBody) {\n                        msgBody = msgInfo.MsgBody[mi];\n                        msgType = msgBody.MsgType;\n                        switch (msgType) {\n                            case MSG_ELEMENT_TYPE.TEXT:\n                                msgContent = new Msg.Elem.Text(msgBody.MsgContent.Text);\n                                break;\n                            case MSG_ELEMENT_TYPE.FACE:\n                                msgContent = new Msg.Elem.Face(\n                                    msgBody.MsgContent.Index,\n                                    msgBody.MsgContent.Data\n                                );\n                                break;\n                            case MSG_ELEMENT_TYPE.IMAGE:\n                                msgContent = new Msg.Elem.Images(\n                                    msgBody.MsgContent.UUID,\n                                    msgBody.MsgContent.ImageFormat\n                                );\n                                for (var j in msgBody.MsgContent.ImageInfoArray) {\n                                    var tempImg = msgBody.MsgContent.ImageInfoArray[j];\n                                    msgContent.addImage(\n                                        new Msg.Elem.Images.Image(\n                                            tempImg.Type,\n                                            tempImg.Size,\n                                            tempImg.Width,\n                                            tempImg.Height,\n                                            tempImg.URL\n                                        )\n                                    );\n                                }\n                                break;\n                            case MSG_ELEMENT_TYPE.SOUND:\n                                // var soundUrl = getSoundDownUrl(msgBody.MsgContent.UUID, msgInfo.From_Account);\n                                if (msgBody.MsgContent) {\n                                    msgContent = new Msg.Elem.Sound(\n                                        msgBody.MsgContent.UUID,\n                                        msgBody.MsgContent.Second,\n                                        msgBody.MsgContent.Size,\n                                        msgInfo.From_Account,\n                                        msgInfo.To_Account,\n                                        msgBody.MsgContent.Download_Flag,\n                                        SESSION_TYPE.C2C\n                                    );\n                                } else {\n                                    msgType = MSG_ELEMENT_TYPE.TEXT;\n                                    msgContent = new Msg.Elem.Text('[语音消息]下载地址解析出错');\n                                }\n                                break;\n                            case MSG_ELEMENT_TYPE.LOCATION:\n                                msgContent = new Msg.Elem.Location(\n                                    msgBody.MsgContent.Longitude,\n                                    msgBody.MsgContent.Latitude,\n                                    msgBody.MsgContent.Desc\n                                );\n                                break;\n                            case MSG_ELEMENT_TYPE.FILE:\n                            case MSG_ELEMENT_TYPE.FILE + \" \":\n                                msgType = MSG_ELEMENT_TYPE.FILE;\n                                // var fileUrl = getFileDownUrl(msgBody.MsgContent.UUID, msgInfo.From_Account, msgBody.MsgContent.FileName);\n                                if (msgBody.MsgContent) {\n                                    msgContent = new Msg.Elem.File(\n                                        msgBody.MsgContent.UUID,\n                                        msgBody.MsgContent.FileName,\n                                        msgBody.MsgContent.FileSize,\n                                        msgInfo.From_Account,\n                                        msgInfo.To_Account,\n                                        msgBody.MsgContent.Download_Flag,\n                                        SESSION_TYPE.C2C\n                                    );\n                                } else {\n                                    msgType = MSG_ELEMENT_TYPE.TEXT;\n                                    msgContent = new Msg.Elem.Text('[文件消息下载地址解析出错]');\n                                }\n                                break;\n                            case MSG_ELEMENT_TYPE.CUSTOM:\n                                try {\n                                    var data = JSON.parse(msgBody.MsgContent.Data);\n                                    if (data && data.userAction && data.userAction == FRIEND_WRITE_MSG_ACTION.ING) { //过滤安卓或ios的正在输入自定义消息\n                                        continue;\n                                    }\n                                } catch (e) {}\n\n                                msgType = MSG_ELEMENT_TYPE.CUSTOM;\n                                msgContent = new Msg.Elem.Custom(\n                                    msgBody.MsgContent.Data,\n                                    msgBody.MsgContent.Desc,\n                                    msgBody.MsgContent.Ext\n                                );\n                                break;\n                            default:\n                                msgType = MSG_ELEMENT_TYPE.TEXT;\n                                msgContent = new Msg.Elem.Text('web端暂不支持' + msgBody.MsgType + '消息');\n                                break;\n                        }\n                        msg.elems.push(new Msg.Elem(msgType, msgContent));\n                    }\n\n                    if (msg.elems.length > 0 && MsgStore.addMsg(msg, true)) {\n                        notifyInfo.push(msg);\n                    }\n                } // for loop\n\n                //处理加群未决申请消息\n                handlerApplyJoinGroupSystemMsgs(resp.EventArray);\n\n                if (notifyInfo.length > 0)\n                    MsgStore.updateTimeline();\n                if (cbOk) cbOk(notifyInfo);\n                else if (notifyInfo.length > 0) {\n                    if (onMsgCallback) onMsgCallback(notifyInfo);\n                }\n\n            }, function (err) {\n                log.error(\"getMsgs failed:\" + err.ErrorInfo);\n                if (cbErr) cbErr(err);\n            });\n        };\n\n\n        //拉取C2C漫游消息\n        this.getC2CHistoryMsgs = function (options, cbOk, cbErr) {\n\n            if (!options.Peer_Account) {\n                if (cbErr) {\n                    cbErr(tool.getReturnError(\"Peer_Account is empty\", -13));\n                    return;\n                }\n            }\n            if (!options.MaxCnt) {\n                options.MaxCnt = 15;\n            }\n            if (options.MaxCnt <= 0) {\n                if (cbErr) {\n                    cbErr(tool.getReturnError(\"MaxCnt should be greater than 0\", -14));\n                    return;\n                }\n            }\n            if (options.MaxCnt > 15) {\n                if (cbErr) {\n                    cbErr(tool.getReturnError(\"MaxCnt can not be greater than 15\", -15));\n                    return;\n                }\n                return;\n            }\n            if (options.MsgKey == null || options.MsgKey === undefined) {\n                options.MsgKey = '';\n            }\n            var opts = {\n                'Peer_Account': options.Peer_Account,\n                'MaxCnt': options.MaxCnt,\n                'LastMsgTime': options.LastMsgTime,\n                'MsgKey': options.MsgKey\n            };\n            //读取c2c漫游消息\n            proto_getC2CHistoryMsgs(opts, function (resp) {\n                var msgObjList = [];\n                var msgInfos = [];\n                //处理c2c消息\n                msgInfos = resp.MsgList; //返回的消息列表\n                var sess = MsgStore.sessByTypeId(SESSION_TYPE.C2C, options.Peer_Account);\n                if (!sess) {\n                    sess = new Session(SESSION_TYPE.C2C, options.Peer_Account, options.Peer_Account, '', 0, 0);\n                }\n                for (var i in msgInfos) {\n                    var msgInfo = msgInfos[i];\n                    var isSendMsg, id;\n                    var headUrl = msgInfo.From_AccountHeadurl || '';\n                    if (msgInfo.From_Account == ctx.identifier) { //当前用户发送的消息\n                        isSendMsg = true;\n                        id = msgInfo.To_Account; //读取接收者信息\n                    } else { //当前用户收到的消息\n                        isSendMsg = false;\n                        id = msgInfo.From_Account; //读取发送者信息\n                    }\n                    var msg = new Msg(sess, isSendMsg, msgInfo.MsgSeq, msgInfo.MsgRandom, msgInfo.MsgTimeStamp,  msgInfo.From_Account, C2C_MSG_SUB_TYPE.COMMON, msgInfo.From_AccountNick, headUrl);\n                    var msgBody = null;\n                    var msgContent = null;\n                    var msgType = null;\n                    for (var mi in msgInfo.MsgBody) {\n                        msgBody = msgInfo.MsgBody[mi];\n                        msgType = msgBody.MsgType;\n                        switch (msgType) {\n                            case MSG_ELEMENT_TYPE.TEXT:\n                                msgContent = new Msg.Elem.Text(msgBody.MsgContent.Text);\n                                break;\n                            case MSG_ELEMENT_TYPE.FACE:\n                                msgContent = new Msg.Elem.Face(\n                                    msgBody.MsgContent.Index,\n                                    msgBody.MsgContent.Data\n                                );\n                                break;\n                            case MSG_ELEMENT_TYPE.IMAGE:\n                                msgContent = new Msg.Elem.Images(\n                                    msgBody.MsgContent.UUID,\n                                    msgBody.MsgContent.ImageFormat\n                                );\n                                for (var j in msgBody.MsgContent.ImageInfoArray) {\n                                    var tempImg = msgBody.MsgContent.ImageInfoArray[j];\n                                    msgContent.addImage(\n                                        new Msg.Elem.Images.Image(\n                                            tempImg.Type,\n                                            tempImg.Size,\n                                            tempImg.Width,\n                                            tempImg.Height,\n                                            tempImg.URL\n                                        )\n                                    );\n                                }\n                                break;\n                            case MSG_ELEMENT_TYPE.SOUND:\n\n                                // var soundUrl = getSoundDownUrl(msgBody.MsgContent.UUID, msgInfo.From_Account);\n\n                                if (msgBody.MsgContent) {\n                                    msgContent = new Msg.Elem.Sound(\n                                        msgBody.MsgContent.UUID,\n                                        msgBody.MsgContent.Second,\n                                        msgBody.MsgContent.Size,\n                                        msgInfo.From_Account,\n                                        msgInfo.To_Account,\n                                        msgBody.MsgContent.Download_Flag,\n                                        SESSION_TYPE.C2C\n                                    );\n                                } else {\n                                    msgType = MSG_ELEMENT_TYPE.TEXT;\n                                    msgContent = new Msg.Elem.Text('[语音消息]下载地址解析出错');\n                                }\n                                break;\n                            case MSG_ELEMENT_TYPE.LOCATION:\n                                msgContent = new Msg.Elem.Location(\n                                    msgBody.MsgContent.Longitude,\n                                    msgBody.MsgContent.Latitude,\n                                    msgBody.MsgContent.Desc\n                                );\n                                break;\n                            case MSG_ELEMENT_TYPE.FILE:\n                            case MSG_ELEMENT_TYPE.FILE + \" \":\n                                msgType = MSG_ELEMENT_TYPE.FILE;\n                                // var fileUrl = getFileDownUrl(msgBody.MsgContent.UUID, msgInfo.From_Account, msgBody.MsgContent.FileName);\n\n                                if (msgBody.MsgContent) {\n                                    msgContent = new Msg.Elem.File(\n                                        msgBody.MsgContent.UUID,\n                                        msgBody.MsgContent.FileName,\n                                        msgBody.MsgContent.FileSize,\n                                        msgInfo.From_Account,\n                                        msgInfo.To_Account,\n                                        msgBody.MsgContent.Download_Flag,\n                                        SESSION_TYPE.C2C\n                                    );\n                                } else {\n                                    msgType = MSG_ELEMENT_TYPE.TEXT;\n                                    msgContent = new Msg.Elem.Text('[文件消息下载地址解析出错]');\n                                }\n                                break;\n                            case MSG_ELEMENT_TYPE.CUSTOM:\n                                msgType = MSG_ELEMENT_TYPE.CUSTOM;\n                                msgContent = new Msg.Elem.Custom(\n                                    msgBody.MsgContent.Data,\n                                    msgBody.MsgContent.Desc,\n                                    msgBody.MsgContent.Ext\n                                );\n\n                                break;\n                            default:\n                                msgType = MSG_ELEMENT_TYPE.TEXT;\n                                msgContent = new Msg.Elem.Text('web端暂不支持' + msgBody.MsgType + '消息');\n                                break;\n                        }\n                        msg.elems.push(new Msg.Elem(msgType, msgContent));\n                    }\n                    MsgStore.addMsg(msg);\n                    msgObjList.push(msg);\n                } // for loop\n\n                MsgStore.updateTimeline();\n                if (cbOk) {\n\n                    var newResp = {\n                        'Complete': resp.Complete,\n                        'MsgCount': msgObjList.length,\n                        'LastMsgTime': resp.LastMsgTime,\n                        'MsgKey': resp.MsgKey,\n                        'MsgList': msgObjList\n                    };\n                    sess.isFinished(resp.Complete);\n                    cbOk(newResp);\n                }\n\n            }, function (err) {\n                log.error(\"getC2CHistoryMsgs failed:\" + err.ErrorInfo);\n                if (cbErr) cbErr(err);\n            });\n        };\n\n        //拉群历史消息\n        //不传cbOk 和 cbErr，则会调用新消息回调函数\n        this.syncGroupMsgs = function (options, cbOk, cbErr) {\n            if (options.ReqMsgSeq <= 0) {\n                if (cbErr) {\n                    var errInfo = \"ReqMsgSeq must be greater than 0\";\n                    var error = tool.getReturnError(errInfo, -16);\n                    cbErr(error);\n                }\n                return;\n            }\n            var opts = {\n                'GroupId': options.GroupId,\n                'ReqMsgSeq': options.ReqMsgSeq,\n                'ReqMsgNumber': options.ReqMsgNumber\n            };\n            //读群漫游消息\n            proto_getGroupMsgs(opts, function (resp) {\n                var notifyInfo = [];\n                var group_id = resp.GroupId; //返回的群id\n                var msgInfos = resp.RspMsgList; //返回的消息列表\n                var isFinished = resp.IsFinished;\n\n                if (msgInfos == null || msgInfos === undefined) {\n                    if (cbOk) {\n                        cbOk([]);\n                    }\n                    return;\n                }\n                for (var i = msgInfos.length - 1; i >= 0; i--) {\n                    var msgInfo = msgInfos[i];\n                    //如果是已经删除的消息或者发送者帐号为空或者消息内容为空\n                    //IsPlaceMsg=1\n                    if (msgInfo.IsPlaceMsg || !msgInfo.From_Account || !msgInfo.MsgBody || msgInfo.MsgBody.length == 0) {\n                        continue;\n                    }\n                    var msg = handlerGroupMsg(msgInfo, true, true, isFinished);\n                    if (msg) {\n                        notifyInfo.push(msg);\n                    }\n                } // for loop\n                if (notifyInfo.length > 0)\n                    MsgStore.updateTimeline();\n                if (cbOk) cbOk(notifyInfo);\n                else if (notifyInfo.length > 0) {\n                    if (onMsgCallback) onMsgCallback(notifyInfo);\n                }\n\n            }, function (err) {\n                log.error(\"getGroupMsgs failed:\" + err.ErrorInfo);\n                if (cbErr) cbErr(err);\n            });\n        };\n\n        //处理群消息(普通消息+提示消息)\n        //isSyncGroupMsgs 是否主动拉取群消息标志\n        //isAddMsgFlag 是否需要保存到MsgStore，如果需要，这里会存在判重逻辑\n        var handlerGroupMsg = function (msgInfo, isSyncGroupMsgs, isAddMsgFlag, isFinished) {\n            if (msgInfo.IsPlaceMsg || !msgInfo.From_Account || !msgInfo.MsgBody || msgInfo.MsgBody.length == 0) {\n                return null;\n            }\n            var isSendMsg, id, headUrl, fromAccountNick, fromAccountHeadurl;\n            var group_id = msgInfo.ToGroupId;\n            var group_name = group_id;\n            if (msgInfo.GroupInfo) { //取出群名称\n                if (msgInfo.GroupInfo.GroupName) {\n                    group_name = msgInfo.GroupInfo.GroupName;\n                }\n            }\n            //取出成员昵称\n            fromAccountNick = msgInfo.From_Account;\n            //fromAccountHeadurl = msgInfo.GroupInfo.From_AccountHeadurl;\n            if (msgInfo.GroupInfo) {\n                if (msgInfo.GroupInfo.From_AccountNick) {\n                    fromAccountNick = msgInfo.GroupInfo.From_AccountNick;\n\n                }\n                if (msgInfo.GroupInfo.From_AccountHeadurl) {\n                    fromAccountHeadurl = msgInfo.GroupInfo.From_AccountHeadurl;\n                } else {\n                    fromAccountHeadurl = null;\n                }\n            }\n            if (msgInfo.From_Account == ctx.identifier) { //当前用户发送的消息\n                isSendMsg = true;\n                id = msgInfo.From_Account; //读取接收者信息\n                headUrl = '';\n            } else { //当前用户收到的消息\n                isSendMsg = false;\n                id = msgInfo.From_Account; //读取发送者信息\n                headUrl = '';\n            }\n            var sess = MsgStore.sessByTypeId(SESSION_TYPE.GROUP, group_id);\n            if (!sess) {\n                sess = new Session(SESSION_TYPE.GROUP, group_id, group_name, headUrl, 0, 0);\n            }\n            if (typeof isFinished !== \"undefined\") {\n                sess.isFinished(isFinished || 0);\n            }\n            var subType = GROUP_MSG_SUB_TYPE.COMMON; //消息类型\n            //群提示消息,重新封装下\n            if (LONG_POLLINNG_EVENT_TYPE.GROUP_TIP == msgInfo.Event || LONG_POLLINNG_EVENT_TYPE.GROUP_TIP2 == msgInfo.Event) {\n                subType = GROUP_MSG_SUB_TYPE.TIP;\n                var groupTip = msgInfo.MsgBody;\n                msgInfo.MsgBody = [];\n                msgInfo.MsgBody.push({\n                    \"MsgType\": MSG_ELEMENT_TYPE.GROUP_TIP,\n                    \"MsgContent\": groupTip\n                });\n            } else if (msgInfo.MsgPriority) { //群点赞消息\n                if (msgInfo.MsgPriority == GROUP_MSG_PRIORITY_TYPE.REDPACKET) {\n                    subType = GROUP_MSG_SUB_TYPE.REDPACKET;\n                } else if (msgInfo.MsgPriority == GROUP_MSG_PRIORITY_TYPE.LOVEMSG) {\n                    subType = GROUP_MSG_SUB_TYPE.LOVEMSG;\n                }\n\n            }\n            var msg = new Msg(sess, isSendMsg, msgInfo.MsgSeq, msgInfo.MsgRandom, msgInfo.MsgTimeStamp, msgInfo.From_Account, subType, fromAccountNick, fromAccountHeadurl);\n            var msgBody = null;\n            var msgContent = null;\n            var msgType = null;\n            for (var mi in msgInfo.MsgBody) {\n                msgBody = msgInfo.MsgBody[mi];\n                msgType = msgBody.MsgType;\n                switch (msgType) {\n                    case MSG_ELEMENT_TYPE.TEXT:\n                        msgContent = new Msg.Elem.Text(msgBody.MsgContent.Text);\n                        break;\n                    case MSG_ELEMENT_TYPE.FACE:\n                        msgContent = new Msg.Elem.Face(\n                            msgBody.MsgContent.Index,\n                            msgBody.MsgContent.Data\n                        );\n                        break;\n                    case MSG_ELEMENT_TYPE.IMAGE:\n                        msgContent = new Msg.Elem.Images(\n                            msgBody.MsgContent.UUID,\n                            msgBody.MsgContent.ImageFormat || \"\"\n                        );\n                        for (var j in msgBody.MsgContent.ImageInfoArray) {\n                            msgContent.addImage(\n                                new Msg.Elem.Images.Image(\n                                    msgBody.MsgContent.ImageInfoArray[j].Type,\n                                    msgBody.MsgContent.ImageInfoArray[j].Size,\n                                    msgBody.MsgContent.ImageInfoArray[j].Width,\n                                    msgBody.MsgContent.ImageInfoArray[j].Height,\n                                    msgBody.MsgContent.ImageInfoArray[j].URL\n                                )\n                            );\n                        }\n                        break;\n                    case MSG_ELEMENT_TYPE.SOUND:\n                        if (msgBody.MsgContent) {\n                            msgContent = new Msg.Elem.Sound(\n                                msgBody.MsgContent.UUID,\n                                msgBody.MsgContent.Second,\n                                msgBody.MsgContent.Size,\n                                msgInfo.From_Account,\n                                msgInfo.To_Account,\n                                msgBody.MsgContent.Download_Flag,\n                                SESSION_TYPE.GROUP\n                            );\n                        } else {\n                            msgType = MSG_ELEMENT_TYPE.TEXT;\n                            msgContent = new Msg.Elem.Text('[语音消息]下载地址解析出错');\n                        }\n                        break;\n                    case MSG_ELEMENT_TYPE.LOCATION:\n                        msgContent = new Msg.Elem.Location(\n                            msgBody.MsgContent.Longitude,\n                            msgBody.MsgContent.Latitude,\n                            msgBody.MsgContent.Desc\n                        );\n                        break;\n                    case MSG_ELEMENT_TYPE.FILE:\n                    case MSG_ELEMENT_TYPE.FILE + \" \":\n                        msgType = MSG_ELEMENT_TYPE.FILE;\n                        var fileUrl = getFileDownUrl(msgBody.MsgContent.UUID, msgInfo.From_Account, msgBody.MsgContent.FileName);\n\n                        if (msgBody.MsgContent) {\n                            msgContent = new Msg.Elem.File(\n                                msgBody.MsgContent.UUID,\n                                msgBody.MsgContent.FileName,\n                                msgBody.MsgContent.FileSize,\n                                msgInfo.From_Account,\n                                msgInfo.To_Account,\n                                msgBody.MsgContent.Download_Flag,\n                                SESSION_TYPE.GROUP\n                            );\n                        } else {\n                            msgType = MSG_ELEMENT_TYPE.TEXT;\n                            msgContent = new Msg.Elem.Text('[文件消息]地址解析出错');\n                        }\n                        break;\n                    case MSG_ELEMENT_TYPE.GROUP_TIP:\n                        var opType = msgBody.MsgContent.OpType;\n                        msgContent = new Msg.Elem.GroupTip(\n                            opType,\n                            msgBody.MsgContent.Operator_Account,\n                            group_id,\n                            msgInfo.GroupInfo.GroupName,\n                            msgBody.MsgContent.List_Account,\n                            msgBody.MsgContent.MsgMemberExtraInfo\n                        );\n                        if (GROUP_TIP_TYPE.JOIN == opType || GROUP_TIP_TYPE.QUIT == opType) { //加群或退群时，设置最新群成员数\n                            msgContent.setGroupMemberNum(msgBody.MsgContent.MemberNum);\n                        } else if (GROUP_TIP_TYPE.MODIFY_GROUP_INFO == opType) { //群资料变更\n                            var tempIsCallbackFlag = false;\n                            var tempNewGroupInfo = {\n                                \"GroupId\": group_id,\n                                \"GroupFaceUrl\": null,\n                                \"GroupName\": null,\n                                \"OwnerAccount\": null,\n                                \"GroupNotification\": null,\n                                \"GroupIntroduction\": null\n                            };\n                            var msgGroupNewInfo = msgBody.MsgContent.MsgGroupNewInfo;\n                            if (msgGroupNewInfo.GroupFaceUrl) {\n                                var tmpNGIFaceUrl = new Msg.Elem.GroupTip.GroupInfo(\n                                    GROUP_TIP_MODIFY_GROUP_INFO_TYPE.FACE_URL,\n                                    msgGroupNewInfo.GroupFaceUrl\n                                );\n                                msgContent.addGroupInfo(tmpNGIFaceUrl);\n                                tempIsCallbackFlag = true;\n                                tempNewGroupInfo.GroupFaceUrl = msgGroupNewInfo.GroupFaceUrl;\n                            }\n                            if (msgGroupNewInfo.GroupName) {\n                                var tmpNGIName = new Msg.Elem.GroupTip.GroupInfo(\n                                    GROUP_TIP_MODIFY_GROUP_INFO_TYPE.NAME,\n                                    msgGroupNewInfo.GroupName\n                                );\n                                msgContent.addGroupInfo(tmpNGIName);\n                                tempIsCallbackFlag = true;\n                                tempNewGroupInfo.GroupName = msgGroupNewInfo.GroupName;\n                            }\n                            if (msgGroupNewInfo.Owner_Account) {\n                                var tmpNGIOwner = new Msg.Elem.GroupTip.GroupInfo(\n                                    GROUP_TIP_MODIFY_GROUP_INFO_TYPE.OWNER,\n                                    msgGroupNewInfo.Owner_Account\n                                );\n                                msgContent.addGroupInfo(tmpNGIOwner);\n                                tempIsCallbackFlag = true;\n                                tempNewGroupInfo.OwnerAccount = msgGroupNewInfo.Owner_Account;\n                            }\n                            if (msgGroupNewInfo.GroupNotification) {\n                                var tmpNGINotification = new Msg.Elem.GroupTip.GroupInfo(\n                                    GROUP_TIP_MODIFY_GROUP_INFO_TYPE.NOTIFICATION,\n                                    msgGroupNewInfo.GroupNotification\n                                );\n                                msgContent.addGroupInfo(tmpNGINotification);\n                                tempIsCallbackFlag = true;\n                                tempNewGroupInfo.GroupNotification = msgGroupNewInfo.GroupNotification;\n                            }\n                            if (msgGroupNewInfo.GroupIntroduction) {\n                                var tmpNGIIntroduction = new Msg.Elem.GroupTip.GroupInfo(\n                                    GROUP_TIP_MODIFY_GROUP_INFO_TYPE.INTRODUCTION,\n                                    msgGroupNewInfo.GroupIntroduction\n                                );\n                                msgContent.addGroupInfo(tmpNGIIntroduction);\n                                tempIsCallbackFlag = true;\n                                tempNewGroupInfo.GroupIntroduction = msgGroupNewInfo.GroupIntroduction;\n                            }\n\n                            //回调群资料变化通知方法\n                            if (isSyncGroupMsgs == false && tempIsCallbackFlag && onGroupInfoChangeCallback) {\n                                onGroupInfoChangeCallback(tempNewGroupInfo);\n                            }\n\n                        } else if (GROUP_TIP_TYPE.MODIFY_MEMBER_INFO == opType) { //群成员变更\n                            var memberInfos = msgBody.MsgContent.MsgMemberInfo;\n                            for (var n in memberInfos) {\n                                var memberInfo = memberInfos[n];\n                                msgContent.addMemberInfo(\n                                    new Msg.Elem.GroupTip.MemberInfo(\n                                        memberInfo.User_Account, memberInfo.ShutupTime\n                                    )\n                                );\n                            }\n                        }\n                        break;\n                    case MSG_ELEMENT_TYPE.CUSTOM:\n                        msgType = MSG_ELEMENT_TYPE.CUSTOM;\n                        msgContent = new Msg.Elem.Custom(\n                            msgBody.MsgContent.Data,\n                            msgBody.MsgContent.Desc,\n                            msgBody.MsgContent.Ext\n                        );\n                        break;\n                    default:\n                        msgType = MSG_ELEMENT_TYPE.TEXT;\n                        msgContent = new Msg.Elem.Text('web端暂不支持' + msgBody.MsgType + '消息');\n                        break;\n                }\n                msg.elems.push(new Msg.Elem(msgType, msgContent));\n            }\n\n            if (isAddMsgFlag == false) { //不需要保存消息\n                return msg;\n            }\n\n            if (MsgStore.addMsg(msg,true)) {\n                msg.extraInfo = msgInfo.GroupInfo.MsgFrom_AccountExtraInfo\n                return msg;\n            } else {\n                return null;\n            }\n        };\n\n        //初始化\n        this.init = function (listeners, cbOk, cbErr) {\n            if (!listeners.onMsgNotify) {\n                log.warn('listeners.onMsgNotify is empty');\n            }\n            onMsgCallback = listeners.onMsgNotify;\n\n            if (listeners.onBigGroupMsgNotify) {\n                onBigGroupMsgCallback = listeners.onBigGroupMsgNotify;\n            } else {\n                log.warn('listeners.onBigGroupMsgNotify is empty');\n            }\n\n            if (listeners.onC2cEventNotifys) {\n                onC2cEventCallbacks = listeners.onC2cEventNotifys;\n            } else {\n                log.warn('listeners.onC2cEventNotifys is empty');\n            }\n            if (listeners.onGroupSystemNotifys) {\n                onGroupSystemNotifyCallbacks = listeners.onGroupSystemNotifys;\n            } else {\n                log.warn('listeners.onGroupSystemNotifys is empty');\n            }\n            if (listeners.onGroupInfoChangeNotify) {\n                onGroupInfoChangeCallback = listeners.onGroupInfoChangeNotify;\n            } else {\n                log.warn('listeners.onGroupInfoChangeNotify is empty');\n            }\n            if (listeners.onFriendSystemNotifys) {\n                onFriendSystemNotifyCallbacks = listeners.onFriendSystemNotifys;\n            } else {\n                log.warn('listeners.onFriendSystemNotifys is empty');\n            }\n            if (listeners.onProfileSystemNotifys) {\n                onProfileSystemNotifyCallbacks = listeners.onProfileSystemNotifys;\n            } else {\n                log.warn('listeners.onProfileSystemNotifys is empty');\n            }\n            if (listeners.onKickedEventCall) {\n                onKickedEventCall = listeners.onKickedEventCall;\n\t    } else {\n\t        log.warn('listeners.onKickedEventCall is empty');\n\t    }\n\t    if (listeners.onLongPullingNotify) {\n\t        onLongPullingNotify = listeners.onLongPullingNotify;\n            } else {\n                log.warn('listeners.onKickedEventCall is empty');\n            }\n\n            if (listeners.onAppliedDownloadUrl) {\n                onAppliedDownloadUrl = listeners.onAppliedDownloadUrl;\n            } else {\n                log.warn('listeners.onAppliedDownloadUrl is empty');\n            }\n\n            if (!ctx.identifier || !ctx.userSig) {\n                if (cbOk) {\n                    var success = {\n                        'ActionStatus': ACTION_STATUS.OK,\n                        'ErrorCode': 0,\n                        'ErrorInfo': \"login success(no login state)\"\n                    };\n                    cbOk(success);\n                }\n                return;\n            }\n\n            //初始化\n            initMyGroupMaxSeqs(\n                function (resp) {\n                    log.info('initMyGroupMaxSeqs success');\n                    //初始化文件\n                    initIpAndAuthkey(\n                        function (initIpAndAuthkeyResp) {\n                            log.info('initIpAndAuthkey success');\n                            if (cbOk) {\n                                log.info('login success(have login state))');\n                                var success = {\n                                    'ActionStatus': ACTION_STATUS.OK,\n                                    'ErrorCode': 0,\n                                    'ErrorInfo': \"login success\"\n                                };\n                                cbOk(success);\n                            }\n                            MsgManager.setLongPollingOn(true); //开启长轮询\n                            longPollingOn && MsgManager.longPolling(cbOk);\n                        }, cbErr);\n                }, cbErr);\n        };\n\n        //发消息（私聊或群聊）\n        this.sendMsg = function (msg, cbOk, cbErr) {\n            proto_sendMsg(msg, function (resp) {\n                //私聊时，加入自己的发的消息，群聊时，由于seq和服务器的seq不一样，所以不作处理\n                if (msg.sess.type() == SESSION_TYPE.C2C) {\n                    if (!MsgStore.addMsg(msg)) {\n                        var errInfo = \"sendMsg: addMsg failed!\";\n                        var error = tool.getReturnError(errInfo, -17);\n                        log.error(errInfo);\n                        if (cbErr) cbErr(error);\n                        return;\n                    }\n                    //更新信息流时间\n                    MsgStore.updateTimeline();\n                }\n                if (cbOk) cbOk(resp);\n            }, function (err) {\n                if (cbErr) cbErr(err);\n            });\n        };\n    };\n\n    //上传文件\n    var FileUploader = new function () {\n        this.fileMd5 = null;\n        //获取文件MD5\n        var getFileMD5 = function (file, cbOk, cbErr) {\n\n            //FileReader pc浏览器兼容性\n            //Feature   Firefox (Gecko) Chrome  Internet Explorer   Opera   Safari\n            //Basic support 3.6 7   10                      12.02   6.0.2\n            var fileReader = null;\n            try {\n                fileReader = new FileReader(); //分块读取文件对象\n            } catch (e) {\n                if (cbErr) {\n                    cbErr(tool.getReturnError('当前浏览器不支持FileReader', -18));\n                    return;\n                }\n            }\n            //file的slice方法，注意它的兼容性，在不同浏览器的写法不同\n            var blobSlice = File.prototype.mozSlice || File.prototype.webkitSlice || File.prototype.slice;\n            if (!blobSlice) {\n                if (cbErr) {\n                    cbErr(tool.getReturnError('当前浏览器不支持FileAPI', -19));\n                    return;\n                }\n            }\n\n            var chunkSize = 2 * 1024 * 1024; //分块大小，2M\n            var chunks = Math.ceil(file.size / chunkSize); //总块数\n            var currentChunk = 0; //当前块数\n            var spark = new SparkMD5(); //获取MD5对象\n\n            fileReader.onload = function (e) { //数据加载完毕事件\n\n                var binaryStr = \"\";\n                var bytes = new Uint8Array(e.target.result);\n                var length = bytes.byteLength;\n                for (var i = 0; i < length; i++) {\n                    binaryStr += String.fromCharCode(bytes[i]); //二进制转换字符串\n                }\n                spark.appendBinary(binaryStr);\n                currentChunk++;\n                if (currentChunk < chunks) {\n                    loadNext(); //读取下一块数据\n                } else {\n                    this.fileMd5 = spark.end(); //得到文件MD5值\n                    if (cbOk) {\n                        cbOk(this.fileMd5);\n                    }\n                }\n            };\n            //分片读取文件\n\n            function loadNext() {\n                var start = currentChunk * chunkSize,\n                    end = start + chunkSize >= file.size ? file.size : start + chunkSize;\n                //根据开始和结束位置，切割文件\n                var b = blobSlice.call(file, start, end);\n                //readAsBinaryString ie浏览器不兼容此方法\n                //fileReader.readAsBinaryString(blobSlice.call(file, start, end));\n                fileReader.readAsArrayBuffer(b); //ie，chrome，firefox等主流浏览器兼容此方法\n\n            }\n\n            loadNext(); //开始读取\n        };\n        //提交上传图片表单(用于低版本IE9以下)\n        this.submitUploadFileForm = function (options, cbOk, cbErr) {\n            var errInfo;\n            var error;\n            var formId = options.formId;\n            var fileId = options.fileId;\n            var iframeNum = uploadResultIframeId++;\n            var iframeName = \"uploadResultIframe_\" + iframeNum;\n            var toAccount = options.To_Account;\n            var businessType = options.businessType;\n\n            var form = document.getElementById(formId);\n            if (!form) {\n                errInfo = \"获取表单对象为空: formId=\" + formId + \"(formId非法)\";\n                error = tool.getReturnError(errInfo, -20);\n                if (cbErr) cbErr(error);\n                return;\n            }\n\n            var fileObj = document.getElementById(fileId);\n            if (!fileObj) {\n                errInfo = \"获取文件对象为空: fileId=\" + fileId + \"(没有选择文件或者fileId非法)\";\n                error = tool.getReturnError(errInfo, -21);\n                if (cbErr) cbErr(error);\n                return;\n            }\n            //fileObj.type=\"file\";//ie8下不起作用，必须由业务自己设置\n            fileObj.name = \"file\";\n\n            var iframe = document.createElement(\"iframe\");\n            iframe.name = iframeName;\n            iframe.id = iframeName;\n            iframe.style.display = \"none\";\n            document.body.appendChild(iframe);\n\n            var cmdName;\n            if (isAccessFormalEnv()) {\n                cmdName = 'pic_up';\n            } else {\n                cmdName = 'pic_up_test';\n            }\n            var uploadApiUrl = \"https://pic.tim.qq.com/v4/openpic/\" + cmdName + \"?tinyid=\" + ctx.tinyid + \"&a2=\" + ctx.a2 + \"&sdkappid=\" + ctx.sdkAppID + \"&accounttype=\" + ctx.accountType + \"&contenttype=http\";\n            form.action = uploadApiUrl;\n            form.method = 'post';\n            //form.enctype='multipart/form-data';//ie8下不起作用，必须由业务自己设置\n            form.target = iframeName;\n\n            function createFormInput(name, value) {\n                var tempInput = document.createElement(\"input\");\n                tempInput.type = \"hidden\";\n                tempInput.name = name;\n                tempInput.value = value;\n                form.appendChild(tempInput);\n            }\n\n            createFormInput(\"App_Version\", VERSION_INFO.APP_VERSION);\n            createFormInput(\"From_Account\", ctx.identifier);\n            createFormInput(\"To_Account\", toAccount);\n            createFormInput(\"Seq\", nextSeq().toString());\n            createFormInput(\"Timestamp\", unixtime().toString());\n            createFormInput(\"Random\", createRandom().toString());\n            createFormInput(\"Busi_Id\", businessType);\n            createFormInput(\"PkgFlag\", UPLOAD_RES_PKG_FLAG.RAW_DATA.toString());\n            createFormInput(\"Auth_Key\", authkey);\n            createFormInput(\"Server_Ver\", VERSION_INFO.SERVER_VERSION.toString());\n            createFormInput(\"File_Type\", options.fileType);\n\n\n            //检测iframe.contentWindow.name是否有值\n\n            function checkFrameName() {\n                var resp;\n                try {\n                    resp = JSON.parse(iframe.contentWindow.name) || {};\n                } catch (e) {\n                    resp = {};\n                }\n                if (resp.ActionStatus) { //上传接口返回\n                    // We've got what we need. Stop the iframe from loading further content.\n                    iframe.src = \"about:blank\";\n                    iframe.parentNode.removeChild(iframe);\n                    iframe = null;\n\n                    if (resp.ActionStatus == ACTION_STATUS.OK) {\n                        cbOk && cbOk(resp);\n                    } else {\n                        cbErr && cbErr(resp);\n                    }\n                } else {\n                    setTimeout(checkFrameName, 100);\n                }\n            }\n\n            setTimeout(checkFrameName, 500);\n\n            form.submit(); //提交上传图片表单\n        };\n        //上传图片或文件(用于高版本浏览器，支持FileAPI)\n        this.uploadFile = function (options, cbOk, cbErr) {\n\n            var file_upload = {\n                //初始化\n                init: function (options, cbOk, cbErr) {\n                    var me = this;\n                    me.file = options.file;\n                    //分片上传进度回调事件\n                    me.onProgressCallBack = options.onProgressCallBack;\n                    //停止上传图片按钮\n                    if (options.abortButton) {\n                        options.abortButton.onclick = me.abortHandler;\n                    }\n                    me.total = me.file.size; //文件总大小\n                    me.loaded = 0; //已读取字节数\n                    me.step = 1080 * 1024; //分块大小，1080K\n                    me.sliceSize = 0; //分片大小\n                    me.sliceOffset = 0; //当前分片位置\n                    me.timestamp = unixtime(); //当前时间戳\n                    me.seq = nextSeq(); //请求seq\n                    me.random = createRandom(); //请求随机数\n                    me.fromAccount = ctx.identifier; //发送者\n                    me.toAccount = options.To_Account; //接收者\n                    me.fileMd5 = options.fileMd5; //文件MD5\n                    me.businessType = options.businessType; //图片或文件的业务类型，群消息:1; c2c消息:2; 个人头像：3; 群头像：4;\n                    me.fileType = options.fileType; //文件类型，不填为默认认为上传的是图片；1：图片；2：文件；3：短视频；4：PTT\n\n                    me.cbOk = cbOk; //上传成功回调事件\n                    me.cbErr = cbErr; //上传失败回调事件\n\n                    me.reader = new FileReader(); //读取文件对象\n                    me.blobSlice = File.prototype.mozSlice || File.prototype.webkitSlice || File.prototype.slice; //file的slice方法,不同浏览器不一样\n\n                    me.reader.onloadstart = me.onLoadStart; //开始读取回调事件\n                    me.reader.onprogress = me.onProgress; //读取文件进度回调事件\n                    me.reader.onabort = me.onAbort; //停止读取回调事件\n                    me.reader.onerror = me.onerror; //读取发生错误回调事件\n                    me.reader.onload = me.onLoad; //分片加载完毕回调事件\n                    me.reader.onloadend = me.onLoadEnd; //读取文件完毕回调事件\n                },\n                //上传方法\n                upload: function () {\n                    var me = file_upload;\n                    //读取第一块\n                    me.readBlob(0);\n                },\n                onLoadStart: function () {\n                    var me = file_upload;\n                },\n                onProgress: function (e) {\n                    var me = file_upload;\n                    me.loaded += e.loaded;\n                    if (me.onProgressCallBack) {\n                        me.onProgressCallBack(me.loaded, me.total);\n                    }\n                },\n                onAbort: function () {\n                    var me = file_upload;\n                },\n                onError: function () {\n                    var me = file_upload;\n                },\n                onLoad: function (e) {\n                    var me = file_upload;\n                    if (e.target.readyState == FileReader.DONE) {\n                        var slice_data_base64 = e.target.result;\n                        //注意，一定要去除base64编码头部\n                        var pos = slice_data_base64.indexOf(\",\");\n                        if (pos != -1) {\n                            slice_data_base64 = slice_data_base64.substr(pos + 1);\n                        }\n                        //封装上传图片接口的请求参数\n                        var opt = {\n                            'From_Account': me.fromAccount,\n                            'To_Account': me.toAccount,\n                            'Busi_Id': me.businessType,\n                            'File_Type': me.fileType,\n                            'File_Str_Md5': me.fileMd5,\n                            'PkgFlag': UPLOAD_RES_PKG_FLAG.BASE64_DATA,\n                            'File_Size': me.total,\n                            'Slice_Offset': me.sliceOffset,\n                            'Slice_Size': me.sliceSize,\n                            'Slice_Data': slice_data_base64,\n                            'Seq': me.seq,\n                            'Timestamp': me.timestamp,\n                            'Random': me.random\n                        };\n\n                        //上传成功的成功回调\n                        var succCallback = function (resp) {\n                            if (resp.IsFinish == 0) {\n                                me.loaded = resp.Next_Offset;\n                                if (me.loaded < me.total) {\n                                    me.readBlob(me.loaded);\n                                } else {\n                                    me.loaded = me.total;\n                                }\n                            } else {\n\n                                if (me.cbOk) {\n                                    var tempResp = {\n                                        'ActionStatus': resp.ActionStatus,\n                                        'ErrorCode': resp.ErrorCode,\n                                        'ErrorInfo': resp.ErrorInfo,\n                                        'File_UUID': resp.File_UUID,\n                                        'File_Size': resp.Next_Offset,\n                                        'URL_INFO': resp.URL_INFO,\n                                        'Download_Flag': resp.Download_Flag\n                                    };\n                                    if (me.fileType == UPLOAD_RES_TYPE.FILE) { //如果上传的是文件，下载地址需要sdk内部拼接\n                                        tempResp.URL_INFO = getFileDownUrl(resp.File_UUID, ctx.identifier, me.file.name);\n                                    }\n                                    me.cbOk(tempResp);\n                                }\n                            }\n                            Upload_Retry_Times = 0;\n                        };\n                        //上传失败的回调\n                        var errorCallback = function (resp) {\n                            if (Upload_Retry_Times < Upload_Retry_Max_Times) {\n                                Upload_Retry_Times++;\n                                setTimeout(function () {\n                                    proto_uploadPic(opt, succCallback, errorCallback);\n                                }, 1000);\n                            } else {\n                                me.cbErr(resp);\n                            }\n                            //me.cbErr\n                        };\n                        //分片上传图片接口\n                        proto_uploadPic(opt, succCallback, errorCallback);\n                    }\n                },\n                onLoadEnd: function () {\n                    var me = file_upload;\n                },\n                //分片读取文件方法\n                readBlob: function (start) {\n                    var me = file_upload;\n                    var blob, file = me.file;\n                    var end = start + me.step;\n                    if (end > me.total) {\n                        end = me.total;\n                        me.sliceSize = end - start;\n                    } else {\n                        me.sliceSize = me.step;\n                    }\n                    me.sliceOffset = start;\n                    //根据起始和结束位置，分片读取文件\n                    blob = me.blobSlice.call(file, start, end);\n                    //将分片的二进制数据转换为base64编码\n                    me.reader.readAsDataURL(blob);\n                },\n                abortHandler: function () {\n                    var me = file_upload;\n                    if (me.reader) {\n                        me.reader.abort();\n                    }\n                }\n            };\n\n            //读取文件MD5\n            getFileMD5(options.file,\n                function (fileMd5) {\n                    log.info('fileMd5: ' + fileMd5);\n                    options.fileMd5 = fileMd5;\n                    //初始化上传参数\n                    file_upload.init(options, cbOk, cbErr);\n                    //开始上传文件\n                    file_upload.upload();\n                },\n                cbErr\n            );\n        };\n    };\n\n\n    //web im 基础对象\n\n    //常量对象\n\n    //会话类型\n    webim.SESSION_TYPE = SESSION_TYPE;\n\n    webim.MSG_MAX_LENGTH = MSG_MAX_LENGTH;\n\n    //c2c消息子类型\n    webim.C2C_MSG_SUB_TYPE = C2C_MSG_SUB_TYPE;\n\n    //群消息子类型\n    webim.GROUP_MSG_SUB_TYPE = GROUP_MSG_SUB_TYPE;\n\n    //消息元素类型\n    webim.MSG_ELEMENT_TYPE = MSG_ELEMENT_TYPE;\n\n    //群提示消息类型\n    webim.GROUP_TIP_TYPE = GROUP_TIP_TYPE;\n\n    //图片类型\n    webim.IMAGE_TYPE = IMAGE_TYPE;\n\n    //群系统消息类型\n    webim.GROUP_SYSTEM_TYPE = GROUP_SYSTEM_TYPE;\n\n    //好友系统通知子类型\n    webim.FRIEND_NOTICE_TYPE = FRIEND_NOTICE_TYPE;\n\n    //群提示消息-群资料变更类型\n    webim.GROUP_TIP_MODIFY_GROUP_INFO_TYPE = GROUP_TIP_MODIFY_GROUP_INFO_TYPE;\n\n    //浏览器信息\n    webim.BROWSER_INFO = BROWSER_INFO;\n\n    //表情对象\n    webim.Emotions = webim.EmotionPicData = emotions;\n    //表情标识符和index Map\n    webim.EmotionDataIndexs = webim.EmotionPicDataIndex = emotionDataIndexs;\n\n    //腾讯登录服务错误码(托管模式)\n    webim.TLS_ERROR_CODE = TLS_ERROR_CODE;\n\n    //连接状态\n    webim.CONNECTION_STATUS = CONNECTION_STATUS;\n\n    //上传图片业务类型\n    webim.UPLOAD_PIC_BUSSINESS_TYPE = UPLOAD_PIC_BUSSINESS_TYPE;\n\n    //最近联系人类型\n    webim.RECENT_CONTACT_TYPE = RECENT_CONTACT_TYPE;\n\n    //上传资源类型\n    webim.UPLOAD_RES_TYPE = UPLOAD_RES_TYPE;\n\n\n    /**************************************/\n\n    //类对象\n    //\n    //工具对象\n    webim.Tool = tool;\n    //控制台打印日志对象\n    webim.Log = log;\n\n    //消息对象\n    webim.Msg = Msg;\n    //会话对象\n    webim.Session = Session;\n    //会话存储对象\n    webim.MsgStore = {\n        sessMap: function () {\n            return MsgStore.sessMap();\n        },\n        sessCount: function () {\n            return MsgStore.sessCount();\n        },\n        sessByTypeId: function (type, id) {\n            return MsgStore.sessByTypeId(type, id);\n        },\n        delSessByTypeId: function (type, id) {\n            return MsgStore.delSessByTypeId(type, id);\n        },\n        resetCookieAndSyncFlag: function () {\n            return MsgStore.resetCookieAndSyncFlag();\n        }\n    };\n\n    webim.Resources = Resources;\n\n    /**************************************/\n\n    // webim API impl\n    //\n    //基本接口\n    //登录\n    webim.login = webim.init = function (loginInfo, listeners, opts, cbOk, cbErr) {\n\n        //初始化连接状态回调函数\n        ConnManager.init(listeners.onConnNotify, cbOk, cbErr);\n\n        //设置ie9以下浏览器jsonp回调\n        if (listeners.jsonpCallback) jsonpCallback = listeners.jsonpCallback;\n        //登录\n        _login(loginInfo, listeners, opts, cbOk, cbErr);\n    };\n    //登出\n    //需要传长轮询id\n    //这样登出之后其他的登录实例还可以继续收取消息\n    webim.logout = webim.offline = function (cbOk, cbErr) {\n        return proto_logout('instance', cbOk, cbErr);\n    };\n\n    //登出\n    //这种登出方式，所有的实例都将不会收到消息推送，直到重新登录\n    webim.logoutAll = function (cbOk, cbErr) {\n        return proto_logout('all', cbOk, cbErr);\n    };\n\n\n    //消息管理接口\n    //发消息接口（私聊和群聊）\n    webim.sendMsg = function (msg, cbOk, cbErr) {\n        return MsgManager.sendMsg(msg, cbOk, cbErr);\n    };\n    //拉取未读c2c消息\n    webim.syncMsgs = function (cbOk, cbErr) {\n        return MsgManager.syncMsgs(cbOk, cbErr);\n    };\n    //拉取C2C漫游消息\n    webim.getC2CHistoryMsgs = function (options, cbOk, cbErr) {\n        return MsgManager.getC2CHistoryMsgs(options, cbOk, cbErr);\n    };\n    //拉取群漫游消息\n    webim.syncGroupMsgs = function (options, cbOk, cbErr) {\n        return MsgManager.syncGroupMsgs(options, cbOk, cbErr);\n    };\n\n    //上报c2c消息已读\n    webim.c2CMsgReaded = function (options, cbOk, cbErr) {\n        return MsgStore.c2CMsgReaded(options, cbOk, cbErr);\n    };\n\n    //上报群消息已读\n    webim.groupMsgReaded = function (options, cbOk, cbErr) {\n        return proto_groupMsgReaded(options, cbOk, cbErr);\n    };\n\n    //设置聊天会话自动标记已读\n    webim.setAutoRead = function (selSess, isOn, isResetAll) {\n        return MsgStore.setAutoRead(selSess, isOn, isResetAll);\n    };\n\n    //群组管理接口\n    //\n    //创建群\n    webim.createGroup = function (options, cbOk, cbErr) {\n        return proto_createGroup(options, cbOk, cbErr);\n    };\n    //创建群-高级接口\n    webim.createGroupHigh = function (options, cbOk, cbErr) {\n        return proto_createGroupHigh(options, cbOk, cbErr);\n    };\n    //申请加群\n    webim.applyJoinGroup = function (options, cbOk, cbErr) {\n        return proto_applyJoinGroup(options, cbOk, cbErr);\n    };\n    //处理加群申请(同意或拒绝)\n    webim.handleApplyJoinGroupPendency = function (options, cbOk, cbErr) {\n        return proto_handleApplyJoinGroupPendency(options, cbOk, cbErr);\n    };\n\n    //获取群组未决列表\n    webim.getPendencyGroup = function (options, cbOk, cbErr) {\n        return proto_getPendencyGroup(options, cbOk, cbErr);\n    };\n\n    //群未决已读上报\n    webim.getPendencyGroupRead = function (options, cbOk, cbErr) {\n        return proto_getPendencyGroupRead(options, cbOk, cbErr);\n    };\n\n    //处理邀请进群申请(同意或拒绝)\n    webim.handleInviteJoinGroupRequest = function (options, cbOk, cbErr) {\n        return proto_handleInviteJoinGroupRequest(options, cbOk, cbErr);\n    };\n\n    //删除加群申请\n    webim.deleteApplyJoinGroupPendency = function (options, cbOk, cbErr) {\n        return proto_deleteC2CMsg(options, cbOk, cbErr);\n    };\n\n    //主动退群\n    webim.quitGroup = function (options, cbOk, cbErr) {\n        return proto_quitGroup(options, cbOk, cbErr);\n    };\n    //搜索群组(根据名称)\n    webim.searchGroupByName = function (options, cbOk, cbErr) {\n        return proto_searchGroupByName(options, cbOk, cbErr);\n    };\n    //获取群组公开资料(根据群id搜索)\n    webim.getGroupPublicInfo = function (options, cbOk, cbErr) {\n        return proto_getGroupPublicInfo(options, cbOk, cbErr);\n    };\n    //获取群组详细资料-高级接口\n    webim.getGroupInfo = function (options, cbOk, cbErr) {\n        return proto_getGroupInfo(options, cbOk, cbErr);\n    };\n    //修改群基本资料\n    webim.modifyGroupBaseInfo = function (options, cbOk, cbErr) {\n        return proto_modifyGroupBaseInfo(options, cbOk, cbErr);\n    };\n    //获取群成员列表\n    webim.getGroupMemberInfo = function (options, cbOk, cbErr) {\n        return proto_getGroupMemberInfo(options, cbOk, cbErr);\n    };\n    //邀请好友加群\n    webim.addGroupMember = function (options, cbOk, cbErr) {\n        return proto_addGroupMember(options, cbOk, cbErr);\n    };\n    //修改群成员资料\n    webim.modifyGroupMember = function (options, cbOk, cbErr) {\n        return proto_modifyGroupMember(options, cbOk, cbErr);\n    };\n    //删除群成员\n    webim.deleteGroupMember = function (options, cbOk, cbErr) {\n        return proto_deleteGroupMember(options, cbOk, cbErr);\n    };\n    //解散群\n    webim.destroyGroup = function (options, cbOk, cbErr) {\n        return proto_destroyGroup(options, cbOk, cbErr);\n    };\n    //转让群组\n    webim.changeGroupOwner = function (options, cbOk, cbErr) {\n        return proto_changeGroupOwner(options, cbOk, cbErr);\n    };\n\n    //获取我的群组列表-高级接口\n    webim.getJoinedGroupListHigh = function (options, cbOk, cbErr) {\n        return proto_getJoinedGroupListHigh(options, cbOk, cbErr);\n    };\n    //获取群成员角色\n    webim.getRoleInGroup = function (options, cbOk, cbErr) {\n        return proto_getRoleInGroup(options, cbOk, cbErr);\n    };\n    //设置群成员禁言时间\n    webim.forbidSendMsg = function (options, cbOk, cbErr) {\n        return proto_forbidSendMsg(options, cbOk, cbErr);\n    };\n    //发送自定义群系统通知\n    webim.sendCustomGroupNotify = function (options, cbOk, cbErr) {\n        return proto_sendCustomGroupNotify(options, cbOk, cbErr);\n    };\n\n    //进入大群\n    webim.applyJoinBigGroup = function (options, cbOk, cbErr) {\n        return proto_applyJoinBigGroup(options, cbOk, cbErr);\n    };\n    //退出大群\n    webim.quitBigGroup = function (options, cbOk, cbErr) {\n        return proto_quitBigGroup(options, cbOk, cbErr);\n    };\n\n    //资料关系链管理接口\n    //\n    //获取个人资料接口，可用于搜索用户\n    webim.getProfilePortrait = function (options, cbOk, cbErr) {\n        return proto_getProfilePortrait(options, cbOk, cbErr);\n    };\n    //设置个人资料\n    webim.setProfilePortrait = function (options, cbOk, cbErr) {\n        return proto_setProfilePortrait(options, cbOk, cbErr);\n    };\n    //申请加好友\n    webim.applyAddFriend = function (options, cbOk, cbErr) {\n        return proto_applyAddFriend(options, cbOk, cbErr);\n    };\n    //获取好友申请列表\n    webim.getPendency = function (options, cbOk, cbErr) {\n        return proto_getPendency(options, cbOk, cbErr);\n    };\n    //好友申请列表已读上报\n    webim.getPendencyReport = function (options, cbOk, cbErr) {\n        return proto_getPendencyReport(options, cbOk, cbErr);\n    };\n    //删除好友申请\n    webim.deletePendency = function (options, cbOk, cbErr) {\n        return proto_deletePendency(options, cbOk, cbErr);\n    };\n    //处理好友申请\n    webim.responseFriend = function (options, cbOk, cbErr) {\n        return proto_responseFriend(options, cbOk, cbErr);\n    };\n    //获取我的好友\n    webim.getAllFriend = function (options, cbOk, cbErr) {\n        return proto_getAllFriend(options, cbOk, cbErr);\n    };\n    //删除会话\n    webim.deleteChat = function (options, cbOk, cbErr) {\n        return proto_deleteChat(options, cbOk, cbErr);\n    };\n    //删除好友\n    webim.deleteFriend = function (options, cbOk, cbErr) {\n        return proto_deleteFriend(options, cbOk, cbErr);\n    };\n    //拉黑\n    webim.addBlackList = function (options, cbOk, cbErr) {\n        return proto_addBlackList(options, cbOk, cbErr);\n    };\n    //删除黑名单\n    webim.deleteBlackList = function (options, cbOk, cbErr) {\n        return proto_deleteBlackList(options, cbOk, cbErr);\n    };\n    //获取我的黑名单\n    webim.getBlackList = function (options, cbOk, cbErr) {\n        return proto_getBlackList(options, cbOk, cbErr);\n    };\n\n    //获取最近会话\n    webim.getRecentContactList = function (options, cbOk, cbErr) {\n        return proto_getRecentContactList(options, cbOk, cbErr);\n    };\n\n    //图片或文件服务接口\n    //\n    //上传文件接口（高版本浏览器）\n    webim.uploadFile = webim.uploadPic = function (options, cbOk, cbErr) {\n        return FileUploader.uploadFile(options, cbOk, cbErr);\n    };\n    //提交上传图片表单接口（用于低版本ie）\n    webim.submitUploadFileForm = function (options, cbOk, cbErr) {\n        return FileUploader.submitUploadFileForm(options, cbOk, cbErr);\n    };\n    //上传图片或文件(Base64)接口\n    webim.uploadFileByBase64 = webim.uploadPicByBase64 = function (options, cbOk, cbErr) {\n        //请求参数\n        var opt = {\n            'To_Account': options.toAccount,\n            'Busi_Id': options.businessType,\n            'File_Type': options.File_Type,\n            'File_Str_Md5': options.fileMd5,\n            'PkgFlag': UPLOAD_RES_PKG_FLAG.BASE64_DATA,\n            'File_Size': options.totalSize,\n            'Slice_Offset': 0,\n            'Slice_Size': options.totalSize,\n            'Slice_Data': options.base64Str,\n            'Seq': nextSeq(),\n            'Timestamp': unixtime(),\n            'Random': createRandom()\n        };\n        return proto_uploadPic(opt, cbOk, cbErr);\n    };\n\n    //设置jsonp返回的值\n    webim.setJsonpLastRspData = function (rspData) {\n        jsonpLastRspData = typeof (rspData) == \"string\" ? JSON.parse(rspData) : rspData;\n    };\n\n    //获取长轮询ID\n    webim.getLongPollingId = function (options, cbOk, cbErr) {\n        return proto_getLongPollingId(options, cbOk, cbErr);\n    };\n\n    //获取下载地址\n    webim.applyDownload = function (options, cbOk, cbErr) {\n        return proto_applyDownload(options, cbOk, cbErr);\n    };\n\n    //获取下载地址\n    webim.onDownFile = function (uuid) {\n        window.open(Resources.downloadMap[\"uuid_\" + uuid]);\n    };\n\n    //检查是否登录\n    webim.checkLogin = function (cbErr, isNeedCallBack) {\n        return checkLogin(cbErr, isNeedCallBack);\n    };\n})(webim);\n\n\n\n// WEBPACK FOOTER //\n// ./src/assets/im/webim.js","function injectStyle (ssrContext) {\n  require(\"!!vue-style-loader!css-loader?minimize!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-1ca45723\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./ConversationItem.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./ConversationItem.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./ConversationItem.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-1ca45723\\\",\\\"hasScoped\\\":true,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./ConversationItem.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-1ca45723\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/chat/ConversationItem.vue\n// module id = 584\n// module chunks = 17","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/index.js?minimize!../../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-1ca45723\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./ConversationItem.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"58fec587\", content, true, {});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-style-loader!./node_modules/css-loader?minimize!./node_modules/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-1ca45723\",\"scoped\":true,\"hasInlineConfig\":false}!./node_modules/vue-loader/lib/selector.js?type=styles&index=0!./src/components/chat/ConversationItem.vue\n// module id = 585\n// module chunks = 17","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".item[data-v-1ca45723]{background:#fff;padding:10px 16px;position:relative}.middle[data-v-1ca45723]{width:100%;display:inline-block;position:absolute;top:50%;transform:translateY(-50%);margin:auto 10px}.right[data-v-1ca45723]{float:right;font-size:12px;margin-top:6px;color:#666}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader?minimize!./node_modules/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-1ca45723\",\"scoped\":true,\"hasInlineConfig\":false}!./node_modules/vue-loader/lib/selector.js?type=styles&index=0!./src/components/chat/ConversationItem.vue\n// module id = 586\n// module chunks = 17","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:\"item\"},[_c('img',{attrs:{\"src\":_vm.img,\"alt\":\"\",\"width\":\"52px\",\"height\":\"52px\"}}),_vm._v(\" \"),_c('span',{staticClass:\"right\"},[_vm._v(_vm._s(_vm.sendTime))]),_vm._v(\" \"),_c('div',{staticClass:\"middle\"},[_c('div',{staticStyle:{\"font-size\":\"15px\",\"font-weight\":\"bold\",\"color\":\"#222222\"}},[_vm._v(_vm._s(_vm.conversationItem.nick))]),_vm._v(\" \"),_c('div',{staticStyle:{\"font-size\":\"12px\",\"margin-top\":\"6px\",\"color\":\"#666666\"}},[_vm._v(\" \"+_vm._s(_vm.showText))])])]),_vm._v(\" \"),_c('hr',{staticClass:\"line\"})])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-1ca45723\",\"hasScoped\":true,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/chat/ConversationItem.vue\n// module id = 587\n// module chunks = 17","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[(_vm.conversationList.length > 0)?_c('div',_vm._l((_vm.conversationList),function(conversationItem){return _c('conversation-item',{key:conversationItem.account,attrs:{\"conversationItem\":conversationItem},nativeOn:{\"click\":function($event){_vm.toChat(conversationItem)}}})})):_vm._e(),_vm._v(\" \"),(_vm.conversationList.length == 0)?_c('div',{staticClass:\"empty\"},[_c('img',{attrs:{\"src\":_vm.consultationEmpty,\"width\":\"144px\",\"height\":\"136px\"}}),_vm._v(\" \"),_c('div',{staticStyle:{\"font-size\":\"15px\",\"margin-top\":\"10px\",\"color\":\"#b3b3b3\"}},[_vm._v(\"暂无相关记录\")])]):_vm._e()])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-f977e012\",\"hasScoped\":true,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/chat/ConversationList.vue\n// module id = 588\n// module chunks = 17"],"sourceRoot":""}